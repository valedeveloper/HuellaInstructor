<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Rainbow.CSharp.SDK</name>
    </assembly>
    <members>
        <member name="T:Rainbow.Administration">
            <summary>
            This object is available only using <see cref="M:Rainbow.Application.GetAdministration"/> from <see cref="T:Rainbow.Application"/> object.
            
            This object can be used only by user with administration right
            
            It permits to manage Companies and Users members.
             
            It can also be used to create Guest users who are specific temporaly users that can be used in Rainbow.
            </summary>
        </member>
        <member name="M:Rainbow.Administration.CreateDirectoryContact(Rainbow.Model.DirectoryContact,System.Action{Rainbow.SdkResult{Rainbow.Model.DirectoryContact}})">
            <summary>
            To create a <see cref="T:Rainbow.Model.DirectoryContact"/> in the company directory or the personal directory.
            
            If "CompanyId" is not specified, the entry is added in the personal directory of the logged user.
            
            At least one of this property must be not null/empty: FirstName, LastName or CompanyName.
            
            </summary>
            <param name="directoryContact"><see cref="T:Rainbow.Model.DirectoryContact"/> The directory contact to create</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{DirectoryContact}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.DirectoryContact"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Administration.UpdateDirectoryContact(Rainbow.Model.DirectoryContact,System.Action{Rainbow.SdkResult{Rainbow.Model.DirectoryContact}})">
            <summary>
            To update a <see cref="T:Rainbow.Model.DirectoryContact"/> in the company directory or the personal directory.
            
            "Id" property is mandatory
            
            At least one of this property must be not null/empty: FirstName, LastName or CompanyName.
            
            </summary>
            <param name="directoryContact"><see cref="T:Rainbow.Model.DirectoryContact"/> The directory contact to update</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{DirectoryContact}}"/> Callback fired when the operation is done - <see cref="T:Rainbow.Model.DirectoryContact"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs. Image can be null is user as no Avatar</param>
        </member>
        <member name="M:Rainbow.Administration.DeleteDirectoryContact(System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            To delete a <see cref="T:Rainbow.Model.DirectoryContact"/> in the company directory or the personal directory.
            </summary>
            <param name="id"><see cref="T:System.String"/> Id of the Directory Contact</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Administration.GetDirectoryContact(System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.DirectoryContact}})">
            <summary>
            To get a <see cref="T:Rainbow.Model.DirectoryContact"/> from the company directory or the personal directory.
            </summary>
            <param name="id"><see cref="T:System.String"/> Id of the Directory Contact</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.DirectoryContact"/>  is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Administration.DeleteDirectory(System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            To delete all <see cref="T:Rainbow.Model.DirectoryContact"/> objects in the company directory
            </summary>
            <param name="companyId"><see cref="T:System.String"/> Company Id</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Administration.GetDirectoryContactsList(System.Int32,System.Int32,System.String,System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.DirectoryContactsListData}})">
            <summary>
            To get a list of <see cref="T:Rainbow.Model.DirectoryContact"/> objects.
            
            Use "view" property if you want to retrieve personal directory contacts, company directory contacts or both.
            
            </summary>
            <param name="limit"><see cref="T:System.Int32"/> Limit of DirectoryContact to retrieve (100 by default)</param>
            <param name="offset"><see cref="T:System.Int32"/> Offset to use to retrieve DirectoryContact - if offset > total, no result is returned</param>
            <param name="view"><see cref="T:System.String"/> To retreive "personal", "company" or "all" (default value) DirectoryContact</param>
            <param name="tags"><see cref="T:System.String"/> To retrieve only DirectoryContact with the specified Tag - Can be null</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{ApplicationsInfoData}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.DirectoryContactsListData"/> object is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Administration.GetApplications(System.Int32,System.Int32,System.Action{Rainbow.SdkResult{Rainbow.Model.ApplicationsInfoData}})">
            <summary>
            Get the list of Rainbow Applications
            </summary>
            <param name="limit"><see cref="T:System.Int32"/> Limit of Rainbow Applications to retrieve (100 by default)</param>
            <param name="offset"><see cref="T:System.Int32"/> Offset to use to retrieve Rainbow Applications - if offset > total, no result is returned</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{ApplicationsInfoData}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.ApplicationsInfoData"/> object is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Administration.GetApplication(System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.ApplicationInfo}})">
            <summary>
            Get Rainbow Applications info
            </summary>
            <param name="appId"><see cref="T:System.String"/>Application Id</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{ApplicationInfo}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.ApplicationInfo"/> object is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Administration.UpdateApplication(Rainbow.Model.ApplicationInfo,System.Action{Rainbow.SdkResult{Rainbow.Model.ApplicationInfo}})">
            <summary>
            To update a Rainbow Applications 
            </summary>
            <param name="applicationInfo"><see cref="T:Rainbow.Model.ApplicationInfo"/>Application Info object</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{ApplicationInfo}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.ApplicationInfo"/> object is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Administration.GetAvailableThemes(System.Int32,System.Int32,System.Action{Rainbow.SdkResult{Rainbow.Model.ThemesData}})">
            <summary>
            Get available theme. 
            </summary>
            <param name="limit"><see cref="T:System.Int32"/> Limit of Themes to retrieve (100 by default)</param>
            <param name="offset"><see cref="T:System.Int32"/> Offset to use to retrieve Themes - if offset > total, no result is returned</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{ThemesData}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.ThemesData"/> object is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Administration.DeleteTheme(System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            Select a theme. The theme must be visible to user and user must be allowed to select a theme, otherwise an error is returned.
            </summary>
            <param name="themeId"><see cref="T:System.String"/>Id of the theme to select</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Administration.CreateTheme(Rainbow.Model.Theme,System.Action{Rainbow.SdkResult{Rainbow.Model.Theme}})">
            <summary>
            Create a theme.
            
            Fields not use in the Theme object in the creation: Id, IsRainbowDefaultTheme, OwnedByCompany, CreatedBy, CreationDate, LastAvatarUpdateDate
            </summary>
            <param name="theme"><see cref="T:Rainbow.Model.Theme"/>Theme to create</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Theme}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.Theme"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Administration.UpdateTheme(Rainbow.Model.Theme,System.Action{Rainbow.SdkResult{Rainbow.Model.Theme}})">
            <summary>
            Update a theme.
            
            Fields not use in the Theme object in the creation: Id, IsRainbowDefaultTheme, OwnedByCompany, CreatedBy, CreationDate, LastAvatarUpdateDate
            </summary>
            <param name="theme"><see cref="T:Rainbow.Model.Theme"/>Theme to create</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Theme}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.Theme"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Administration.GetAvatarTheme(System.String,System.Int32,System.Action{Rainbow.SdkResult{System.Byte[]}})">
            <summary>
            Get the avatar of the specified theme Id from the server with the specified size.
            </summary>
            <param name="themeId"><see cref="T:System.String"/>Theme Id</param>
            <param name="size"><see cref="T:System.Int32"/>Specify avatar size in pixels (square size x size). Default value: 80. Max Value: 512. The image is not resized if the expected size is greater than the image stored on server side.</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{byte[]}}"/>Callback fired when the operation is done - <see cref="T:byte[]"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs. Image can be null is user as no Avatar</param>
        </member>
        <member name="M:Rainbow.Administration.DeleteAvatarTheme(System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            Delete the avatar of the specified theme
            </summary>
            <param name="themeId"><see cref="T:System.String"/>Theme Id</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Administration.UpdateAvatarTheme(System.String,System.Byte[]@,System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            Update the avatar of the specified theme Id. Only JPG and PNG format are supported. The previous avatar is definitively lost if the update is performed with success.
            </summary>
            <param name="themeId"><see cref="T:System.String"/>Theme Id</param>
            <param name="data"><see cref="T:Byte[]"/>Byte array storing the new avatar</param>
            <param name="format"><see cref="T:System.String"/>'PNG' or 'JPG' - to know the format of the image store in the byte array</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Administration.GetOrganisations(System.String,System.Int32,System.Int32,System.Action{Rainbow.SdkResult{Rainbow.Model.OrganisationsResult}})">
            <summary>
            Get the list of organisations that the current admin can manage.
            
            **Format**
            
            - small: id, name
            
            - medium: id, name
            
            - full : All fields
            
            </summary>
            <param name="format"><see cref="T:System.String"/>the detail format of info to retrieve - can be one of the value defined in <see cref="T:Rainbow.Model.Contact.Details"/></param>
            <param name="offset"><see cref="T:System.Int32"/>To specify the position of the first user to retrieve. Cannot be greater than the total of users</param>
            <param name="limit"><see cref="T:System.Int32"/>The number of users to retrieve</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{OrganisationsResult}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.OrganisationsResult"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Administration.CreateOrganisation(Rainbow.Model.Organisation,System.Action{Rainbow.SdkResult{Rainbow.Model.Organisation}})">
            <summary>
            Create an organisation
            </summary>
            <param name="organisation"><see cref="T:Rainbow.Model.Organisation"/>The organisation to create</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Organisation}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.Organisation"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Administration.UpdateOrganisation(Rainbow.Model.Organisation,System.Action{Rainbow.SdkResult{Rainbow.Model.Organisation}})">
            <summary>
            Updatean organisation
            </summary>
            <param name="organisation"><see cref="T:Rainbow.Model.Organisation"/>The organisation to create</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Organisation}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.Organisation"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Administration.DeleteOrganisation(System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            Delete an organisation
            </summary>
            <param name="organisationId"><see cref="T:System.String"/>Organisation Id</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Administration.RemoveCompanyFromOrganisation(System.String,System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            Remove a company from an organisation
            </summary>
            <param name="organisationId"><see cref="T:System.String"/>Organisation Id</param>
            <param name="companyId"><see cref="T:System.String"/>Company Id</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Administration.AddCompanyToOrganisation(System.String,System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            Add a company to an organisation
            </summary>
            <param name="organisationId"><see cref="T:System.String"/>Organisation Id</param>
            <param name="companyId"><see cref="T:System.String"/>Company Id</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Administration.DeleteJoinCompanyLink(System.String,System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            To delete a JoinComapnyLink
            </summary>
            <param name="companyId"><see cref="T:System.String"/>Company Id</param>
            <param name="joinCompanyLinkId"><see cref="T:System.String"/>JoinCompanyLink Id</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Administration.GetJoinCompanyLinks(System.String,System.Int32,System.Int32,System.String,System.DateTime,System.DateTime,System.Action{Rainbow.SdkResult{Rainbow.Model.JoinCompanyLinksResult}})">
            <summary>
            Get the list of JoinCompanyLink .
            
            **Format**
            
            - small: Id, CompanyId, IsEnabled
            
            - medium: Id, CompanyId, IsEnabled, fromExpirationDate, MaxNumberUsers
            
            - full : All join company links fields
            
            </summary>
            <param name="format"><see cref="T:System.String"/>the detail format of info to retrieve - can be one of the value defined in <see cref="T:Rainbow.Model.Contact.Details"/></param>
            <param name="offset"><see cref="T:System.Int32"/>To specify the position of the first user to retrieve. Cannot be greater than the total of users</param>
            <param name="limit"><see cref="T:System.Int32"/>The number of users to retrieve</param>
            <param name="companyId"><see cref="T:System.String"/>Company Id</param>
            <param name="fromExpirationDate"><see cref="T:System.DateTime"/>List join company links expiring after the given date (optional - use DateTime.MinValue to not use))</param>
            <param name="toExpirationDate"><see cref="T:System.DateTime"/>List join company links expiring befor the given date (optional - use DateTime.MinValue to not use))</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{JoinCompanyLinksResult}}"/>Callback fired when the operation is done - JoinCompanyLinksResult object is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Administration.CreateJoinCompanyLink(System.String,System.Int32,System.DateTime,System.Action{Rainbow.SdkResult{Rainbow.Model.JoinCompanyLink}})">
            <summary>
            To create a join company link Id for his company.
            
            Join company link Id allows to create self-registered user
            </summary>
            <param name="companyId"><see cref="T:System.String"/>Company Id</param>
            <param name="maxUsers"><see cref="T:System.Int32"/>Max number of users (use 0 to have no limits)</param>
            <param name="expirationDate"><see cref="T:System.DateTime"/>Expiration date of the company link (optional - use DateTime.MinValue to not use))</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{JoinCompanyLink}}"/>Callback fired when the operation is done - JoinCompanyLink object is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Administration.CreateSelfRegisteredUser(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.Action{Rainbow.SdkResult{Rainbow.Model.Contact}})">
            <summary>
            Create a self-registered user using a valid CompanyInvitation id or CompanyLink id
            </summary>
            <param name="loginEmail"><see cref="T:System.String"/>Login (email address format) of the new account</param>
            <param name="password"><see cref="T:System.String"/>Passworrd of the new account</param>
            <param name="idType"><see cref="T:System.String"/>"CompanyInvitation" or "CompanyLink"</param>
            <param name="id"><see cref="T:System.String"/>A valid ID. Its type is determined by the "idType" parmeter value</param>
            <param name="firstName"><see cref="T:System.String"/>First name</param>
            <param name="lastName"><see cref="T:System.String"/>Last name</param>
            <param name="nickName"><see cref="T:System.String"/>Nick name</param>
            <param name="isInitialized"><see cref="T:System.Boolean"/>True to initialize the user </param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Administration.GetCompanies(System.String,System.Int32,System.Int32,System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.CompaniesResult}})">
            <summary>
            Get the list of companies that the current admin can manage.
            
            **Format**
            
            - small: id, name
            
            - medium: id, name, status, adminEmail, companyContactId, country, website, slogan, description, size, economicActivityClassification, lastAvatarUpdateDate, lastBannerUpdateDate, avatarShape, visibility
            
            - full (for superadmin, support, business_admin, bp_admin and bp_finance): All fields
            
            - full (for admin): All fields except BP fields(bpType, bpBusinessModel, bpApplicantNumber, bpCRDid, bpHasRightToSell, bpHasRightToConnect, bpIsContractAccepted, bpContractAcceptationInfo)
            
            </summary>
            <param name="format"><see cref="T:System.String"/>the detail format of info to retrieve - can be one of the value defined in <see cref="T:Rainbow.Model.Contact.Details"/></param>
            <param name="offset"><see cref="T:System.Int32"/>To specify the position of the first user to retrieve. Cannot be greater than the total of users</param>
            <param name="limit"><see cref="T:System.Int32"/>The number of users to retrieve</param>
            <param name="organisationId"><see cref="T:System.String"/>Filter result by organisation Id (can be null/empty)</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{CompaniesResult}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.CompaniesResult"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Administration.GetCompany(System.String,System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.Company}})">
            <summary>
            Get company info
            
            **Format**
            
            - small: id, name
            
            - medium: id, name, status, adminEmail, companyContactId, country, website, slogan, description, size, economicActivityClassification, lastAvatarUpdateDate, lastBannerUpdateDate, avatarShape, visibility
            
            - full (for superadmin, support, business_admin, bp_admin and bp_finance): All fields
            
            - full (for admin): All fields except BP fields(bpType, bpBusinessModel, bpApplicantNumber, bpCRDid, bpHasRightToSell, bpHasRightToConnect, bpIsContractAccepted, bpContractAcceptationInfo)
            
            </summary>
            <param name="companyId"><see cref="T:System.String"/>Cmpany Id</param>
            <param name="format"><see cref="T:System.String"/>the detail format of info to retrieve - can be one of the value defined in <see cref="T:Rainbow.Model.Contact.Details"/></param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Company}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.Company"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Administration.CreateCompany(System.String,System.String,System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.Company}})">
            <summary>
            To create a company
            </summary>
            <param name="name"><see cref="T:System.String"/>Company name</param>
            <param name="country"><see cref="T:System.String"/>Company country (ISO 3166-1 alpha3 format)</param>
            <param name="state"><see cref="T:System.String"/>When country is 'USA' or 'CAN', a state must be defined. Else it is not managed.</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Company}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.Company"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Administration.DeleteCompany(System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            To delete a company
            </summary>
            <param name="companyId"><see cref="T:System.String"/>Company Id</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Administration.UpdateCompany(Rainbow.Model.Company,System.Action{Rainbow.SdkResult{Rainbow.Model.Company}})">
            <summary>
            To update a company
            </summary>
            <param name="company"><see cref="T:Rainbow.Model.Company"/>Company info</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Contact}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.Company"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Administration.InviteUserInCompany(System.String,System.String,System.String,System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            Invite a new user to join a company in Rainbow
            </summary>
            <param name="email"><see cref="T:System.String"/>The email address of the contact to invite</param>
            <param name="companyId"><see cref="T:System.String"/>The id of the company where the user will be invited in</param>
            <param name="message"><see cref="T:System.String"/>Custom message that inviting user can add in email body (can be null)</param>
            <param name="language"><see cref="T:System.String"/>To set the language used in the invitation send. Language format is composed of locale using format ISO 639-1, with optionally the regional variation using ISO 3166‑1 alpha-2 (separated by hyphen). Default value: "en-US"</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Administration.UpdateCompanyCustomData(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            Add / Update custom data of the Company
            
            Max 10 keys allowed, Max key length 64, Max key value length 512 .
            </summary>
            <param name="companyId"><see cref="T:System.String"/>Bubble Id</param>
            <param name="customData"><see cref="T:System.Collections.Generic.Dictionary`2"/>Custom data</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Administration.DeleteCompanyCustomData(System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            Delete custom data of the bubble
            </summary>
            <param name="companyId"><see cref="T:System.String"/>Bubble Id</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Administration.SendMessage(System.String,System.String,System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            This API allows superadmin to send an instant message (IM) from a Rainbow user (who can be himself) to another Rainbow user.
            </summary>
            <param name="fromUserId"><see cref="T:System.String"/> From User Id</param>
            <param name="toUserId"><see cref="T:System.String"/> To User Id</param>
            <param name="message"><see cref="T:System.String"/> Message</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Administration.GetUsers(System.String,System.Int32,System.Int32,System.String,System.String,System.Nullable{System.Boolean},System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.ContactsResult}})">
            <summary>
            Get the list of users that the current admin can manage.
            
            **Format**
            
            - small: id, loginEmail, firstName, lastName, displayName, companyId, companyName, isTerminated
            
            - medium: all previous fields and lastUpdateDate, lastAvatarUpdateDate, guestMode
            
            - full: all fields
            
            </summary>
            <param name="format"><see cref="T:System.String"/>the detail format of info to retrieve - can be one of the value defined in <see cref="T:Rainbow.Model.Contact.Details"/></param>
            <param name="offset"><see cref="T:System.Int32"/>To specify the position of the first user to retrieve. Cannot be greater than the total of users</param>
            <param name="limit"><see cref="T:System.Int32"/>The number of users to retrieve</param>
            <param name="filterCompanyId"><see cref="T:System.String"/>(Can be null) to filter result by Company Id</param>
            <param name="filterSiteId"><see cref="T:System.String"/>(Can be null) to filter result by Site Id</param>
            <param name="filterIsTerminated"><see cref="T:System.Boolean"/>(Can be null) to filter result Terminated user or not</param>
            <param name="sortFieldName"><see cref="T:System.String"/>To sort result by the specified fieldName</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{ContactsResult}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.ContactsResult"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Administration.GetUser(System.String,System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.Contact}})">
            <summary>
            To get a Contact data according the format specified 
            
            **Format**
            
            - small: id, loginEmail, firstName, lastName, displayName, companyId, companyName, isTerminated
            
            - medium: all previous fields and lastUpdateDate, lastAvatarUpdateDate, guestMode
            
            - full: all fields        /// **Format**
            
            - small: id, loginEmail, firstName, lastName, displayName, companyId, companyName, isTerminated
            
            - medium: all previous fields and lastUpdateDate, lastAvatarUpdateDate, guestMode
            
            - full: all fields
            </summary>
            <param name="userId"><see cref="T:System.String"/>Id of the user</param>
            <param name="format"><see cref="T:System.String"/>the detail format of info to retrieve - can be one of the value defined in <see cref="T:Rainbow.Model.Contact.Details"/></param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Contact}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.Contact"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Administration.DeleteUser(System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            To delete a user
            </summary>
            <param name="userId"><see cref="T:System.String"/>Id of the user</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Administration.CreateUser(System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Action{Rainbow.SdkResult{Rainbow.Model.Contact}})">
            <summary>
            To create a user
            </summary>
            <param name="loginEmail"><see cref="T:System.String"/>user login email address</param>
            <param name="password"><see cref="T:System.String"/>user password</param>
            <param name="firstName"><see cref="T:System.String"/>user first name</param>
            <param name="lastName"><see cref="T:System.String"/>user last name</param>
            <param name="nickName"><see cref="T:System.String"/>user nick name</param>
            <param name="companyId"><see cref="T:System.String"/>user company id (or the current admin company if this parameter is null)</param>
            <param name="isInitialized"><see cref="T:System.Boolean"/>True to initialize the user </param>
            <param name="isCompanyAdmin"><see cref="T:System.Boolean"/>True to create the user with the right to manage the company</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Contact}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.Contact"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Administration.UpdatePassword(System.String,System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.Contact}})">
            <summary>
            To update user password
            </summary>
            <param name="userId"><see cref="T:System.String"/>User Id</param>
            <param name="newPassword"><see cref="T:System.String"/>new password</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Contact}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.Contact"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Administration.UpdateUser(Rainbow.Model.Contact,System.Action{Rainbow.SdkResult{Rainbow.Model.Contact}})">
            <summary>
            To update user
            </summary>
            <param name="contact"><see cref="T:Rainbow.Model.Contact"/>Contact info</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Contact}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.Contact"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Administration.AskAuthenticationTokenOnBehalf(System.String,System.String,System.Action{Rainbow.SdkResult{System.String}})">
            <summary>
            Ask for a authentication token on behalf a user. This allow to not use the secret key on client side.
            </summary>
            <param name="login"><see cref="T:System.String"/>Login</param>
            <param name="password"><see cref="T:System.String"/>Password</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{String}}"/>Callback fired when the operation is done - String (Token value) is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Administration.AddUserToOtherUserNetwork(System.String,System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
             Add a user to other user network. So both share their presences.
            </summary>
            <param name="userId"><see cref="T:System.String"/>User Id</param>
            <param name="otherUserId"><see cref="T:System.String"/>Other user Id</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Administration.GetPresencesFromUser(System.String,System.String,System.Action{Rainbow.SdkResult{System.Collections.Generic.Dictionary{System.String,Rainbow.Model.Presence}}})">
            <summary>
            Get presences list (by resource) of the specified user (need to specify id and jid of the user)
            </summary>
            <param name="userId"><see cref="T:System.String"/>User Id</param>
            <param name="userJid"><see cref="T:System.String"/>User Jid</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Dictionary{String, Presence}}}"/>Callback fired when the operation is done - <see cref="T:System.Collections.Generic.Dictionary{String, Presence}"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Administration.CreateGuestUser(System.String,System.String,System.Double,System.Action{Rainbow.SdkResult{Rainbow.Model.Contact}})">
            <summary>
            Create a new guest user in the same company as the requester admin.
            </summary>
            <param name="firstName"><see cref="T:System.String"/> First name</param>
            <param name="lastName"><see cref="T:System.String"/> Last name</param>
            <param name="timeToLive"><see cref="T:System.Double"/>Duration in second to wait before automatically starting a user deletion from the creation date. Once the timeToLive has been reached, the user won't be usable to use APIs anymore (error 401523). His account may then be deleted from the database at any moment.</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Contact}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.Contact"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Administration.CreateAnonymousGuestUser(System.Double,System.Action{Rainbow.SdkResult{Rainbow.Model.Contact}})">
            <summary>
            Create a new anonymous guest user in the same company as the requester admin. Anonymous guest user is user without name and firstname
            </summary>
            <param name="timeToLive"><see cref="T:System.Double"/>Duration in second to wait before automatically starting a user deletion from the creation date. Once the timeToLive has been reached, the user won't be usable to use APIs anymore (error 401523). His account may then be deleted from the database at any moment.</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Contact}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.Contact"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="T:Rainbow.Alerts">
            <summary>
            Alerts (notifications) service. 
            
            There are notions of:
            - AlertDevice: targets of alerts (can be of only on Company)
            - AlertFilter: to filter devices
            - AlertTemplate: to define the content of an alert using CAP structure (Common Alert Protocol) 
            
            </summary>
        </member>
        <member name="E:Rainbow.Alerts.AlertMessageReceived">
            <summary>
            The event raised when the current user received an alert message
            
             The <see cref="T:Rainbow.Events.AlertMessageEventArgs" /> object permits to know the alert message
            </summary>
        </member>
        <member name="M:Rainbow.Alerts.MarkAlertMessageAsRead(System.String,System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            Mark as Read the specified alert message 
            </summary>
            <param name="jid"><see cref="T:System.String"/>Jid of the sender</param>
            <param name="messageXmppId"><see cref="T:System.String"/>Xmpp Id of the alert message</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - Boolean is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Alerts.CreateDevice(Rainbow.Model.AlertDevice,System.Action{Rainbow.SdkResult{Rainbow.Model.AlertDevice}})">
            <summary>
            Create a device which can receive Alerts(notifications) from the server
            
            AlertDevice.Jid_im cannot be specified, it's always the Jid of the current user: Contacts.GetCurrentContactJid()
            
            if AlertDevice.Jid_resource cannot be specified, it's always the Jid_resource of the current user: Application.GetResourceId()
            
            if AlertDevice.Type is not specified, automatically it's set to "desktop"
            
            </summary>
            <param name="device"><see cref="T:Rainbow.Model.AlertDevice"/>AlertDevice to create. If AlertDevice.Ji</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{AlertDevice}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.AlertDevice"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Alerts.UpdateDevice(Rainbow.Model.AlertDevice,System.Action{Rainbow.SdkResult{Rainbow.Model.AlertDevice}})">
            <summary>
            Update a device which can receive Alerts(notifications) from the server
            
            AlertDevice.CompanyId cannot be specified, it's always the Compnay of the current user
            
            AlertDevice.Jid_im cannot be specified, it's always the Jid of the current user: Contacts.GetCurrentContactJid()
            
            AlertDevice.Jid_resource cannot be specified, it's always the Jid_resource of the current user: Application.GetResourceId()
            
            if AlertDevice.Type is not specified, automatically it's set to "desktop"
            
            </summary>
            <param name="device"><see cref="T:Rainbow.Model.AlertDevice"/>AlertDevice to create. If AlertDevice.Ji</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{AlertDevice}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.AlertDevice"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Alerts.DeleteDevice(System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            Delete a device using its Id
            </summary>
            <param name="deviceId"><see cref="T:System.String"/>ID of the device</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Alerts.GetDevice(System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.AlertDevice}})">
            <summary>
            Get an device by id
            </summary>
            <param name="deviceId"><see cref="T:System.String"/>Id of the AlertDevice</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{AlertDevice}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.AlertDevice"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Alerts.GetDevices(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Action{Rainbow.SdkResult{Rainbow.Model.AlertDevicesData}})">
            <summary>
            Get list of devices 
            </summary>
            <param name="companyId"><see cref="T:System.String"/>Allows to filter device list on the companyId provided in this option. (optional) If companyId is not provided, the devices linked to all the companies that the administrator manage are returned.</param>
            <param name="userId"><see cref="T:System.String"/>Allows to filter device list on the userId provided in this option. (optional) If the user has no admin rights, this filter is forced to the logged in user's id (i.e. the user can only list is own devices).</param>
            <param name="deviceName"><see cref="T:System.String"/>Allows to filter device list on the name provided in this option. (optional) The filtering is case insensitive and on partial name match: all devices containing the provided name value will be returned(whatever the position of the match). Ex: if filtering is done on My, devices with the following names are match the filter 'My device', 'My phone', 'This is my device', ...</param>
            <param name="type"><see cref="T:System.String"/>Allows to filter device list on the type provided in this option. (optional, exact match, case sensitive)</param>
            <param name="tag"><see cref="T:System.String"/>Allows to filter device list on the tag provided in this option. (optional, exact match, case sensitive)</param>
            <param name="offset"><see cref="T:System.Int32"/>Allow to specify the position of first device to retrieve (first device if not specified). Warning: if offset > total, no results are returned.</param>
            <param name="limit"><see cref="T:System.Int32"/>Allow to specify the number of devices to retrieve.</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{AlertDevicesData}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.AlertDevicesData"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Alerts.GetDevicesTags(System.String,System.Action{Rainbow.SdkResult{System.Collections.Generic.List{System.String}}})">
            <summary>
            Get list of all tags being assigned to devices of the compagnies managed by the administrator
            </summary>
            <param name="companyId"><see cref="T:System.String"/>Allows to list the tags set for devices associated to the companyIds provided in this option. (optional) If companyId is not provided, the tags being set for devices linked to all the companies that the administrator manage are returned.</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{List{String}}}"/>Callback fired when the operation is done - List of <see cref="T:System.String"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Alerts.CreateTemplate(Rainbow.Model.AlertTemplate,System.Action{Rainbow.SdkResult{Rainbow.Model.AlertTemplate}})">
            <summary>
            Create a template
            </summary>
            <param name="template"><see cref="T:Rainbow.Model.AlertTemplate"/>Template to create</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Alert}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.AlertTemplate"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Alerts.UpdateTemplate(Rainbow.Model.AlertTemplate,System.Action{Rainbow.SdkResult{Rainbow.Model.AlertTemplate}})">
            <summary>
            Update a template
            </summary>
            <param name="template"><see cref="T:Rainbow.Model.AlertTemplate"/>Template to update</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Alert}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.AlertTemplate"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Alerts.DeleteTemplate(System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            Delete a template
            </summary>
            <param name="templateId"><see cref="T:System.String"/>Id of the template</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Alert}}"/>Callback fired when the operation is done - True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Alerts.GetTemplate(System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.AlertTemplate}})">
            <summary>
            Get an template by id
            </summary>
            <param name="templateId"><see cref="T:System.String"/>Id of the template</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Alert}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.AlertTemplate"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Alerts.GetTemplates(System.String,System.Int32,System.Int32,System.Action{Rainbow.SdkResult{Rainbow.Model.AlertTemplatesData}})">
            <summary>
            Get templates
            </summary>
            <param name="companyId"><see cref="T:System.String"/>Id of the company (optional)</param>
            <param name="offset"><see cref="T:System.Int32"/> Offset to use to retrieve templates - if offset > total, no result is returned</param>
            <param name="limit"><see cref="T:System.Int32"/> Limit of templates to retrieve (100 by default)</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Alert}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.AlertTemplatesData"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Alerts.CreateFilter(Rainbow.Model.AlertFilter,System.Action{Rainbow.SdkResult{Rainbow.Model.AlertFilter}})">
            <summary>
            Create a filter
            </summary>
            <param name="filter"><see cref="T:Rainbow.Model.AlertFilter"/>Filter to create</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Alert}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.AlertFilter"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Alerts.UpdateFilter(Rainbow.Model.AlertFilter,System.Action{Rainbow.SdkResult{Rainbow.Model.AlertFilter}})">
            <summary>
            Update a filter
            </summary>
            <param name="filter"><see cref="T:Rainbow.Model.AlertFilter"/>Filter to update</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Alert}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.AlertFilter"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Alerts.DeleteFilter(System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            Delete a filter
            </summary>
            <param name="filterId"><see cref="T:System.String"/>Id of the filter</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Alert}}"/>Callback fired when the operation is done - True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Alerts.GetFilter(System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.AlertFilter}})">
            <summary>
            Get an filter by id
            </summary>
            <param name="filterId"><see cref="T:System.String"/>Id of the Filter</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Alert}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.AlertFilter"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Alerts.GetFilters(System.Int32,System.Int32,System.Action{Rainbow.SdkResult{Rainbow.Model.AlertFiltersData}})">
            <summary>
            Get filters
            </summary>
            <param name="offset"><see cref="T:System.Int32"/> Offset to use to retrieve filters - if offset > total, no result is returned</param>
            <param name="limit"><see cref="T:System.Int32"/> Limit of filters to retrieve (100 by default)</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Alert}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.AlertFiltersData"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Alerts.CreateAlert(Rainbow.Model.Alert,System.Action{Rainbow.SdkResult{Rainbow.Model.Alert}})">
            <summary>
            To create an alert. The alert will be sent using the StartDate of the Alert object (so it's possible to set it in future).
            
            The alert will be received by devices according the filter id and the company id used.
            
            The content of the alert is based on the template id.
            </summary>
            <param name="alert"><see cref="T:Rainbow.Model.Alert"/>Alert to send</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Alert}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.Alert"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Alerts.UpdateAlert(Rainbow.Model.Alert,System.Action{Rainbow.SdkResult{Rainbow.Model.Alert}})">
            <summary>
            To update an existing alert. The alert will be sent using the StartDate of the Alert object (so it's possible to set it in future).
            
            The alert will be received by devices according the filter id and the company id used.
            
            The content of the alert is based on the template id.
            </summary>
            <param name="alert"><see cref="T:Rainbow.Model.Alert"/>Alert to send</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Alert}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.Alert"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Alerts.DeleteAlert(System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            Delete an alert
            
            All the data related to this notification are deleted, including the reports
            </summary>
            <param name="alertId"><see cref="T:System.String"/>Id of the alert</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Alert}}"/>Callback fired when the operation is done - True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Alerts.GetAlert(System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.Alert}})">
            <summary>
            Get an alert by id
            </summary>
            <param name="alertId"><see cref="T:System.String"/>Id of the alert</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Alert}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.Alert"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Alerts.GetAlerts(System.Int32,System.Int32,System.Action{Rainbow.SdkResult{Rainbow.Model.AlertsData}})">
            <summary>
            Get alerts
            </summary>
            <param name="offset"><see cref="T:System.Int32"/> Offset to use to retrieve Alerts - if offset > total, no result is returned</param>
            <param name="limit"><see cref="T:System.Int32"/> Limit of Alerts to retrieve (100 by default)</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Alert}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.AlertsData"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Alerts.SendAlertFeedback(System.String,System.String,System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            To send a feedback from an alert. 
            
            To be used by end-user who has received the alert
            </summary>
            <param name="deviceId"><see cref="T:System.String"/>Id of the device</param>
            <param name="alertId"><see cref="T:System.String"/>Id of the alert</param>
            <param name="answerId"><see cref="T:System.String"/>Id of the answer</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Alert}}"/>Callback fired when the operation is done - True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Alerts.GetReportSummary(System.String,System.Action{Rainbow.SdkResult{System.Collections.Generic.List{Rainbow.Model.AlertReportSummary}}})">
            <summary>
            Allow to retrieve the list of summary reports of an alert (initial alert plus alerts update if any). 
            </summary>
            <param name="alertId"><see cref="T:System.String"/>Identifier of the Alert</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{AlertReportSummary}}"/>Callback fired when the operation is done - List of <see cref="T:Rainbow.Model.AlertReportSummary"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Alerts.GetReportDetails(System.String,System.Action{Rainbow.SdkResult{System.Collections.Generic.List{Rainbow.Model.AlertReportDetails}}})">
            <summary>
            Allow to retrieve the list of detail reports of an alert (initial alert plus alerts update if any). 
            </summary>
            <param name="alertId"><see cref="T:System.String"/>Identifier of the Alert</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{AlertReportDetails}}"/>Callback fired when the operation is done - List of <see cref="T:Rainbow.Model.AlertReportDetails"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Alerts.GetReportComplete(System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.FileDescriptor}})">
            <summary>
            To get a complete report of the alert.
            
            When report is under generation, a SdkError is returned with HttpStatusCode = 202 (accepted)
            
            When report is available the API return a fileDescriptor which must be used to retrieve the file - see **DownloadFileFromFileDescriptor** in <see cref="T:Rainbow.FileStorage"/> service.
            </summary>
            <param name="alertId"><see cref="T:System.String"/>Identifier of the Alert</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{AlertReportDetails}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.FileDescriptor"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="T:Rainbow.Application">
            <summary>
            Main object of the SDK. 
            
            It permits to connect/disconnect from the Rainbow server and manage current contact password.
            
            It's also the only way to get objects to manage <see cref="T:Rainbow.Administration"/>, <see cref="T:Rainbow.Alerts"/>, <see cref="T:Rainbow.Bubbles"/>, <see cref="T:Rainbow.CallsLog"/>, <see cref="T:Rainbow.Channels"/>, <see cref="T:Rainbow.Conferences"/>, <see cref="T:Rainbow.Contacts"/>, <see cref="T:Rainbow.Conversations"/>, <see cref="T:Rainbow.Favorites"/>, <see cref="T:Rainbow.FileStorage"/>, <see cref="T:Rainbow.Groups"/>, <see cref="T:Rainbow.InstantMessaging"/>, <see cref="T:Rainbow.Invitations"/>, <see cref="P:Rainbow.Application.Restrictions"/> and <see cref="T:Rainbow.Telephony"/>.
            </summary>
        </member>
        <member name="P:Rainbow.Application.Restrictions">
            <summary>
            Define <see cref="T:Rainbow.Restrictions"/> usage of this SDK
            </summary>
        </member>
        <member name="P:Rainbow.Application.LoggerPrefix">
            <summary>
            To get the **LoggerPrefix**. Can only be when this object object is created
            </summary>0
        </member>
        <member name="E:Rainbow.Application.ConnectionStateChanged">
            <summary>
            Event raised when the server connection is updated
            
            The <see cref="T:Rainbow.Events.ConnectionStateEventArgs" /> object permits to know the connection state
            
            The server can asked to stop the connection. Fields <see cref="P:Rainbow.Events.ConnectionStateEventArgs.Reason"/> and <see cref="P:Rainbow.Events.ConnectionStateEventArgs.Details"/> permits to have more information when this case occur.
            
            To have a list of potential reasons, check this [documentation](https://www.rfc-editor.org/rfc/rfc6120) chapter 4.9.3.
            
            </summary>
        </member>
        <member name="E:Rainbow.Application.InitializationPerformed">
            <summary>
            The event that is raised when common information are get from server once correctly connected to the server
            </summary>
        </member>
        <member name="E:Rainbow.Application.PasswordUpdated">
            <summary>
            The event that is raised when the current contact password has been updated
            </summary>
        </member>
        <member name="E:Rainbow.Application.DataCleared">
            <summary>
            Event raised when all data in the cache are cleared.
            </summary>
        </member>
        <member name="E:Rainbow.Application.AuthenticationSucceeded">
            <summary>
            Event raised when authentication with the server has succeeded
            </summary>
        </member>
        <member name="M:Rainbow.Application.#ctor(System.String,System.String,System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="iniFolderFullPathName"><see cref="T:System.String"/>(optional) Full folder path where the INI file is stored / used. If not specified the folder used will be Path.GetTempPath() + "Rainbow.CSharp.SDK"</param>
            <param name="iniFileName"><see cref="T:System.String"/>(optional) INI File name to use ("configuration.ini" by default)</param>
            <param name="loggerPrefix"><see cref="T:System.String"/>(optional) Prefix to use to log entries</param>
        </member>
        <member name="M:Rainbow.Application.SetSecurityProtocol(System.Net.SecurityProtocolType)">
            <summary>
            Allow to set Security protocol - see <see cref="P:System.Net.ServicePointManager.SecurityProtocol"/>
            
            This method is called in <see cref="T:Rainbow.Application"/> constructor with this default values:
            - In NETCOREAPP || NET5_0_OR_GREATER: ( SecurityProtocolType.Tls12 | SecurityProtocolType.Tls13) is used
            - In NETSTANDARD: SecurityProtocolType.Tls12 is used  (SecurityProtocolType.Tls13 is not available in this context)
            </summary>
            <param name="securityProtocolType"><see cref="T:System.Net.SecurityProtocolType"/> one or several values are accepted (optional). By default </param>
        </member>
        <member name="M:Rainbow.Application.GetIniPathFolder">
            <summary>
            Get Folder path where the INI file is stored
            </summary>
            <returns><see cref="T:System.String"/> - Folder path</returns>
        </member>
        <member name="M:Rainbow.Application.GetRestClient(System.String)">
            <summary>
            Get <see cref="T:RestSharp.RestClient"/> object
            
            WebproxyInfo specified in Application object is also available in this object
            
            </summary>
            <returns><see cref="T:RestSharp.RestClient"/> - RestClient object</returns>
        </member>
        <member name="M:Rainbow.Application.GetAdministration">
            <summary>
            Get <see cref="T:Rainbow.Administration"/> object
            </summary>
            <returns><see cref="T:Rainbow.Administration"/> - Administration object</returns>
        </member>
        <member name="M:Rainbow.Application.GetAlerts">
            <summary>
            Get <see cref="T:Rainbow.Alerts"/> object
            </summary>
            <returns><see cref="T:Rainbow.Alerts"/> - Alerts object</returns>
        </member>
        <member name="M:Rainbow.Application.GetBubbles">
            <summary>
            Get <see cref="T:Rainbow.Bubbles"/> object
            </summary>
            <returns><see cref="T:Rainbow.Bubbles"/> - Bubbles object</returns>
        </member>
        <member name="M:Rainbow.Application.GetConferences">
            <summary>
            Get <see cref="T:Rainbow.Conferences"/> object
            </summary>
            <returns><see cref="T:Rainbow.Conferences"/> - Conferences object</returns>
        </member>
        <member name="M:Rainbow.Application.GetCallsLog">
            <summary>
            Get <see cref="T:Rainbow.CallsLog"/> object
            </summary>
            <returns><see cref="T:Rainbow.CallsLog"/> - CallsLog object</returns>
        </member>
        <member name="M:Rainbow.Application.GetChannels">
            <summary>
            Get <see cref="T:Rainbow.Channels"/> object
            </summary>
            <returns><see cref="T:Rainbow.Channels"/> - Channels object</returns>
        </member>
        <member name="M:Rainbow.Application.GetContacts">
            <summary>
            Get <see cref="T:Rainbow.Contacts"/> object
            </summary>
            <returns><see cref="T:Rainbow.Contacts"/> - Contacts object</returns>
        </member>
        <member name="M:Rainbow.Application.GetConversations">
            <summary>
            Get <see cref="T:Rainbow.Conversations"/> object
            </summary>
            <returns><see cref="T:Rainbow.Conversations"/> - Conversations object</returns>
        </member>
        <member name="M:Rainbow.Application.GetFavorites">
            <summary>
            Get <see cref="T:Rainbow.Favorites"/> object
            </summary>
            <returns><see cref="T:Rainbow.Favorites"/> - Favorites object</returns>
        </member>
        <member name="M:Rainbow.Application.GetFileStorage">
            <summary>
            Get <see cref="T:Rainbow.FileStorage"/> object
            </summary>
            <returns><see cref="T:Rainbow.FileStorage"/> - FileStorage object</returns>
        </member>
        <member name="M:Rainbow.Application.GetGroups">
            <summary>
            Get <see cref="T:Rainbow.Groups"/> object
            </summary>
            <returns><see cref="T:Rainbow.Groups"/> - Groups object</returns>
        </member>
        <member name="M:Rainbow.Application.GetIniFileParser">
            <summary>
            Get <see cref="T:Rainbow.IniFileParser"/> object
            </summary>
            <returns><see cref="T:Rainbow.IniFileParser"/> - IniFileParser object</returns>
        </member>
        <member name="M:Rainbow.Application.GetInstantMessaging">
            <summary>
            Get <see cref="T:Rainbow.InstantMessaging"/> object
            </summary>
            <returns><see cref="T:Rainbow.InstantMessaging"/> - InstantMessaging object</returns>
        </member>
        <member name="M:Rainbow.Application.GetInvitations">
            <summary>
            Get <see cref="T:Rainbow.Invitations"/> object
            </summary>
            <returns><see cref="T:Rainbow.Invitations"/> - Invitations object</returns>
        </member>
        <member name="M:Rainbow.Application.GetS2SEventPipe">
            <summary>
            Get <see cref="T:Rainbow.S2SEventPipe"/> object
            
            Useful only in S2S context - cf. **EventMode** property in <see cref="T:Rainbow.Restrictions"/>
            </summary>
            <returns><see cref="T:Rainbow.S2SEventPipe"/> - S2SEventPipe object</returns>
        </member>
        <member name="M:Rainbow.Application.GetStreamManagement">
            <summary>
            Get <see cref="T:Rainbow.StreamManagement"/> object
            
            Useful only in XMMP context (cf. **EventMode** property in <see cref="T:Rainbow.Restrictions"/>) and if StreamManegement is used (cf. **StreamManegement** property in <see cref="T:Rainbow.Restrictions"/>)
            
            </summary>
            <returns><see cref="T:Rainbow.StreamManagement"/> - S2SEventPipe object</returns>
        </member>
        <member name="M:Rainbow.Application.GetTelephony">
            <summary>
            Get <see cref="T:Rainbow.Telephony"/> object
            </summary>
            <returns><see cref="T:Rainbow.Telephony"/> - Telephony object</returns>
        </member>
        <member name="M:Rainbow.Application.GetJingle">
            <summary>
            Get Jingle object
            </summary>
            <returns><see cref="T:Rainbow.Jingle"/> - Jingle object</returns>
        </member>
        <member name="M:Rainbow.Application.GetAutoReconnection">
            <summary>
            Get AutoReconnection service
            </summary>
            <returns><see cref="T:Rainbow.AutoReconnection"/> - AutoReconnection object</returns>
        </member>
        <member name="M:Rainbow.Application.SetDefaultPresenceLevel(Rainbow.Model.Presence)">
            <summary>
            To set default presence of the current contact once connected to the server
            </summary>
            <param name="presence"><see cref="T:Rainbow.Model.Presence"/>The presence to use by default.</param>
        </member>
        <member name="M:Rainbow.Application.GetDefaultPresenceLevel">
            <summary>
            To get default presence of the current contact used once connected to the server
            </summary>
            <returns><see cref="T:Rainbow.Model.Presence"/> - Presence level used by default</returns>
        </member>
        <member name="M:Rainbow.Application.SetTimeout(System.Int32)">
            <summary>
            To set timeout value when accessing to the server using REST API (in ms)
            </summary>
            <param name="value"><see cref="T:System.Int32"/>Timeout value (in  ms)</param>
        </member>
        <member name="M:Rainbow.Application.GetTimeout">
            <summary>
            To get timeout value when accessing to the server using REST API (in ms)
            </summary>
            <returns><see cref="T:System.Int32"/>Timeout value (in  ms)</returns>
        </member>
        <member name="M:Rainbow.Application.SetWebProxyInfo(System.String,System.String,System.String)">
            <summary>
            Sets the HTTP proxy server URL to connect through, and if necessary,
            a pair of **username** and **password** for
            the proxy server authentication (Basic/Digest).
            </summary>
            <param name="url"><see cref="T:System.String"/>A <see cref="T:System.String"/> that represents the HTTP proxy server URL to connect through. The syntax must be http://host[:port]. If **url** is null or empty, the url and credentials for the proxy will be initialized, and the WebSocket will not use the proxy to connect through. </param>
            <param name="userName"><see cref="T:System.String"/>A <see cref="T:System.String"/> that represents the user name used to authenticate. If **userName** is null or empty, the credentials for the proxy will be initialized and not be sent. </param>
            <param name="password"><see cref="T:System.String"/>A <see cref="T:System.String"/> that represents the password for **userName** used to authenticate.</param>
        </member>
        <member name="M:Rainbow.Application.SetApplicationInfo(System.String,System.String)">
            <summary>
            To set application Id and the application secret key
            </summary>
            <param name="applicationId"><see cref="T:System.String"/>Application ID used by the SDK</param>
            <param name="applicationSecretKey"><see cref="T:System.String"/>Application secret key used by the SDK</param>
        </member>
        <member name="M:Rainbow.Application.SetHostInfo(System.String,System.String,System.Int32)">
            <summary>
            To set connection details - the host name, the XMPP domain. 
            </summary>
            <param name="host"><see cref="T:System.String"/>To set the host name</param>
            <param name="protocol"><see cref="T:System.String"/>To set the protocol - HTTPS (by default) or HTTP are the only possible value</param>
            <param name="port"><see cref="T:System.Int32"/>To set the port used - 443 by default</param>
        </member>
        <member name="M:Rainbow.Application.SetVersion(System.String)">
            <summary>
            To set the version of the API used on the server. 
            </summary>
            <param name="version"><see cref="T:System.String"/>The API version to use - 'v1.0' by default</param>
        </member>
        <member name="M:Rainbow.Application.SetS2SCallbackUrl(System.String)">
            <summary>
            To specify to callback URL used in S2S context only
            
            When used, **EventMode** property from <see cref="T:Rainbow.Restrictions"/> object is automatically set to **S2S** (<see cref="T:Rainbow.Restrictions.SDKEventMode"/>)
            </summary>
            <param name="callbackUrl"><see cref="T:System.String"/>The callback URL to set - for example: https://thirdPartyApp.com/api </param>
        </member>
        <member name="M:Rainbow.Application.SetBaseUri(System.String)">
            <summary>
            To set the base URL of the API used on the server
            </summary>
            <param name="baseUri"><see cref="T:System.String"/>The base URI to use - 'api/rainbow' by default</param>
        </member>
        <member name="M:Rainbow.Application.GetDomain">
            <summary>
            Get the Xmpp domain used once the contact is fully connected
            </summary>
            <returns><see cref="T:System.String"/> - The XMPP domain or an empty string if we are not connected</returns>
        </member>
        <member name="M:Rainbow.Application.GetHostName">
            <summary>
            Get host name used in login step
            </summary>
            <returns><see cref="T:System.String"/>Host name</returns>
        </member>
        <member name="M:Rainbow.Application.GetResourceId">
            <summary>
            To get the resource Id used in XMPP / S2S message
            </summary>
            <returns><see cref="T:System.String"/> - Resource Id</returns>
        </member>
        <member name="M:Rainbow.Application.SetResourceId(System.String)">
            <summary>
            To set the end part of the resource Id used in XMPP / S2S message.
            
            Only letters [a-z or A-Z] and digits are expected with at least 16 characters
            
            The start part is specific and can be dependant of the restrictions used - for example if Restrictions.MobileApplication or Restrictions.EventMode are used.
            </summary>
            <returns><see cref="T:SdkResult{String}>"/> - The full resource Id used is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</returns>
        </member>
        <member name="M:Rainbow.Application.GetUserLoginFromCache">
            <summary>
            To get the user login saved in cache
            </summary>
            <returns><see cref="T:System.String"/> - The user login or null if not available</returns>
        </member>
        <member name="M:Rainbow.Application.GetUserPasswordFromCache">
            <summary>
            To get the user password saved in cache
            </summary>
            <returns><see cref="T:System.String"/> - The user password or null if not available</returns>
        </member>
        <member name="M:Rainbow.Application.GetUserTokenFromCache">
            <summary>
            To get the user token saved in cache used for authentication purpose with the server.
            
            This token is available only if a successful login has been performed previously on the server.
            </summary>
            <returns><see cref="T:System.String"/> - The user token or null if not available</returns>
        </member>
        <member name="M:Rainbow.Application.GetApplicationTokenFromCache">
            <summary>
            To get the application token saved in cache used for authentication purpose with the server.
            
            This token is available only if a successful login has been performed previously on the server.
            </summary>
            <returns><see cref="T:Rainbow.Model.ApplicationToken"/> - The application token or null if not available</returns>
        </member>
        <member name="M:Rainbow.Application.ConnectionState">
            <summary>
            To know the connection state
            </summary>
            <returns><see cref="T:Rainbow.Model.ConnectionState"/> - The current state of the connection</returns>
        </member>
        <member name="M:Rainbow.Application.IsConnected">
            <summary>
            To know if the current contact is connected - <see cref="T:Rainbow.Model.ConnectionState"/> is equal to **Connected**
            </summary>
            <returns><see cref="T:System.Boolean"/> - True if connected</returns>
        </member>
        <member name="M:Rainbow.Application.IsInitialized">
            <summary>
            To know if the current contact is connected and basic information has been obtained from server
            </summary>
            <returns><see cref="T:System.Boolean"/> - True if initialized</returns>
        </member>
        <member name="M:Rainbow.Application.LoginWithToken(System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            To log on the server using the specified token. The token is then renew. The Event pipe is automatically created / used.
            
            If this method failed, it's necessary to login again using a valid login / password or SSO method
            
            This token is saved in cache when a previous login has been performed successfully - see <see cref="M:Rainbow.Application.GetUserTokenFromCache"/> method
            
            Once the log on operation is done successfully, it means that the token is valid and correct. But it's still necessary to wait event <see cref="E:Rainbow.Application.ConnectionStateChanged"/> before to ask anything to the server
            </summary>
            <param name="token"><see cref="T:System.String"/>The token to use</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - <see cref="T:System.Boolean"/> object is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Application.LoginWithToken(System.String,System.Boolean,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            To log on the server using the specified token. The token is then renew. The Event pipe is automatically created / used only if "autoLoginToEventPipe" is set to true
            
            If this method failed, it's necessary to login again using a valid login / password or SSO method
            
            This token is saved in cache when a previous login has been performed successfully - see <see cref="M:Rainbow.Application.GetUserTokenFromCache"/> method
            
            Once the log on operation is done successfully, it means that the token is valid and correct. But it's still necessary to wait event <see cref="E:Rainbow.Application.ConnectionStateChanged"/> before to ask anything to the server
            </summary>
            <param name="token"><see cref="T:System.String"/>The token to use</param>
            <param name="autoLoginToEventPipe"><see cref="T:System.Boolean"/>To know if the event pipe connection must be done automatically once the user is logged</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - <see cref="T:System.Boolean"/> object is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Application.LoginWithTokenWithoutEventPipe(System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            To log on the server using the specified token in advanced scenario only since the connection to the event pipe is not performed automatically but must be done manually. 
            
            The token is renew on success. If this method failed, it's necessary to login again using a valid login / password
            
            The token is saved in cache when a previous login has been performed successfully - see <see cref="M:Rainbow.Application.GetUserTokenFromCache"/> method
            
            Once the log on operation is done successfully, it means that the token is valid and correct. But it's still necessary to use <see cref="M:Rainbow.Application.LoginToEventPipe"/> method to connect to the event pipe and then wait event <see cref="E:Rainbow.Application.ConnectionStateChanged"/> before to ask anything to the server since the connection to the event pipe is not performed yet.
            
            It's possible to use this method only if <see cref="F:Rainbow.Restrictions.SDKEventMode.XMPP"/> is used.
            </summary>
            <param name="token"><see cref="T:System.String"/>The token to use</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - <see cref="T:System.Boolean"/> object is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Application.Login(System.String,System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            To log on the server using the specified login and password.
            
            Once this log on operation is done successfully it means that the credentials are corrects. (callback provided is raised)
            
            But it's still necessary to wait event <see cref="E:Rainbow.Application.ConnectionStateChanged"/> before to ask anything to the server since the connection to the event pipe is not performed yet.
            </summary>
            <param name="login"><see cref="T:System.String"/>The login of the user</param>
            <param name="password"><see cref="T:System.String"/>The password of the user - Should be greater or equal to 12 characters</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - <see cref="T:System.Boolean"/> object is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Application.LoginWithoutEventPipe(System.String,System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            To log on the server using the specified login and password in advanced scenario only since the connection to the event pipe is not performed automatically but must be done manually.
            
            Once this log on operation is done successfully it means that the credentials are corrects. (callback provided is raised).
            
            It's necessary to use <see cref="M:Rainbow.Application.LoginToEventPipe"/> method to connect to the event pipe and then wait event <see cref="E:Rainbow.Application.ConnectionStateChanged"/> before to ask anything to the server since the connection to the event pipe is not performed yet.
            
            It's possible to use this method only if <see cref="F:Rainbow.Restrictions.SDKEventMode.XMPP"/> is used.
            
            </summary>
            <param name="login"><see cref="T:System.String"/>The login of the user</param>
            <param name="password"><see cref="T:System.String"/>The password of the user - Should be greater or equal to 12 characters</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - <see cref="T:System.Boolean"/> object is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Application.LoginToEventPipe">
            <summary>
            To log to the event pipe after successfuly log on the server using <see cref="M:Rainbow.Application.LoginWithoutEventPipe(System.String,System.String,System.Action{Rainbow.SdkResult{System.Boolean}})"/> or <see cref="M:Rainbow.Application.LoginWithTokenWithoutEventPipe(System.String,System.Action{Rainbow.SdkResult{System.Boolean}})"/> .
            
            </summary>
            <returns><see cref="T:System.Boolean"/> - True is the aoperation can be performed</returns>
        </member>
        <member name="M:Rainbow.Application.Logout(System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            To logout from the server
            </summary>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - <see cref="T:System.Boolean"/> object is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Application.RenewToken(System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            Renw the current token
            </summary>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - <see cref="T:System.Boolean"/> object is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Application.AskResetCodeToChangePassword(System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            If the contact doesn't remember it's password, ask to received a code by email to change it
            
            Language format is composed of locale using format ISO 639-1, with optionally the regional variation using ISO 3166-1 alpha-2 (separated by hyphen).
            Locale part is in lowercase, regional part is in uppercase.
            
            Examples: en, en-US, fr, fr-FR, fr-CA, es-ES, es-MX, ...
            
            Default value:'en-US'.
            
            More information about the format can be found on this link: https://en.wikipedia.org/wiki/Language_localisation#Language_tags_and_codes
            </summary>
            <param name="language"><see cref="T:System.String"/>The language ID to use to format email</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - <see cref="T:System.Boolean"/> object is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Application.ResetPasswordUsingCode(System.String,System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            To change current contact password using a code (6 digits) received by email
            </summary>
            <param name="code"><see cref="T:System.String"/>The code (6 digits) received by email- see <see cref="M:Rainbow.Application.AskResetCodeToChangePassword(System.String,System.Action{Rainbow.SdkResult{System.Boolean}})"/></param>
            <param name="newPassword"><see cref="T:System.String"/>The new password - Should be greater or equal to 12 characters</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - <see cref="T:System.Boolean"/> object is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Application.UpdatePassword(System.String,System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            To update current contact password using current one and a new one
            </summary>
            <param name="oldPassword"><see cref="T:System.String"/>Old password</param>
            <param name="newPassword"><see cref="T:System.String"/>New password - Should be greater or equal to 12 characters</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - <see cref="T:System.Boolean"/> object is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Application.IsCapabilityAvailable(System.String)">
            <summary>
            To know if the current user has the specified capability available.
            
            </summary>
            <param name="capability"><see cref="T:System.String"/>The capability to check - Check <see cref="T:Rainbow.Model.Contact.Capability"/> to know the list of capabilities available</param>
            <returns><see cref="T:System.Boolean"/> - True if the capability is available. False if the capability is not available or unknown.</returns>
        </member>
        <member name="M:Rainbow.Application.GetUserSubscriptions(System.Action{Rainbow.SdkResult{System.Collections.Generic.List{Rainbow.Model.Subscription}}})">
            <summary>
            To know the list of subscriptions of the current user
            </summary>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{List{Subscription}}}"/>Callback fired when the operation is done - <see cref="T:System.Collections.Generic.List`1"/> object is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Application.GetAuthenticationSSOUrls(System.String,System.Action{Rainbow.SdkResult{System.Collections.Generic.List{Rainbow.Model.AuthenticationSSOUrl}}})">
            <summary>
            This API allows to know URLs which can be used to perform SSO (Signle Sign On) using SAML (Security Assertion Markup Language) or OIDC (OpenID Connect) 
            </summary>
            <param name="login"><see cref="T:System.String"/>Rainbow user unique identifier: typically his login email</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{List{AuthenticationUrl}}}"/>Callback fired when the operation is done - List of <see cref="T:Rainbow.Model.AuthenticationSSOUrl"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Application.GetAvatarTheme(System.String,System.Int32,System.Action{Rainbow.SdkResult{System.Byte[]}})">
            <summary>
            Get the avatar of the specified theme Id from the server with the specified size.
            </summary>
            <param name="themeId"><see cref="T:System.String"/>Theme Id</param>
            <param name="size"><see cref="T:System.Int32"/>Specify avatar size in pixels (square size x size). Default value: 80. Max Value: 512. The image is not resized if the expected size is greater than the image stored on server side.</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{byte[]}}"/>Callback fired when the operation is done - <see cref="T:byte[]"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs. Image can be null is user as no Avatar</param>
        </member>
        <member name="M:Rainbow.Application.GetUserTheme(System.Action{Rainbow.SdkResult{Rainbow.Model.Theme}})">
            <summary>
            Get the user theme: previously selected by the current user or specified by the company/administrator.
            </summary>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Theme}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.Theme"/> object is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Application.GetAvailableThemes(System.Int32,System.Int32,System.Action{Rainbow.SdkResult{Rainbow.Model.ThemesData}})">
            <summary>
            Get available theme. If the current user company has not allowed it, no theme will be returned.
            </summary>
            <param name="limit"><see cref="T:System.Int32"/> Limit of Themes to retrieve (100 by default)</param>
            <param name="offset"><see cref="T:System.Int32"/> Offset to use to retrieve Themes - if offset > total, no result is returned</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{ThemesData}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.ThemesData"/> object is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Application.SelectTheme(System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            Select a theme. The theme must be visible to user and user must be allowed to select a theme, otherwise an error is returned.
            </summary>
            <param name="themeId"><see cref="T:System.String"/>Id of the theme to select</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Application.UnselectTheme(System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            Unselect the current theme. Once the theme is unselected, user will use his company's selectedTheme if one is set, the default Rainbow theme otherwise.
            </summary>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="T:Rainbow.AutoReconnection">
            <summary>
            This service try to automatically reconnect to the server in case of disconnection.
            
            This service is enabled only if **AutoReconnection** property in <see cref="T:Rainbow.Restrictions"/> is set to True.
            
            This service (if enabled) is started only after a first successful authentication (see <see cref="E:Rainbow.Application.AuthenticationSucceeded"/> event).
            
            This service is stopped / cancelled:
             - if <see cref="M:Rainbow.AutoReconnection.Cancel"/> method is used
             - if the current user uses <see cref="M:Rainbow.Application.Logout(System.Action{Rainbow.SdkResult{System.Boolean}})"/> method 
             - if the maximum number of attempts is reached.
             - if the user token has expired and <see cref="P:Rainbow.AutoReconnection.UsePreviousLoginPwd"/> is set to False.
             - if an attempt (using token or user credentails) is not accepted by the server: inappropriate token or if this user has no more the right to access to the server (account disabled or deleted for example)
             
            When Stopped / Cancelled, the event <see cref="E:Rainbow.AutoReconnection.Cancelled"/> is raised.
            
            An attempt is performed by this service only if at least one network interface is up (enabled and with an ip address).
            
            Once connected again, the number of attempt is set to zero.
            
            If the maximum number of attempt is reached, the event <see cref="E:Rainbow.AutoReconnection.MaxNbAttemptsReached"/> is also raised.
            
            Each attempt uses the user token to connect to the server if it's not expired. This service (if enabled) ensure to renew the current token on its half-life. 
            
            If it's no more possible to renew it, the event <see cref="E:Rainbow.AutoReconnection.TokenExpired"/> is raised and the connection to the server is automatically stopped. 
            
            In this case, if <see cref="P:Rainbow.AutoReconnection.UsePreviousLoginPwd"/> is set to False the service is also stopped. If it's set to True, the service try to use previous credentials to connect to the server.
            
            Default values: 
            - <see cref="P:Rainbow.AutoReconnection.MaxNbAttempts"/> = 50
            - <see cref="P:Rainbow.AutoReconnection.DelayBetweenAttempts"/> = { 200, 200, 400, 800,  1600, 2000, 2000, ... } (not necessary to specify all values, last one is used for all others attempts
            - <see cref="P:Rainbow.AutoReconnection.AvoidNetworkInterfaceKeywordsInDescription"/> = { "virtual" };
            </summary>
        </member>
        <member name="E:Rainbow.AutoReconnection.MaxNbAttemptsReached">
            <summary>
            Event raised once the maximum number of attempts is reached. This service is stopped too so the event <see cref="E:Rainbow.AutoReconnection.Cancelled"/> is also raised.
            
            It's up to the application using the SDK to continue its own process.
            
            This service will be started again after a successful authentication (see <see cref="E:Rainbow.Application.AuthenticationSucceeded"/> event).
            </summary>
        </member>
        <member name="E:Rainbow.AutoReconnection.Cancelled">
            <summary>
            Event raised when the service is stopped / cancelled
             - if <see cref="M:Rainbow.AutoReconnection.Cancel"/> method is used (=> Value set as "Cancelled")
             - if the current user uses <see cref="M:Rainbow.Application.Logout(System.Action{Rainbow.SdkResult{System.Boolean}})"/> method (=> Value set as "Logout") 
             - if the maximum number of attempts is reached. (=> Value set as "MaxNbAttemptsReached")
             - if the user token has expired and <see cref="P:Rainbow.AutoReconnection.UsePreviousLoginPwd"/> is set to False. (=> Value set as "TokenExpired")
             - if an attempt (using token or user credentails) is not accepted by the server: inappropriate token or if this user has no more the right to access to the server (account disabled or deleted for example) (=> Value set as "InvalidCredentials")
             - if the server asked to stop the connection (=> Value set as "DisconnectedByServer") 
             
            To know the Value of the cancellation check <see cref="P:Rainbow.Events.StringEventArgs.Value"/>
            
            Ir the server asked to stop the connection, you can have more information using <see cref="M:Rainbow.AutoReconnection.GetServerDisconnectionInformation"/>
            
            </summary>
        </member>
        <member name="E:Rainbow.AutoReconnection.OneNetworkInterfaceOperational">
            <summary>
            Event raised when one network interface is up (enabled and with an IP Address) or not.
            
            The boolean value in the event can permit to know if at least one interface is up (true) or not (false).
            
            In some cases, this event can be raised some seconds before <see cref="E:Rainbow.Application.ConnectionStateChanged"/> event when there is no more network interface available.
            
            </summary>
        </member>
        <member name="E:Rainbow.AutoReconnection.TokenExpired">
            <summary>
            Event raised when the token cannot be renew anymore. The connection to the server is also automatically stopped.
            
            If <see cref="P:Rainbow.AutoReconnection.UsePreviousLoginPwd"/> is set to False, the service is stopped.
            
            If set to True, the service try to connect to the server using previous credentials.
            </summary>
        </member>
        <member name="E:Rainbow.AutoReconnection.Started">
            <summary>
            Event raised when this service is started(must be enabled first): only after a first successful authentication (see <see cref="E:Rainbow.Application.AuthenticationSucceeded"/> event).
            </summary>
        </member>
        <member name="P:Rainbow.AutoReconnection.IsStarted">
            <summary>
            To know if the service is started
            </summary>
        </member>
        <member name="P:Rainbow.AutoReconnection.UsePreviousLoginPwd">
            <summary>
            To know if the previous login/pwd must be used if the token can no more be used in the login process
            
            Default value: True
            </summary>
        </member>
        <member name="P:Rainbow.AutoReconnection.MaxNbAttempts">
            <summary>
            Maximum number of attempts performed by this service to reconnect to the server.
            
            Default value: 50
            </summary>
        </member>
        <member name="P:Rainbow.AutoReconnection.DelayBetweenAttempts">
            <summary>
            Delay in milliseconds to use beetween each attempt. A new attempt is performed ONLY when at least one network interface is operational.
            
            Default values: { 200, 200, 400, 800,  1600, 2000, 2000, ... } (not necessary to specify all values, last one is used for all others attempts.
            </summary>
        </member>
        <member name="P:Rainbow.AutoReconnection.CurrentNbAttempts">
            <summary>
            To know the current attempts number. It's automatically resetted once the connections is well performed.
            </summary>
        </member>
        <member name="P:Rainbow.AutoReconnection.AvoidNetworkInterfaceKeywordsInDescription">
            <summary>
            When checking network interfaces, avoid some of them using their description and the specified keywords (lower case is always used for comparison)
            
            It permits to avoid, for example virtual network interfaces, whcih are always up but which don't allow to internet connection.
            
            Default value: { "virtual" }
            </summary>
        </member>
        <member name="M:Rainbow.AutoReconnection.GetServerDisconnectionInformation">
            <summary>
            To get reason, details and criticity of the disconnection if it's the server which asked it
            </summary>
            <returns>(<see cref="T:System.String"/>Reason, <see cref="T:System.String"/>Details, <see cref="T:System.String"/>Criticity) - Reason, Details and Criticity of the disconnection if it's the server which asked it</returns>
        </member>
        <member name="M:Rainbow.AutoReconnection.Cancel">
            <summary>
            To cancel / stop this service. It will restart automatically if this service is still enabled (**AutoReconnection** property in <see cref="T:Rainbow.Restrictions"/> is set to True) and after a first successful authentication (see <see cref="E:Rainbow.Application.AuthenticationSucceeded"/> event).
            </summary>
        </member>
        <member name="M:Rainbow.AutoReconnection.IsOneNetWorkUp">
            <summary>
            Check Network interfaces to know if at least one network interface is up.
            
            **AvoidNetworkInterfaceKeywordsInDescription** property is used to avoid some network interface using their description.
            
            </summary>
            <returns><see cref="T:System.Boolean"/> - True if one network interface is up</returns>
        </member>
        <member name="M:Rainbow.AutoReconnection.LoginUsingPreviousCredentials">
            <summary>
            Try to log on the server using previous credentials
            - If still valid, uses the user token stored in INI file (encrypted)
            - If attempt with token failed (i.e not accepted by the server, token is not valid), and if **UsePreviousLoginPwd** property is set to true, uses Login/Pwd stored in INI file (encrypted)
            - If the use of Login/Pwd event failed too, <see cref="M:Rainbow.AutoReconnection.Cancel"/> event is raised.
            </summary>
            <returns> - True is previous Token is valid or if Previous Login/Pwd are not empty. In this case, <see cref="M:Rainbow.AutoReconnection.Cancel"/> event is used to know if the login process cannot be performed.</returns>
        </member>
        <member name="T:Rainbow.BasicLoggerFactory">
            <summary>
            A basic logger factory that raise events each time a log entry is added.
            
            It's not possible to add another provider to this factory - an exception will be raised
            </summary>
        </member>
        <member name="T:Rainbow.BasicLoggerFactory.LogEntry">
            <summary>
            Delegate used each time a log entry is added: (<see cref="T:System.DateTime"/> dateTime, <see cref="T:System.String"/> categoryName, <see cref="T:Microsoft.Extensions.Logging.LogLevel"/> logLevel, <see cref="T:System.Int32"/> eventId, <see cref="T:System.String"/> message)
            </summary>
        </member>
        <member name="E:Rainbow.BasicLoggerFactory.OnLogEntry">
            <summary>
            Event raised each time a log entry is added using <see cref="T:Rainbow.BasicLoggerFactory.LogEntry"/> delegate
            </summary>
        </member>
        <member name="M:Rainbow.BasicLoggerFactory.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Rainbow.BasicLoggerFactory.Dispose">
            <summary>
            To dispose object
            </summary>
        </member>
        <member name="M:Rainbow.BasicLoggerFactory.CreateLogger(System.String)">
            <summary>
             To create / get logger using a category name
            </summary>
            <returns><see cref="T:Microsoft.Extensions.Logging.ILogger"/> - ILogger interface</returns>
        </member>
        <member name="M:Rainbow.BasicLoggerFactory.AddProvider(Microsoft.Extensions.Logging.ILoggerProvider)">
            <summary>
            It's not allowed to add another provider - an excaption will be raised
            </summary>
            <param name="provider"><see cref="T:Microsoft.Extensions.Logging.ILoggerProvider"/>Provider to add</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Rainbow.Bubbles">
            <summary>
            This object is available only using <see cref="M:Rainbow.Application.GetBubbles"/> from <see cref="T:Rainbow.Application"/> object.
            
            Bubbles class is used to get / set / update info about any <see cref="T:Rainbow.Model.Bubble" />.
            
            A Bubble permit to send / receive instant messaging with a specific group of persons
            
            A cache is used to maintain the list of availalbe  bubbles for the connected contact
            
            To know if a bubble has been created or removed its necessary to use events <see cref="E:Rainbow.Conversations.ConversationCreated"/> and <see cref="E:Rainbow.Conversations.ConversationRemoved"/> in <see cref="T:Rainbow.Conversations"/> object
            
            NOTE: The cache only store Bubble information but no avatars - It's up to user's SDK to manage / store Avatars of each bubble.
            </summary>
        </member>
        <member name="E:Rainbow.Bubbles.BubbleAffiliationChanged">
            <summary>
            Event fired when the current contact has changed its affiliation status in a group (i.e he has joined the bubble or the contrary)
            
            The current contact  can receive messages from a bubble only he has first the joined the bubble)
            
             The <see cref="T:Rainbow.Events.BubbleInvitationEventArgs" /> object permits to know some info about the bubble and its owner
            </summary>
        </member>
        <member name="E:Rainbow.Bubbles.BubbleInvitationReceived">
            <summary>
            Event fired when the current contact has received an invitation to be a member of a bubble
            
             The <see cref="T:Rainbow.Events.BubbleInvitationEventArgs" /> object permits to know some info about the bubble and its owner
            </summary>
        </member>
        <member name="E:Rainbow.Bubbles.BubbleMemberUpdated">
            <summary>
            Event fired when a member as been added /removed / promoted / accepted / invited in a bubble
            
             The <see cref="T:Rainbow.Events.BubbleMemberEventArgs" /> object permits to know some info about the member and its new status in the bubble
            </summary>
        </member>
        <member name="E:Rainbow.Bubbles.BubbleInfoUpdated">
            <summary>
            Event fired when name and/or topic of a bubble has been modified
            
             The <see cref="T:Rainbow.Events.BubbleInfoEventArgs" /> object permits to know new name / topic of the bubble
            </summary>
        </member>
        <member name="E:Rainbow.Bubbles.BubbleAvatarUpdated">
            <summary>
            Event fired when avatar of the bubble has been updated / deleted
            
             The <see cref="T:Rainbow.Events.BubbleAvatarEventArgs" /> object permits to know avatar status 
            </summary>
        </member>
        <member name="E:Rainbow.Bubbles.BubbleCustomDataUpdated">
            <summary>
            Event fired when custom data of the bubble has been updated / deleted
            
             The <see cref="T:Rainbow.Events.IdEventArgs" /> object permits to know the bubble involved (using its Id)
            </summary>
        </member>
        <member name="M:Rainbow.Bubbles.UpdateAvatarFromBubbleId(System.String,System.Byte[]@,System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            Update the avatar of the specified bubble Id. Only JPG and PNG format are supported. The previous avatar is definitively lost if the update is performed with success.
            </summary>
            <param name="bubbleId"><see cref="T:System.String"/>ID of the bubble</param>
            <param name="data"><see cref="T:Byte[]"/>Byte array storing the new avatar</param>
            <param name="format"><see cref="T:System.String"/>'PNG' or 'JPG' - to know the format of the image store in the byte array</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - Boolean is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Bubbles.DeleteAvatarFromBubbleId(System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            Delete the avatar of the specified bubble Id
            </summary>
            <param name="bubbleId"><see cref="T:System.String"/>ID of the bubble</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - Boolean is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Bubbles.GetAvatarFromBubbleId(System.String,System.Int32,System.Action{Rainbow.SdkResult{System.Byte[]}})">
            <summary>
            Get the avatar of the specified bubble Id from the server with the specified size.
            </summary>
            <param name="bubbleId"><see cref="T:System.String"/>ID of the bubble</param>
            <param name="size"><see cref="T:System.Int32"/>Specify avatar size in pixels (square size x size). Default value: 80. Max Value: 512. The image is not resized if the expected size is greater than the image stored on server side.</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{byte[]}}"/>Callback fired when the operation is done - <see cref="T:byte[]"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs. Image can be null is user as no Avatar</param>
        </member>
        <member name="M:Rainbow.Bubbles.GenerateNewPublicUrl(System.String,System.Action{Rainbow.SdkResult{System.String}})">
            <summary>
            Generate a new public URL to access the specified bubble (So a Guest or a Rainbow user can access to it just using a URL)
            
            The previous URL is no more functional !
            </summary>
            <param name="bubbleId"><see cref="T:System.String"/>Id of the bubble</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{String}}"/>Callback fired when the operation is done - <see cref="T:System.String"/> as a valid URL is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Bubbles.RemovePublicUrl(System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            'Remove' the public URL used to access the specified bubble. So it's no more possible to access to this buble using this URL
            </summary>
            <param name="bubbleId"><see cref="T:System.String"/>Id of the bubble</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Bubbles.CreatePublicUrl(System.String,System.Action{Rainbow.SdkResult{System.String}})">
            <summary>
            Create / Get the public URL used to access the specified bubble. So a Guest or a Rainbow user can access to it just using a URL
            </summary>
            <param name="bubbleId"><see cref="T:System.String"/>Id of the bubble</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Bubbles.UpdateCustomData(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            Add / Update custom data of the bubble
            
            Max 10 keys allowed, Max key length 64, Max key value length 512 .
            </summary>
            <param name="bubbleId"><see cref="T:System.String"/>Bubble Id</param>
            <param name="customData"><see cref="T:System.Collections.Generic.Dictionary`2"/>Custom data</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Bubbles.DeleteCustomData(System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            Delete custom data of the bubble
            </summary>
            <param name="bubbleId"><see cref="T:System.String"/>Bubble Id</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Bubbles.GetAllBubbles(System.Action{Rainbow.SdkResult{System.Collections.Generic.List{Rainbow.Model.Bubble}}})">
            <summary>
            To get the full list of <see cref="T:Rainbow.Model.Bubble" /> objects from server.
            </summary>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{List{Bubble}}}"/>Callback fired when the operation is done - List of <see cref="T:Rainbow.Model.Bubble"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Bubbles.GetAllBubblesFromCache">
            <summary>
            To get the full list of <see cref="T:Rainbow.Model.Bubble" /> objects from the cache.
            </summary>
            <return><see cref="T:System.Collections.Generic.List`1"/>List of <see cref="T:Rainbow.Model.Bubble"/> stored in the cache (if any)</return>
        </member>
        <member name="M:Rainbow.Bubbles.GetAllMembers(System.String,System.Action{Rainbow.SdkResult{System.Collections.Generic.List{Rainbow.Model.Bubble.Member}}})">
            <summary>
            To get the full list of <see cref="T:Rainbow.Model.Bubble.Member" /> objects for a bubble from the server (if nb of members is greater than 100, internally several request are done to the server)
            </summary>
            <param name="bubbleId"><see cref="T:System.String"/>The Id of the bubble</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{List{Bubble.Member}}}"/>Callback fired when the operation is done - List of <see cref="T:Rainbow.Model.Bubble.Member"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Bubbles.GetMembersFromCache(System.String)">
            <summary>
            To get the full list of <see cref="T:Rainbow.Model.Bubble.Member" /> objects for a bubble from the cache
            </summary>
            <param name="bubbleId"><see cref="T:System.String"/>The Id of the bubble</param>
            <returns><see cref="T:List{Bubble.Member}"/> - The members list or null</returns>
        </member>
        <member name="M:Rainbow.Bubbles.GetBubbleById(System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.Bubble}})">
            <summary>
            Get bubble information by bubble id from server
            </summary>
            <param name="bubbleId"><see cref="T:System.String"/>The Id of the bubble</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Bubble}}"/>Callback fired when the operation is done -  <see cref="T:Rainbow.Model.Bubble"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Bubbles.GetBubbleByJid(System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.Bubble}})">
            <summary>
            Get bublle information by bubble jid from server
            </summary>
            <param name="bubbleJid"><see cref="T:System.String"/>The Jid of the bubble</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Bubble}}"/>Callback fired when the operation is done -  <see cref="T:Rainbow.Model.Bubble"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Bubbles.GetBubbleByIdFromCache(System.String)">
            <summary>
            To get an bubble from the cache using its Id
            </summary>
            <param name="bubbleId"><see cref="T:System.String"/>ID of the bubble to get</param>
            <returns><see cref="T:Rainbow.Model.Bubble"> - A bubble object or NULL if not found</see></returns>
        </member>
        <member name="M:Rainbow.Bubbles.GetBubbleByJidFromCache(System.String)">
            <summary>
            To get an bubble from the cache using its Jid
            </summary>
            <param name="bubbleJid"><see cref="T:System.String"/>Jid of the bubble to get</param>
            <returns><see cref="T:Rainbow.Model.Bubble"> - A bubble object or NULL if not found</see></returns>
        </member>
        <member name="M:Rainbow.Bubbles.CreateBubble(System.String,System.String,System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.Bubble}},System.String,System.Int16,System.Boolean,System.String,System.String)">
            <summary>
            To create a new Bubble
            </summary>
            <param name="name"><see cref="T:System.String"/>Name of the bubble (max 255)</param>
            <param name="topic"><see cref="T:System.String"/>Topic of the bubble (max 255)</param>
            <param name="visibility"><see cref="T:System.String"/>Visibility of the bubble - See <see cref="T:Rainbow.Model.Bubble.BubbleVisibility"/> for possible values</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Bubble}}"/>Callback fired when the operation is done -  <see cref="T:Rainbow.Model.Bubble"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
            <param name="history"><see cref="T:System.String"/>Previous messages history to provide to new contact in the room - possible  values:  none, all, number</param>
            <param name="number"><see cref="T:System.Int32"/>Related to parameter **history** - the number of previous messages to provide to new contact in the room</param>
            <param name="disableNotifications"><see cref="T:System.Boolean"/>When set to true, there is no more notifications to be sent by a room in all cases with text body (contact join/leave, conference start/end)</param>
            <param name="mediaType"><see cref="T:System.String"/>Defines at creation the room will host a conference. - See <see cref="T:Rainbow.Model.Bubble.MediaType"/> for possible values</param>
            <param name="autoRegister"><see cref="T:System.String"/>A contact can create a room and not have to register contacts. He can share instead a public link also called 'public URL'(contacts public link).<br/><br/>According with autoRegister value, if another person uses the link to join the room:<br/>autoRegister = 'unlock': If this contact is not yet registered inside this room, he is automatically included with the status 'accepted' and join the room.<br/>autoRegister = 'lock': If this contact is not yet registered inside this room, he can't access to the room. So that he can't join the room</param>
        </member>
        <member name="M:Rainbow.Bubbles.UpdateBubble(System.String,System.String,System.String,System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.Bubble}},System.String)">
            <summary>
            To update a Bubble
            </summary>
            <param name="bubbleId"><see cref="T:System.String"/>ID of the bubble to delete</param>
            <param name="name"><see cref="T:System.String"/>Name of the bubble (max 255)</param>
            <param name="topic"><see cref="T:System.String"/>Topic of the bubble (max 255)</param>
            <param name="visibility"><see cref="T:System.String"/>Visibility of the bubble - See <see cref="T:Rainbow.Model.Bubble.BubbleVisibility"/> for possible values</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Bubble}}"/>Callback fired when the operation is done -  <see cref="T:Rainbow.Model.Bubble"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
            <param name="autoRegister"><see cref="T:System.String"/>A contact can create a room and not have to register contacts. He can share instead a public link also called 'public URL'(contacts public link).<br/><br/>According with autoRegister value, if another person uses the link to join the room:<br/>autoRegister = 'unlock': If this contact is not yet registered inside this room, he is automatically included with the status 'accepted' and join the room.<br/>autoRegister = 'lock': If this contact is not yet registered inside this room, he can't access to the room. So that he can't join the room</param>
        </member>
        <member name="M:Rainbow.Bubbles.DeleteBubble(System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            To delete a bubble
            </summary>
            <param name="bubbleId"><see cref="T:System.String"/>ID of the bubble to delete</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done -  True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Bubbles.ArchiveBubble(System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            To archive a bubble. Two possible cases:
            * You are the owner: all participants are archived (the bubble is closed)
            * You are a participant: you are the only one archived (you leave the bubble)
            
            As archived bubble, previous messages are still readable.
            </summary>
            <param name="bubbleId"><see cref="T:System.String"/>ID of the bubble to archive</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done -  True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Bubbles.AddContacts(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.Bubble}})">
            <summary>
            To add several contacts in a bubble.
            
            It's possible to add several Rainbow contacts using their IDs (see parameter **contactIdList**)
            
            It's possible to add several no Rainbow contacts using theirs emails (see parameter **emailsList**) - in this case an invitation is sent by email using the specified language
            
            As result a <see cref="T:Rainbow.Model.Bubble"/> object is provided to check which contacts have been added 
            </summary>
            <param name="bubbleId"><see cref="T:System.String"/>ID of the bubble</param>
            <param name="contactIdList"><see cref="T:List{String}"/>List of contact's ID to add in the bubble</param>
            <param name="emailsList"><see cref="T:List{String}"/>List of emails contacts to add in the bubble</param>
            <param name="lang"><see cref="T:System.String"/>To set the language used in the email send. Language format is composed of locale using format ISO 639-1, with optionally the regional variation using ISO 3166-1 alpha-2 (separated by hyphen).</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Bubble}}"/>Callback fired when the operation is done -  <see cref="T:Rainbow.Model.Bubble"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Bubbles.AddContactById(System.String,System.String,System.String,System.Action{Rainbow.SdkResult{System.Boolean}},System.Boolean)">
            <summary>
            To add a contact in a bubble. By default he is invited (so it's up to him to accept it). But you can also set him directly has accepted
            </summary>
            <param name="bubbleId"><see cref="T:System.String"/>ID of the bubble</param>
            <param name="contactId"><see cref="T:System.String"/>ID of the contact</param>
            <param name="privilege"><see cref="T:System.String"/>Privilege of the contact in the bubble - see <see cref="T:Rainbow.Model.Bubble.MemberPrivilege"/> for possible values</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done -  True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
            <param name="isDirectlyAccepted"><see cref="T:System.Boolean"/>False by default - this contact is invited so it's up to him to accept the invitation. If set to True, the contact is direclty accepted (there is no invitation step)</param>
        </member>
        <member name="M:Rainbow.Bubbles.RemoveContactById(System.String,System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            To remove a contact from a bubble 
            </summary>
            <param name="bubbleId"><see cref="T:System.String"/>ID of the bubble</param>
            <param name="contactId"><see cref="T:System.String"/>ID of the contact</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Bubble}}"/>Callback fired when the operation is done -  True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Bubbles.SendInvitation(System.String,System.String,System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            Send invitation by email to add a no rainbow user in a bubble
            </summary>
            <param name="bubbleId"><see cref="T:System.String"/>ID of the bubble</param>
            <param name="email"><see cref="T:System.String"/>email of the contact</param>
            <param name="lang"><see cref="T:System.String"/>To set the language used in the email send. Language format is composed of locale using format ISO 639-1, with optionally the regional variation using ISO 3166-1 alpha-2 (separated by hyphen).</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Bubble}}"/>Callback fired when the operation is done -  True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Bubbles.UpdateContactPrivilege(System.String,System.String,System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            To update privilege of contact in a bubble
            </summary>
            <param name="bubbleId"><see cref="T:System.String"/>ID of the bubble</param>
            <param name="contactId"><see cref="T:System.String"/>ID of the contact</param>
            <param name="privilege"><see cref="T:System.String"/>Privilege of the contact in the bubble - see <see cref="T:Rainbow.Model.Bubble.MemberPrivilege"/> for possible values</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done -  True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Bubbles.ChangeOwner(System.String,System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.Bubble}})">
            <summary>
            To change the owner of the Bubble - The futur owner must be first a moderator
            </summary>
            <param name="bubbleId"><see cref="T:System.String"/>ID of the bubble to delete</param>
            <param name="ownerId"><see cref="T:System.String"/>ID of the new owner</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Bubble}}"/>Callback fired when the operation is done -  <see cref="T:Rainbow.Model.Bubble"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Bubbles.LeaveBubble(System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            To leave from a bubble (if you are not the owner)
            
            The bubble is automaticaly archived - previous messages are still readable
            </summary>
            <param name="bubbleId"><see cref="T:System.String"/>ID of the bubble</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done -  True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Bubbles.AcceptInvitation(System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            To accept invitation to be a member of a bubble
            </summary>
            <param name="bubbleId"><see cref="T:System.String"/>ID of the bubble</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done -  True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Bubbles.DeclineInvitation(System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            To decline invitation to be a member of a bubble
            </summary>
            <param name="bubbleId"><see cref="T:System.String"/>ID of the bubble</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done -  True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Bubbles.CancelInvitation(System.String,System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            To cancel an invitation sent to a member by email - used to remove this member from the bubble
            </summary>
            <param name="bubbleId"><see cref="T:System.String"/>ID of the bubble</param>
            <param name="email"><see cref="T:System.String"/>email of the member to cancel the invitation</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done -  True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Bubbles.CancelInvitations(System.String,System.Collections.Generic.List{System.String},System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            To cancel several invitations sent to members by email - used to remove those members from the bubble
            </summary>
            <param name="bubbleId"><see cref="T:System.String"/>ID of the bubble</param>
            <param name="emailsList"><see cref="T:List{String}"/>emails list of members to cancel the invitation</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done -  True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Bubbles.IsArchived(Rainbow.Model.Bubble,System.String)">
            <summary>
            To know if the bubble is Archived for the specified user  (if not specified, use current user)
            </summary>
            <returns><see cref="T:System.Boolean"/> - Null is this bubble is unknwon or specified user is not a member - True if the bubble is Archived for the specified user</returns>
        </member>
        <member name="M:Rainbow.Bubbles.IsArchived(System.String,System.String)">
            <summary>
            To know if the bubble is Archived for the specified user  (if not specified, use current user)
            </summary>
            <returns><see cref="T:System.Boolean"/> - Null is this bubble is unknwon or specified user is not a member - True if the bubble is Archived for the specified user</returns>
        </member>
        <member name="M:Rainbow.Bubbles.IsAccepted(Rainbow.Model.Bubble,System.String)">
            <summary>
            To know if the specified user is in status Accepted in this bubble (if not specified, use current user)
            </summary>
            <returns><see cref="T:System.Boolean"/> - Null is this bubble is unknwon or specified user is not a member - True if specified user is in status Accepted</returns>
        </member>
        <member name="M:Rainbow.Bubbles.IsAccepted(System.String,System.String)">
            <summary>
            To know if the specified user is in status Accepted in this bubble (if not specified, use current user)
            </summary>
            <returns><see cref="T:System.Boolean"/> - Null is this bubble is unknwon or specified user is not a member - True if specified user is in status Accepted</returns>
        </member>
        <member name="M:Rainbow.Bubbles.IsInvited(Rainbow.Model.Bubble,System.String)">
            <summary>
            To know if the specified user is in status Invited in this bubble (if not specified, use current user)
            </summary>
            <returns><see cref="T:System.Boolean"/> - Null is this bubble is unknwon or specified user is not a member - True if specified user is in status Invited</returns>
        </member>
        <member name="M:Rainbow.Bubbles.IsInvited(System.String,System.String)">
            <summary>
            To know if the specified user is in status invited in this bubble (if not specified, use current user)
            </summary>
            <returns><see cref="T:System.Boolean"/> - Null is this bubble is unknwon or specified user is not a member - True if specified user is in status Invited</returns>
        </member>
        <member name="M:Rainbow.Bubbles.IsCreator(Rainbow.Model.Bubble,System.String)">
            <summary>
            To know if the specified user is Creator of this bubble (if not specified, use current user)
            </summary>
            <returns><see cref="T:System.Boolean"/> - Null is this bubble is unknwon or specified user is not a member - True if specified user is a Creator</returns>
        </member>
        <member name="M:Rainbow.Bubbles.IsCreator(System.String,System.String)">
            <summary>
            To know if the specified user is Creator of this bubble (if not specified, use current user)
            </summary>
            <returns><see cref="T:System.Boolean"/> - Null is this bubble is unknwon or specified user is not a member - True if specified user is a Creator</returns>
        </member>
        <member name="M:Rainbow.Bubbles.IsModerator(Rainbow.Model.Bubble,System.String)">
            <summary>
            To know if the specified user is moderator of this bubble (if not specified, use current user)
            </summary>
            <returns><see cref="T:System.Boolean"/> - Null is this bubble is unknwon or specified user is not a member - True if specified user is a Moderator</returns>
        </member>
        <member name="M:Rainbow.Bubbles.IsModerator(System.String,System.String)">
            <summary>
            To know if the specified user is moderator of this bubble (if not specified, use current user)
            </summary>
            <returns><see cref="T:System.Boolean"/> - Null is this bubble is unknwon or specified user is not a member - True if specified user is a Moderator</returns>
        </member>
        <member name="M:Rainbow.Bubbles.IsGuest(Rainbow.Model.Bubble,System.String)">
            <summary>
            To know if the specified user is Guest of this bubble (if not specified, use current user)
            </summary>
            <returns><see cref="T:System.Boolean"/> - Null is this bubble is unknwon or specified user is not a member - True if specified user is a Guest</returns>
        </member>
        <member name="M:Rainbow.Bubbles.IsGuest(System.String,System.String)">
            <summary>
            To know if the specified user is moderator of this bubble (if not specified, use current user)
            </summary>
            <returns><see cref="T:System.Boolean"/> - Null is this bubble is unknwon or specified user is not a member - True if specified user is a Guest</returns>
        </member>
        <member name="M:Rainbow.Bubbles.GetMemberOfBubble(Rainbow.Model.Bubble,System.String)">
            <summary>
            To get member of the bubble using the specified userId (if not specified, use current user)
            </summary>
            <returns><see cref="T:Rainbow.Model.Bubble.Member"/> - Null if bubble is null or userId is not a member - Member object if found</returns>
        </member>
        <member name="M:Rainbow.Bubbles.GetMemberOfBubble(System.String,System.String)">
            <summary>
            To get member of the bubble using the specified userId (if not specified, use current user)
            </summary>
            <returns><see cref="T:Rainbow.Model.Bubble.Member"/> - Null if bubble is null or userId is not a member - Member object if found</returns>
        </member>
        <member name="T:Rainbow.CallsLog">
            <summary>
            This object is available only using <see cref="M:Rainbow.Application.GetCallsLog"/> from <see cref="T:Rainbow.Application"/> object.
            
            CallsLog class is used to get / set / update info about <see cref="T:Rainbow.Model.CallLog"/>.
            
            A cache is used to maintain the list of calls log
            
            </summary>
        </member>
        <member name="E:Rainbow.CallsLog.CallsLogUpdated">
            <summary>
            Event raised when the call log already in cache has been updated (element(s) added or deleted)
            
            There is no specific details about the update - it's necesary to use <see cref="M:Rainbow.CallsLog.GetCallsLogFromCache(Rainbow.Model.CallLog.LogOrder)"/> to have the correct current log entries
            </summary>
        </member>
        <member name="E:Rainbow.CallsLog.CallLogRead">
            <summary>
            Event raised when a call log has been read
            
            The <see cref="T:Rainbow.Events.CallLogEventArgs" /> object permits to know which call log is involved
            </summary>
        </member>
        <member name="M:Rainbow.CallsLog.GetCallsLogFromCache(Rainbow.Model.CallLog.LogOrder)">
            <summary>
            Get the list of calls log available in the cache using the order specified
            </summary>
            <param name="order"><see cref="T:Rainbow.Model.CallLog.LogOrder"/> Order to use for the result</param>
            <returns>List of <see cref="T:Rainbow.Model.CallLog"/> - List of call log found in the cache</returns>
        </member>
        <member name="M:Rainbow.CallsLog.GetAllCallsLog(Rainbow.Model.CallLog.LogOrder,System.Action{Rainbow.SdkResult{System.Collections.Generic.List{Rainbow.Model.CallLog}}})">
            <summary>
            Get all call logs of the current user
            
            WARNING: Since the user can have a lot of calls log it's better to use <see cref="M:Rainbow.CallsLog.GetOlderCallsLog(System.Int32,System.Action{Rainbow.SdkResult{System.Int16}})"/> in your convenient way
            </summary>
            <param name="order"><see cref="T:Rainbow.Model.CallLog.LogOrder"/> Order to use for the result list</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{List{CallLog}}}"/>Callback fired when the operation is done - <see cref="T:List{CallLog}"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.CallsLog.GetOlderCallsLog(System.Int32,System.Action{Rainbow.SdkResult{System.Int16}})">
            <summary>
            To retrieve older calls log archived on server
            
            Each time this method is used older and older calls log are retrieved until there is no more result. They are stored in a cache.
            
            The callback give the number of calls log retrieved. It returns 0 when there is no more older calls log.
            
            To get the list from the cache use <see cref="M:Rainbow.CallsLog.GetCallsLogFromCache(Rainbow.Model.CallLog.LogOrder)"/>
            
            </summary>
            <param name="nbCallsLog"><see cref="T:int"/>Number of calls log to retrieve (max 100)</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Int16}}"/>Callback fired when the operation is done - <see cref="T:System.Int16"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.CallsLog.DeleteCallLog(System.String)">
            <summary>
            Delete the specified call log
            
            To know if the operation is done successfully the event <see cref="E:Rainbow.CallsLog.CallsLogUpdated"/> will be raised.
            </summary>
            <param name="id"><see cref="T:System.String"/>ID of the call log</param>
        </member>
        <member name="M:Rainbow.CallsLog.DeleteCallsLogForContact(System.String)">
            <summary>
            Delete all calls log for the specified contact
            
            To know if the operation is done successfully the event <see cref="E:Rainbow.CallsLog.CallsLogUpdated"/> will be raised
            </summary>
            <param name="jid"><see cref="T:System.String"/>Jid of teh contact</param>
        </member>
        <member name="M:Rainbow.CallsLog.DeleteAllCallsLog">
            <summary>
            Delete all calls log
            
            To know if the operation is done successfully the event <see cref="E:Rainbow.CallsLog.CallsLogUpdated"/> will be raised
            </summary>
        </member>
        <member name="M:Rainbow.CallsLog.MarkCallLogAsRead(System.String)">
            <summary>
            Mark as read the specified call log
            
            To know if the operation is done successfully the event <see cref="E:Rainbow.CallsLog.CallLogRead"/> will be raised
            </summary>
            <param name="callId"><see cref="T:System.String"/>callId of the call log</param>
        </member>
        <member name="T:Rainbow.CancelableDelay">
            <summary>
            Permit to start a task after a delay. This tasks can be cancelled or postpone if necessary.
            </summary>
        </member>
        <member name="M:Rainbow.CancelableDelay.StartAfter(System.Int32,System.Action)">
            <summary>
            Start task after the specified milliseconds
            </summary>
            <param name="milliseconds"><see cref="T:System.Int32"/> milliseconds before task starts</param>
            <param name="action"><see cref="T:System.Action"/> The task to use</param>
            <returns><see cref="T:Rainbow.CancelableDelay"/> object</returns>
        </member>
        <member name="M:Rainbow.CancelableDelay.StartAfter(System.TimeSpan,System.Action)">
            <summary>
            Start task after the time span specifiedmilliseconds
            </summary>
            <param name="span"><see cref="T:System.TimeSpan"/> time span before task starts</param>
            <param name="action"><see cref="T:System.Action"/> The task to use</param>
            <returns><see cref="T:Rainbow.CancelableDelay"/> object</returns>
        </member>
        <member name="M:Rainbow.CancelableDelay.PostPone">
            <summary>
            Postpone the SAME TASK using the same delay specified at creation
            </summary>
        </member>
        <member name="M:Rainbow.CancelableDelay.PostPone(System.TimeSpan)">
            <summary>
            Postpone the SAME TASK using the specified time span
            </summary>
            <param name="span"><see cref="T:System.TimeSpan"/> time span to use to post pone</param>
        </member>
        <member name="M:Rainbow.CancelableDelay.IsRunning">
            <summary>
            To know if the task is planned / running
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rainbow.CancelableDelay.Cancel">
            <summary>
            To cancel the planned task
            </summary>
        </member>
        <member name="T:Rainbow.Channels">
            <summary>
            This object is available only using <see cref="M:Rainbow.Application.GetChannels"/> from <see cref="T:Rainbow.Application"/> object.
            
            Channels class is used to get / set / update info about any <see cref="T:Rainbow.Model.Channel" />.
            
            Channel can be used when you want to notify a large group of users without having to send a chat message individually to each.
            
            You can create and administrate 3 differents types of channels accessible only by users in your company
            
            **Public Channel**: 
            
            Users are free to subscribe to a public channel. Public channels can be found when searching for channels. The visibility of a channel is limited to your company.
            
            **Private Channel**: 
            
            Only Owner can add or remove users in a private channels. Private channels CAN NOT be found when searching for channels. Consequently, users CAN subscribe / unsubscribe on their own to private channel.
            
            **Closed Channel**: 
            
            Only Owner can add or remove users in a private channels. Private channels CAN NOT be found when searching for channels. Consequently, users CAN NOT subscribe / unsubscribe on their own to closed channel.
            
            In a channel, the membership of a user (role) can be owner, member, publisher or none.
            
            **Owner**: 
            
            The owner is the user who creates the channel. A owner can modify information of the channel, can invite other users (including new owners) can publish messages and can receive incoming messages.
            
            **Publisher**: 
            
            A publisher is a member of a channel who can publish messages in that channel and can receive incoming messages.
            
            **Member**: 
            
            A member of a channel can only receive incoming messages.
            
            **None**: 
            
            A user with this particular role is a user who left the channel (by his own or removed by a owner).
            </summary>
        </member>
        <member name="E:Rainbow.Channels.MemberUpdated">
            <summary>
            Event fired when a channel member is updated
            
             The <see cref="T:Rainbow.Events.ChannelMemberEventArgs" /> object permits to know all the details of this member
            </summary>
        </member>
        <member name="E:Rainbow.Channels.ChannelInfoUpdated">
            <summary>
            Event fired when channel info is updated
            
             The <see cref="T:Rainbow.Events.IdEventArgs" /> object permits to know the Id of the channel
            </summary>
        </member>
        <member name="E:Rainbow.Channels.ChannelCreated">
            <summary>
            Event fired when a channel is created
            
             The <see cref="T:Rainbow.Events.IdEventArgs" /> object permits to know the Id of the channel
            </summary>
        </member>
        <member name="E:Rainbow.Channels.ChannelDeleted">
            <summary>
            Event fired when a channel is deleted
            
             The <see cref="T:Rainbow.Events.IdEventArgs" /> object permits to know the Id of the channel
            </summary>
        </member>
        <member name="E:Rainbow.Channels.ChannelAvatarUpdated">
            <summary>
            Event fired when avatar of the channel has been updated / deleted
            
             The <see cref="T:Rainbow.Events.ChannelAvatarEventArgs" /> object permits to know avatar status 
            </summary>
        </member>
        <member name="E:Rainbow.Channels.ChannelItemUpdated">
            <summary>
            Event fired when a ChannelItem has been added / deleted / updated in a Channel
            
             The <see cref="T:Rainbow.Events.ChannelItemEventArgs" /> object permits to know ChannelItem status 
            </summary>
        </member>
        <member name="E:Rainbow.Channels.ChannelItemAppreciationsUpdated">
            <summary>
            Event fired when Appreacitaions on a ChannelItem has been updated in a Channel
            
             The <see cref="T:Rainbow.Events.ChannelItemEventArgs" /> object permits to know ChannelItem status 
            </summary>
        </member>
        <member name="M:Rainbow.Channels.UpdateAvatarFromChannelId(System.String,System.Byte[]@,System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            Update the avatar of the specified channel Id. Only JPG and PNG format are supported. The previous avatar is definitively lost if the update is performed with success.
            </summary>
            <param name="channelId"><see cref="T:System.String"/>ID of the channel</param>
            <param name="data"><see cref="T:Byte[]"/>Byte array storing the new avatar</param>
            <param name="format"><see cref="T:System.String"/>'PNG' or 'JPG' - to know the format of the image store in the byte array</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - Boolean is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Channels.DeleteAvatarFromChannelId(System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            Delete the avatar of the specified channel Id
            </summary>
            <param name="channelId"><see cref="T:System.String"/>ID of the channel</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - Boolean is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Channels.GetAvatarFromChannelId(System.String,System.Int32,System.Action{Rainbow.SdkResult{System.Byte[]}})">
            <summary>
            Get the avatar of the specified channel Id from the server with the specified size.
            </summary>
            <param name="channelId"><see cref="T:System.String"/>ID of the bubble</param>
            <param name="size"><see cref="T:System.Int32"/>Specify avatar size in pixels (square size x size). Default value: 80. Max Value: 512. The image is not resized if the expected size is greater than the image stored on server side.</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{byte[]}}"/>Callback fired when the operation is done - <see cref="T:byte[]"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs. Image can be null is user as no Avatar</param>
        </member>
        <member name="M:Rainbow.Channels.GetItems(System.String,System.Int32,System.Action{Rainbow.SdkResult{System.Collections.Generic.List{Rainbow.Model.ChannelItem}}})">
            <summary>
            To retrieve older messages archived from server based on the specified channel ID.
            
            Each time the method is called older and older messages are retrieved until a empty list is returne - it means that there is no more older items in this channel 
            </summary>
            <param name="channelId"><see cref="T:System.String"/>channel ID</param>
            <param name="nbItems"><see cref="T:System.Int32"/>Number of itmes to retrieve</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{List{ChannelItem}}}"/>Callback fired when the operation is done - <see cref="T:List{ChannelItem}"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Channels.GetItemsFromCache(System.String)">
            <summary>
            Return the full list of items already found from the cache
            </summary>
            <param name="channelId"><see cref="T:System.String"/>ID of the channel</param>
            <returns><see cref="T:List{ChannelItem}"/> - List of ChanneItem or NULL if not found</returns>
        </member>
        <member name="M:Rainbow.Channels.GetItemFromCache(System.String,System.String)">
            <summary>
            Return the item from cache from a channel by its id
            </summary>
            <param name="channelId"><see cref="T:System.String"/> ID of the channel</param>
            <param name="itemId"><see cref="T:System.String"/> ID of the item</param>
            <returns><see cref="T:Rainbow.Model.ChannelItem"/> - The ChanneItem or NULL if not found</returns>
        </member>
        <member name="M:Rainbow.Channels.AddItem(System.String,Rainbow.Model.ChannelItem,System.Action{Rainbow.SdkResult{Rainbow.Model.ChannelItem}})">
            <summary>
            Add new item in the specifiec channel
            
            Only these properties from ChannelItem object are used: Type, Title, Message, Url, Images and Attachments
            
            To add image(s) / attachement(s) to this item, you need first to create valid File Descriptors for each image / attachment using <see cref="T:Rainbow.FileStorage"/> object and the **UploadFile** method using ChannelId as PeerID
            </summary>
            <param name="channelId"><see cref="T:System.String"/>ID of the channel</param>
            <param name="item"><see cref="T:Rainbow.Model.Channel"/>ChannelItem to add</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.ChannelItem"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Channels.UpdateItem(System.String,Rainbow.Model.ChannelItem,System.Action{Rainbow.SdkResult{Rainbow.Model.ChannelItem}})">
            <summary>
            Update the specified ChannelItem
            
            Only these properties from ChannelItem object are used: Id (mandatory), Type, Title, Message, Url, Images and Attachments
            
            To update image(s) / attachement(s) to this item, you need to use create valid File Descriptors for each image / attachment using <see cref="T:Rainbow.FileStorage"/> object and the **UploadFile** method using ChannelId as PeerID
            </summary>
            <param name="channelId"><see cref="T:System.String"/>ID of the channel</param>
            <param name="item"><see cref="T:Rainbow.Model.Channel"/>ChannelItem to add</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{ChannelItem}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.ChannelItem"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Channels.DeleteItem(System.String,System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            
            </summary>
            <param name="channelId"><see cref="T:System.String"/>ID of the channel</param>
            <param name="itemId"><see cref="T:System.String"/>ID of the ChannelItem</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Channels.LikeItem(System.String,System.String,System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            To like an Channe Item with the specified appreciation
            </summary>
            <param name="channelId"><see cref="T:System.String"/>ID of the Channel</param>
            <param name="itemId"><see cref="T:System.String"/>ID of the item</param>
            <param name="appreciation"><see cref="T:System.String"/>Appreciation value - must be one of the value specified in <see cref="T:Rainbow.Model.Channel.Appreciation"/> object</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Channels.GetDetailedAppreciations(System.String,System.String,System.Action{Rainbow.SdkResult{System.Collections.Generic.List{Rainbow.Model.Channel.UserAppreciation}}})">
            <summary>
            To know in details apprecations given on a channel item (by userId the apprecation given)
            
            This method asks the server several times if necessary to get all appreciations by pack of 100 results
            </summary>
            <param name="channelId"><see cref="T:System.String"/>ID of the Channel</param>
            <param name="itemId"><see cref="T:System.String"/>ID of the item</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Channels.MuteOrUnmute(System.String,System.Boolean,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            Mute or Unmute the channel - If muted you don't receive notification
            
            Only the moderator of the conference can use this method
            </summary>
            <param name="channelId"><see cref="T:System.String"/> ID of the channel</param>
            <param name="mute"><see cref="T:System.Boolean"/> True to mute, False to unmute</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Channels.GetSubscribedChannels(System.Action{Rainbow.SdkResult{System.Collections.Generic.List{Rainbow.Model.Channel}}})">
            <summary>
            Get subscribed channels from the server (as a member, publisher or owner)
            
            Information available using this method are: Id, Name, Topic, Type, Tubscribed, Category(if any)
            
            To have more info use see **GetChannelDetails()** method
            
            </summary>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{List{Channel}}}"/>Callback fired when the operation is done - List of <see cref="T:Rainbow.Model.Channel"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Channels.GetSubscribedChannelsFromCache">
            <summary>
            Get subscribed channels from cache
            </summary>
            <returns><see cref="T:List{Channel}"/> - List of <see cref="T:Rainbow.Model.Channel"/> stored in the cache (if any)</returns>
        </member>
        <member name="M:Rainbow.Channels.GetInvitedChannels(System.Action{Rainbow.SdkResult{System.Collections.Generic.List{Rainbow.Model.Channel}}})">
            <summary>
            Get channels from the server where the current user has been invited (i.e. where the current user has been invited but has not still accepted/declined the invitation)
            
            Information available using this method are: Id, Name, Topic, Type, Tubscribed, Category(if any)
            
            To have more info use see **GetChannelDetails()** method
            
            </summary>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{List{Channel}}}"/>Callback fired when the operation is done - List of <see cref="T:Rainbow.Model.Channel"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Channels.GetInvitedChannelsFromCache">
            <summary>
            Get unsubscribed channels from cache (i.e. the list of channel where the current user has been invited but has not still accepted/declined the invitation)
            </summary>
            <returns><see cref="T:List{Channel}"/> - List of <see cref="T:Rainbow.Model.Channel"/> stored in the cache (if any)</returns>
        </member>
        <member name="M:Rainbow.Channels.GetChannelsFromCache">
            <summary>
            Get all channels available from cache
            </summary>
            <returns><see cref="T:List{Channel}"/> - List of <see cref="T:Rainbow.Model.Channel"/> stored in the cache (if any)</returns>
        </member>
        <member name="M:Rainbow.Channels.GetChannel(System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.Channel}})">
            <summary>
            Get channel information using its ID from server
            
            Only way to get **MaxItems** and **MaxPayloadSize** properties
            
            When this method is used and a Channel is found, it's adde automatically in the cache
            </summary>
            <param name="channelId"><see cref="T:System.String"/>ID of the channel</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Channel}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.Channel"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Channels.GetChannelFromCache(System.String)">
            <summary>
            Get channel information from cache
            </summary>
            <param name="channelId"><see cref="T:System.String"/>ID of the channel</param>
            <returns><see cref="T:Rainbow.Model.Channel"/> - A Channel or null if not exist</returns>
        </member>
        <member name="M:Rainbow.Channels.CreateChannel(Rainbow.Model.Channel,System.Action{Rainbow.SdkResult{Rainbow.Model.Channel}})">
            <summary>
            Create the specified Channel on the server
            
            Only these properties are used in the Channel object provided: Name (Mandatory, max: 255), Topic(max: 1024), Category(max: 255), Mode(mandatory), MaxItems (default: 30 - max: 100), MaxPayloadSize (default: 60000 - max: 60000 bytes)
            
            </summary>
            <param name="channel"><see cref="T:Rainbow.Model.Channel"/> Channel to create</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Channel}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.Channel"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Channels.UpdateChannel(Rainbow.Model.Channel,System.Action{Rainbow.SdkResult{Rainbow.Model.Channel}})">
            <summary>
            Update the specified Channel on the server
            
            Only these properties are used in the Channel object provided: Id (mandatory), Name (Mandatory, max: 255), Topic(max: 1024), Category(max: 255), Mode(mandatory), MaxItems (default: 30 - max: 100), MaxPayloadSize (default: 60000 - max: 60000 bytes)
            
            </summary>
            <param name="channel"><see cref="T:Rainbow.Model.Channel"/> Channel to create</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Channel}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.Channel"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Channels.DeleteChannel(System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            Delete the specified channel
            </summary>
            <param name="channelId"><see cref="T:System.String"/>ID of the channel</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Channels.SetMembersRole(System.String,System.Collections.Generic.List{Rainbow.Model.Channel.Member},System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            To set/update role of member(s) on the specified channel or remove them form the channel
            
            To remove member(s) set their role(s) to **ChannelRole.NONE**
            
            The cache storing Members is updated in consequence.
            </summary>
            <param name="channelId"><see cref="T:System.String"/>ID of the channel</param>
            <param name="members"><see cref="T:List{Channel.Member}"/>List of members to set/update - only <see cref="P:Rainbow.Model.Channel.Member.Type"/> is used</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Channels.Subscribe(System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            To subscribe to a Channel
            </summary>
            <param name="channelId"><see cref="T:System.String"/>ID of the channel</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Channels.Unsubscribe(System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            To unsubscribe from a Channel
            </summary>
            <param name="channelId"><see cref="T:System.String"/>ID of the channel</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Channels.SearchChannels(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Action{Rainbow.SdkResult{Rainbow.Model.SearchChannelsResult}})">
            <summary>
            Search channels using criteria specified. At least on criteria must not be null.
            
            If several criterias are used, all criteria must match to have a result.
            
            Channels found are NOT added to the cache.
            </summary>
            <param name="name"><see cref="T:System.String"/> Search by channel names (case insensitive substring).</param>
            <param name="topic"><see cref="T:System.String"/> Search by channel topics (case insensitive substring).</param>
            <param name="category"><see cref="T:System.String"/> Search channels with a category in the provided list (comma separated case sensitive values).</param>
            <param name="excludedCategory"><see cref="T:System.String"/> Search channels with a category not in the provided list (comma separated case sensitive values).</param>
            <param name="limit"><see cref="T:System.Int32"/> Allow to specify the number of channels to retrieve (min: 20 - max: 200).</param>
            <param name="offset"><see cref="T:System.Int32"/> Allow to specify the position of first channel to retrieve. If the offset is greater that the total number of result, no results are returned.</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{SearchChannelsResult}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.SearchChannelsResult"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Channels.GetAllMembersFromCache(System.String)">
            <summary>
            To get the full list of <see cref="T:Rainbow.Model.Bubble.Member" /> objects for a channel from the cache
            </summary>
            <param name="channelId"><see cref="T:System.String"/>The Id of the Channel</param>
            <returns><see cref="T:List{Channel.Member}"/> - The members list or null</returns>
        </member>
        <member name="M:Rainbow.Channels.GetAllMembers(System.String,System.Action{Rainbow.SdkResult{System.Collections.Generic.List{Rainbow.Model.Channel.Member}}})">
            <summary>
            To get the full list of <see cref="T:Rainbow.Model.Channel.Member" /> objects for a Channel from the server (if nb of members is greater than 100, internally several requests are done to the server)
            </summary>
            <param name="channelId"><see cref="T:System.String"/>The Id of the bubble</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{List{Channel.Member}}}"/>Callback fired when the operation is done - List of <see cref="T:Rainbow.Model.Channel.Member"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Channels.AcceptInvitation(System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            To accept an invitation to a channel
            </summary>
            <param name="channelId"><see cref="T:System.String"/>Id of the channel</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Channels.DeclineInvitation(System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            To decline an invitation to a channel
            </summary>
            <param name="channelId"><see cref="T:System.String"/>Id of the channel</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="T:Rainbow.Conferences">
            <summary>
            This object is available only using <see cref="M:Rainbow.Application.GetConferences"/> from <see cref="T:Rainbow.Application"/> object.
            
            Conferences class is used to get / set / update info about any <see cref="T:Rainbow.Model.Conference" />.
            
            A cache is used to maintain the list of availalbe Conferences for the connected contact.
            
            Notice that today ONLY ONE conference in progress is allowed (server restriction). The SDK is already designed to manage several in same time.
            
            Methods to use are the same but internally the way to exchange with the server is different.
            
            Version 2 must be used if all clients are using it (Web, Desktop, etc ...). At term only the version 2 will be used (It will not be possible to use version 1)
            
            </summary>
        </member>
        <member name="E:Rainbow.Conferences.ConferenceUpdated">
            <summary>
            Event fired when a conference informationn is updated.
            
            This event is not raised if participant(s), publisher(s) and/or talker(s) has been updated. Another events exists for this cases.
            </summary>
        </member>
        <member name="E:Rainbow.Conferences.ConferenceRemoved">
            <summary>
            Event fired when a conference is removed/finished
            </summary>
        </member>
        <member name="E:Rainbow.Conferences.ConferenceRejected">
            <summary>
            Event fired when a conference has been rejected by the current user
            </summary>
        </member>
        <member name="E:Rainbow.Conferences.ConferenceParticipantsUpdated">
            <summary>
            Event fired when at least one participant has been added, removed, updated
            </summary>
        </member>
        <member name="E:Rainbow.Conferences.ConferenceMediaPublicationsUpdated">
            <summary>
            Event fired when at least one Media Publication has been added, removed, updated
            </summary>
        </member>
        <member name="E:Rainbow.Conferences.ConferenceTalkersUpdated">
            <summary>
            Event fired when at least one talker has been added, removed, updated
            </summary>
        </member>
        <member name="E:Rainbow.Conferences.ConferenceOwnerUpdated">
            <summary>
            Event raised when the Owner of the conference has been updated
            </summary>
        </member>
        <member name="E:Rainbow.Conferences.ConferenceSharingTransfertStatusUpdated">
            <summary>
            Event raised when the sharing transfer status has chnaged in a Conference
            </summary>
        </member>
        <member name="M:Rainbow.Conferences.GetConferencesInProgress(System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            To retrieve the list of Conferences in progress. Usefull after a login process to know if a Conference is already in progress.
            
            The callback permits to know if the server has correctly answered.
            
            Events <see cref="E:Rainbow.Conferences.ConferenceUpdated"/>, <see cref="E:Rainbow.Conferences.ConferenceParticipantsUpdated"/>, <see cref="E:Rainbow.Conferences.ConferenceMediaPublicationsUpdated"/> and <see cref="E:Rainbow.Conferences.ConferenceTalkersUpdated"/> are alos raised (if necessayr) with correct information if one or several conferences are in progress
            </summary>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Conferences.ConferenceAllowed">
            <summary>
            To know if the current user has the permission to start its own WebRTC Conference
            </summary>
            <returns><see cref="T:System.Boolean"/> - True if it's allowed, false if it's not the case</returns>
        </member>
        <member name="M:Rainbow.Conferences.GetBubbleByConferenceIdFromCache(System.String)">
            <summary>
            To get a bubble from the cache using a conference Id
            </summary>
            <param name="conferenceId"><see cref="T:System.String"/>ID of the conference</param>
            <returns><see cref="T:Rainbow.Model.Bubble"> - A bubble object or NULL if not found</see></returns>
        </member>
        <member name="M:Rainbow.Conferences.GetBubbleIdByConferenceIdFromCache(System.String)">
            <summary>
            To get ID of the bubble from the cache using a conference Id
            
            In API version 2, Bubble Id is equal to conferenceId
            
            </summary>
            <param name="conferenceId"><see cref="T:System.String"/>ID of the conference</param>
            <returns><see cref="T:System.String"> - The bubble Id or NULL if not found</see></returns>
        </member>
        <member name="M:Rainbow.Conferences.GetConferenceIdByBubbleIdFromCache(System.String)">
            <summary>
            To get ID of the Conference from the cache using a bubble Id
            
            In API version 2, Bubble Id is equal to conferenceId
            
            </summary>
            <param name="bubbleId"><see cref="T:System.String"/>ID of the Bubble</param>
            <returns><see cref="T:System.String"> - The Conference Id or NULL if not found</see></returns>
        </member>
        <member name="M:Rainbow.Conferences.ConferenceGetByIdFromCache(System.String)">
            <summary>
            To get a conference from the cache using a conference Id
            </summary>
            <param name="conferenceId"><see cref="T:System.String"/>ID of the conference to get</param>
            <returns><see cref="T:Rainbow.Model.Conference"> - A conference object or NULL if not found</see></returns>
        </member>
        <member name="M:Rainbow.Conferences.ConferenceGetListFromCache">
            <summary>
            To get conferences list in progress from the cache
            </summary>
            <returns><see cref="T:List{Conference}"/> - The list of <see cref="T:Rainbow.Model.Conference"/> in progress.</returns>
        </member>
        <member name="M:Rainbow.Conferences.ConferenceGetParticipantsFromCache(System.String)">
            <summary>
            To get participants from a Conference
            </summary>
            <param name="conferenceId"><see cref="T:System.String"/>ID of the conference to get</param>
            <returns><see cref="T:Dictionary{String, Conference.Participant}"/> - Dictionary by Participant ID of Conference.Participant objects</returns>
        </member>
        <member name="M:Rainbow.Conferences.ConferenceGetTalkersFromCache(System.String)">
            <summary>
            To get talkers from a Conference
            </summary>
            <param name="conferenceId"><see cref="T:System.String"/>ID of the conference to get</param>
            <returns><see cref="T:Dictionary{String, Conference.Talker}"/> - Dictionary by Participant ID of Conference.Talker objects</returns>
        </member>
        <member name="M:Rainbow.Conferences.ConferenceGetMediaPublicationsFromCache(System.String)">
            <summary>
            To get MediaPublication in the Conference
            </summary>
            <param name="conferenceId"><see cref="T:System.String"/>ID of the conference to get</param>
            <returns><see cref="T:List{MediaPublication}"/> - List of <see cref="T:Rainbow.Model.MediaPublication"/> objects</returns>
        </member>
        <member name="M:Rainbow.Conferences.ConferenceGetPublicUrl(System.String,System.Action{Rainbow.SdkResult{System.String}})">
            <summary>
            To retrieve the public URL to access the Conference - So a Guest or a Rainbow user can access to it just using a URL
            </summary>
            <param name="bubbleId"><see cref="T:System.String"/> ID of the bubble</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{String}}"/>Callback fired when the operation is done - <see cref="T:System.String"/> as a valid URL is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Conferences.ConferenceGenerateNewPublicUrl(System.String,System.Action{Rainbow.SdkResult{System.String}})">
            <summary>
            Generate a new public URL to access the Conference (So a Guest or a Rainbow user can access to it just using a URL)
            
            The previous URL is no more functional !
            </summary>
            <param name="bubbleId"><see cref="T:System.String"/> ID of the bubble</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{String}}"/>Callback fired when the operation is done - <see cref="T:System.String"/> as a valid URL is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Conferences.ConferenceGetParticipantParameters(System.String,System.Boolean@,System.Boolean@)">
            <summary>
            To get Conference parameters for participants:
             - To play (or not) entry tone when a particpant joins the conference.
             - To mute automatically (or not) participants when they join the conference.
            </summary>
            <param name="bubbleId"><see cref="T:System.String"/> - Id of the bubble</param>
            <param name="playEntryTone"><see cref="T:System.Boolean"/> - True to play entry tone when a particpant joins the conference.</param>
            <param name="muteUponEntry"><see cref="T:System.Boolean"/> - True to mute automatically participants when they join the conference.</param>
            <returns><see cref="T:System.Boolean"/> - True if info has been found</returns>
        </member>
        <member name="M:Rainbow.Conferences.ConferenceSetParticipantParameters(System.String,System.Boolean,System.Boolean,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            To play (or not) entry tone when a particpant joins the conference.
            
            To mute automatically (or not) participants when they join the conference.
            
            </summary>
            <param name="bubbleId"><see cref="T:System.String"/> - Id of the bubble</param>
            <param name="playEntryTone"><see cref="T:System.Boolean"/> True to play entry tone when a particpant joins the conference.</param>
            <param name="muteUponEntry"><see cref="T:System.Boolean"/> True to mute automatically participants when they join the conference.</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Conferences.ConferenceGetSnapshot(System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.Conference}})">
            <summary>
            Ask server information about the specified conference
            
            Only information available in <see cref="T:Rainbow.Model.Conference"/> object is returned. To have more info (like Participants and Publishers) use <see cref="M:Rainbow.Conferences.ConferenceGetFullSnapshot(System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.Conference}})"/> method
            </summary>
            <param name="bubbleId"><see cref="T:System.String"/> - Id of the bubble</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Conference}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.Conference"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Conferences.ConferenceGetFullSnapshot(System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.Conference}})">
            <summary>
            Ask server full information about the specified conference. Events <see cref="E:Rainbow.Conferences.ConferenceParticipantsUpdated"/>,  <see cref="E:Rainbow.Conferences.ConferenceMediaPublicationsUpdated"/> and <see cref="E:Rainbow.Conferences.ConferenceTalkersUpdated"/> will be raised (if necessary) once info gathered from server
            
            </summary>
            <param name="bubbleId"><see cref="T:System.String"/> - Id of the bubble</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Conference}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.Conference"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Conferences.ConferenceStart(System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            To start a conference.
            
            Only a moderator can start a conference.
            </summary>
            <param name="bubbleId"><see cref="T:System.String"/> ID of the bubble</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Conferences.ConferenceStop(System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            To stop a conference.
            
            Only a moderator can stop a conference.
            </summary>
            <param name="bubbleId"><see cref="T:System.String"/> ID of the bubble</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Conferences.ConferenceJoin(System.String,System.Boolean,System.String,System.String,System.Action{Rainbow.SdkResult{System.String}})">
            <summary>
            To join a conference.
            
            NOTE: The conference must be first started before to join it.
            </summary>
            <param name="bubbleId"><see cref="T:System.String"/> ID of the bubble</param>
            <param name="mute"><see cref="T:System.Boolean"/>To join conference as muted or not</param>
            <param name="participantPhoneNumber"><see cref="T:System.Boolean"/>Join through dial. (can be null)</param>
            <param name="country"><see cref="T:System.String"/>Country where the called number is from. If not provided, the user's country is taken (can be null)</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{String}}"/>Callback fired when the operation is done - The Conference Jid is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Conferences.ConferenceReject(System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            To reject conference. A XMPP message will be sent to all his clients in order for them to remove the incoming call popup.
            </summary>
            <param name="bubbleId"><see cref="T:System.String"/> ID of the bubble</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Conferences.ConferenceMuteOrUnmute(System.String,System.Boolean,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            Mute or Unmute the conference - If muted only the moderator can speak
            
            Only the moderator of the conference can use this method
            </summary>
            <param name="bubbleId"><see cref="T:System.String"/> ID of the bubble</param>
            <param name="mute"><see cref="T:System.Boolean"/> True to mute, False to unmute</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Conferences.ConferenceLockOrUnlocked(System.String,System.Boolean,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            Lock or Unlock the conference - If locked, it disables any future participant from joining conference
            
            Only the moderator of the conference can use this method
            </summary>
            <param name="bubbleId"><see cref="T:System.String"/> ID of the bubble</param>
            <param name="locked"><see cref="T:System.Boolean"/> True to lock, False to unlock</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Conferences.ConferenceAddPstnParticipant(System.String,System.String,System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            Add a PSTN Participant to the specified conference.
            
            Only a user using "Rainbow Hub" service can be added using this method.
            
            </summary>
            <param name="bubbleId"><see cref="T:System.String"/> ID of the bubble</param>
            <param name="phoneNumber"><see cref="T:System.String"/> Phone number</param>
            <param name="country"><see cref="T:System.String"/>Country of the phone number used (ISO 3166-1 alpha3 format) - if not specified used the country of the current user</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Conferences.ConferenceDropPstnParticipant(System.String,System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            Drop a PSTN Participant from the specified conference.
            
            Only a user using "Rainbow Hub" service can be removed using this method.
            
            </summary>
            <param name="bubbleId"><see cref="T:System.String"/> ID of the bubble</param>
            <param name="phoneNumber"><see cref="T:System.String"/> Phone number</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Conferences.ConferenceMuteOrUnmutePstnParticipant(System.String,System.String,System.Boolean,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            Mute or Unmute the specified PSTN participant in the conference.
            
            Only a user using "Rainbow Hub" service can be managed using this method.
            
            </summary>
            <param name="bubbleId"><see cref="T:System.String"/> ID of the bubble</param>
            <param name="phoneNumber"><see cref="T:System.String"/> Phone number</param>
            <param name="mute"><see cref="T:System.Boolean"/> True to mute, False to unmute</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Conferences.ConferenceMuteOrUnmuteParticipant(System.String,System.String,System.Boolean,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            Mute or Unmute the specified participant in the conference
            
            Only the moderator of the conference can use this method
            </summary>
            <param name="bubbleId"><see cref="T:System.String"/> ID of the bubble</param>
            <param name="userId"><see cref="T:System.String"/> ID of the participant to mute/unmute</param>
            <param name="mute"><see cref="T:System.Boolean"/> True to mute, False to unmute</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Conferences.ConferenceDropParticipant(System.String,System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            Disconnect participant from conference. The request can be sent by participant himself or by a conference's moderator.
            </summary>
            <param name="bubbleId"><see cref="T:System.String"/> ID of the bubble</param>
            <param name="userId"><see cref="T:System.String"/> ID of the participant to drop</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Conferences.ConferenceDelegate(System.String,System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            Current owner of the conference delegates its control to another participant (a moderator)
            </summary>
            <param name="bubbleId"><see cref="T:System.String"/> ID of the bubble</param>
            <param name="userId"><see cref="T:System.String"/> ID of the participant to drop</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Conferences.ConferenceTalkingTime(System.String,System.Int32,System.Int32,System.Action{Rainbow.SdkResult{Rainbow.Model.Conference.ConferenceTalkingTime}})">
            <summary>
            Get talkingtime of each participant in the conference. All webrtc participants talkingtime value (and more) will be returned even if the conference is ended.
            </summary>
            <param name="bubbleId"><see cref="T:System.String"/> ID of the bubble</param>
            <param name="offset"><see cref="T:System.Int32"/> Offset to use to retrieve participants - if offset > total, no result is returned</param>
            <param name="limit"><see cref="T:System.Int32"/> Limit of participants to retrieve (100 by default)</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Conference.ConferenceTalkingTime}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.Conference.ConferenceTalkingTime"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Conferences.ConferenceSubscribeToParticipantVideoStream(System.String,System.String,Rainbow.Model.Conference.SubStreamLevel,System.String,System.Boolean,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            Gives the possibility to a user participating in a webrtc conference identified by 'conferenceId' to subscribe and receive a video stream published by a participant identified by 'participantId'.
            </summary>
            <param name="bubbleId"><see cref="T:System.String"/> ID of the bubble</param>
            <param name="userId"><see cref="T:System.String"/> ID of the participant</param>
            <param name="subStreamLevel"><see cref="T:Rainbow.Model.Conference.SubStreamLevel"/> Indicate the subStream Level to activate at startup, to be used only if simulcast is available on Publisher side</param>
            <param name="mediaType"><see cref="T:System.String"/> Can be "audio", "video", "audioVideo" or "sharing"</param>
            <param name="dynamicFeed"><see cref="T:System.Boolean"/> To be used to declare a Feed as dynamic. You will subscribe first to the feed associate to parameter participantId, then switched to active Talker's feed if present</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Conferences.ConferenceRecordingStart(System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            The Start recording command initiates a recording of a conference for the user whom sent the request.
            
            The user must have the permission to do that.
            
            Once the record is finished the event <see cref="E:Rainbow.FileStorage.FileStorageUpdated"/> is raised. The file descriptor will have <see cref="P:Rainbow.Model.FileDescriptor.Type"/> equals to <see cref="F:Rainbow.Model.FileType.ConversationRecording"/>.
            </summary>
            <param name="bubbleId"><see cref="T:System.String"/> ID of the bubble</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Conferences.ConferenceRecordingStop(System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            The Stop recording command stops a recording of a conference for the user whom sent the request.
            
            The user must have the permission to do that.
            
            </summary>
            <param name="bubbleId"><see cref="T:System.String"/> ID of the bubble</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Conferences.ConferenceRecordingPause(System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            The Pause recording command pauses a recording of a conference for the user whom sent the request.
            
            The user must have the permission to do that.
            
            </summary>
            <param name="bubbleId"><see cref="T:System.String"/> ID of the bubble</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Conferences.ConferenceRecordingResume(System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            The Resume recording command resumes a recording of a conference for the user whom sent the request.
            
            The user must have the permission to do that.
            
            </summary>
            <param name="bubbleId"><see cref="T:System.String"/> ID of the bubble</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Conferences.ConferenceGetSharingPublisherDetails(System.String)">
            <summary>
            To get Jid and Resource of the sharing publisher in the specified bubble Id
            </summary>
            <param name="bubbleId"><see cref="T:System.String"/>Bubble Id</param>
            <returns><see cref="T:(String, String)"/> - (<see cref="T:System.String"/> jid, <see cref="T:System.String"/> resource) Jid and Resource of the sharing publisher</returns>
        </member>
        <member name="M:Rainbow.Conferences.ConferenceSendSharingTransfertStatus(System.String,System.String,System.String,Rainbow.Model.ConferenceSharingTranfertStatus,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            To send sharing transfert status i.e. send a request or accept/refuse a sharing transfert. It's related to the event <see cref="E:Rainbow.Conferences.ConferenceSharingTransfertStatusUpdated"/>
            
            If you want to start a sharing session but a peer already has started one, use <see cref="F:Rainbow.Model.ConferenceSharingTranfertStatus.REQUEST"/> to ask him to stop it. To know Jid and Resource of the Peer which has started a sharing session use <see cref="M:Rainbow.Conferences.ConferenceGetSharingPublisherDetails(System.String)"/>
            
            If you have started a sharing session but a peer wants to start one, it will send you a <see cref="F:Rainbow.Model.ConferenceSharingTranfertStatus.REQUEST"/>: the event <see cref="E:Rainbow.Conferences.ConferenceSharingTransfertStatusUpdated"/> will be raised.
            
            You can then call this method to <see cref="F:Rainbow.Model.ConferenceSharingTranfertStatus.ACCEPT"/> or <see cref="F:Rainbow.Model.ConferenceSharingTranfertStatus.REFUSE"/> it.        /// 
            </summary>
            <param name="bubbleId"><see cref="T:System.String"/>Bubble Id</param>
            <param name="toJid"><see cref="T:System.String"/>Peer Jid wich will receive the request</param>
            <param name="toResource"><see cref="T:System.String"/>Peer Resource wich will receive the request</param>
            <param name="status"><see cref="T:Rainbow.Model.ConferenceSharingTranfertStatus"/>The type of request you want to send</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Conferences.ConferenceIsParticipantUsingJid(System.String,System.Collections.Generic.Dictionary{System.String,Rainbow.Model.Conference.Participant})">
            <summary>
            To check if the user jid specified is particiant according the list provided
            </summary>
            <param name="userJid"><see cref="T:Rainbow.Model.StreamDevice"/>User Jid to check</param>
            <param name="participants"><see cref="!:Dictionary&lt;String, Conference.Participant&gt;"/>Dictionary of Participant to check</param>
            <returns></returns>
        </member>
        <member name="T:Rainbow.Contacts">
            <summary>
            This object is available only using <see cref="M:Rainbow.Application.GetContacts"/> from <see cref="T:Rainbow.Application"/> object.
            
            Contacts is used to get / set / update info about any <see cref="T:Rainbow.Model.Contact" />.
            
            A cache is used internally and updated automatically when a contact is added, updated, removed
            
            NOTE: The cache only store contact information but no avatars - It's up to user's SDK to manage / store Avatars of each contact.
            </summary>
        </member>
        <member name="E:Rainbow.Contacts.PeerAvatarChanged">
            <summary>
            The event raised when an avatar's peer has been updated on server side.
            
             The <see cref="T:Rainbow.Events.PeerEventArgs" /> object permits to know which avatar's peer has been updated
            </summary>
        </member>
        <member name="E:Rainbow.Contacts.PeerAvatarDeleted">
            <summary>
            The event raised when an avatar's peer  has been deleted on server side.
            
             The <see cref="T:Rainbow.Events.PeerEventArgs" /> object permits to know which avatar's peer has been updated
            </summary>
        </member>
        <member name="E:Rainbow.Contacts.PeerInfoChanged">
            <summary>
            The event raised when a Peer information has been updated on server side (and not when its presence level changed).
            
             The <see cref="T:Rainbow.Events.JidEventArgs" /> object permits to know which Peer has been updated 
            </summary>
        </member>
        <member name="E:Rainbow.Contacts.PeerAdded">
            <summary>
            The event raised when a Peer has been added in the cache.
            
             The <see cref="T:Rainbow.Events.PeerEventArgs" /> object permits to know which Peer has been added
            </summary>
        </member>
        <member name="E:Rainbow.Contacts.RosterPeerAdded">
            <summary>
            The event raised when a Peer has been added in your roster. The associated Contact is automatically added in the cache.
            
            The PeerAdded event is also raised.
            
             The <see cref="T:Rainbow.Events.PeerEventArgs" /> object permits to know which Peer has been added using
            </summary>
        </member>
        <member name="E:Rainbow.Contacts.RosterPeerRemoved">
            <summary>
            The event raised when a Peer has been removed from your roster. The associated contact is not removed from the cache.
            
             The <see cref="T:Rainbow.Events.PeerEventArgs" /> object permits to know which Peer has been removed
            </summary>
        </member>
        <member name="E:Rainbow.Contacts.ContactPresenceChanged">
            <summary>
            The event raised when a presence has changed from a contact for one of its resource/device (and not when its info has been changed). 
            This event is usefull only if you want specifically know the contacts presence for each resource/device. If it's not the case use instead <see cref="E:Rainbow.Contacts.ContactAggregatedPresenceChanged" /> event.
            
            You never received this event for a contact in the cache but not in your roster
            
             The <see cref="T:Rainbow.Events.PresenceEventArgs" /> object permits to know which contact and for which resource is concerned using it's Jid Im and it's new presence - See <see cref="T:Rainbow.Model.Presence"/>
            </summary>
        </member>
        <member name="E:Rainbow.Contacts.ContactAggregatedPresenceChanged">
            <summary>
            The event raised when the aggregated presence has changed from a contact in your roster only (and not when its info has been changed)
            
            You never received this event for a contact in the cache but not in your roster
            
            Aggregated presence is a summarize of all presences from all resource of the specified contact. So ContactPresenceChnaged can be raised several time but perhaps not ContactAggregatedPresenceChanged
            
             The <see cref="T:Rainbow.Events.PresenceEventArgs" /> object permits to know which contact is concerned using it's Jid Im and it's new presence - See <see cref="T:Rainbow.Model.Presence"/>
            </summary>
        </member>
        <member name="E:Rainbow.Contacts.SynchroProviderStatusChanged">
            <summary>
            Event raised when synchronization status with a provider has changed.
            
            For example, when calendar synchronization with "office365" or "google" has been enabled / disabled or when presence synchronization with "teams" has been enabled / disabled.
            
            Even after the SDK has been initialized, no synchronization status is available.
            
            It's necessary to use:
            
            - <see cref="M:Rainbow.Contacts.GetTeamsPresenceStateFromCurrentContact(System.Action{Rainbow.SdkResult{Rainbow.Model.TeamsPresenceState}})"/> to get the presence synchronization status with Teams
            
            - <see cref="M:Rainbow.Contacts.GetCalendarStateFromCurrentContact(System.Action{Rainbow.SdkResult{Rainbow.Model.CalendarState}})"/> to get the calendar synchronization status with "office365" or "google"
            
            Once connected, even if no synchronization status has been asked, this event will be raised if synchronization status with a provider has changed.
            </summary>
        </member>
        <member name="E:Rainbow.Contacts.UserSettingsChanged">
            <summary>
            Event raised when at least one user settings has changed.
            </summary>
        </member>
        <member name="M:Rainbow.Contacts.GetPeerFromContactId(System.String)">
            <summary>
            Get Peer using Contact Id
            </summary>
            <param name="contactId"><see cref="T:System.String"/>Contact Id</param>
            <returns><see cref="T:Rainbow.Model.Peer"/> - PEer object or NULL if failed</returns>
        </member>
        <member name="M:Rainbow.Contacts.IsKnownId(System.String)">
            <summary>
            To know if the specified id is a known id (using the cache): a Contact, a Bot or a Tv.
            </summary>
            <param name="id"><see cref="T:System.String"/>ID to check</param>
            <returns><see cref="T:System.String"/> - "contact", "tv", "bot" or NULL is returned</returns>
        </member>
        <member name="M:Rainbow.Contacts.CreatePresence(System.Boolean,System.String,System.String)">
            <summary>
            Create a <see cref="T:Rainbow.Model.Presence"/> object using Jid and Resource of the current user and the presence level and presence details specified
            </summary>
            <param name="apply"><see cref="T:System.Boolean"/>To know if this presence must be used to build aggregated presence</param>
            <param name="presenceLevel"><see cref="T:System.String"/>Presence level - see <see cref="T:Rainbow.Model.PresenceLevel"/> for possible values</param>
            <param name="presenceDetails"><see cref="T:System.String"/>Presence details - see <see cref="T:Rainbow.Model.PresenceDetails"/> for possible values</param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Contacts.PresencesAreEquals(Rainbow.Model.Presence,Rainbow.Model.Presence)">
            <summary>
            Check if both "Presence" specified are equals - only Presence.PresenceLevel and Presence.PresenceDetails are checked 
            </summary>
            <param name="presence1"><see cref="T:Rainbow.Model.Presence"/>First Presence</param>
            <param name="presence2"><see cref="T:Rainbow.Model.Presence"/>Second Presence</param>
            <returns><see cref="T:System.Boolean"/> - True if both Presence specified are equals (using only PresenceLevel and PresenceDetails)</returns>
        </member>
        <member name="M:Rainbow.Contacts.SetPresenceLevel(Rainbow.Model.Presence,System.Int32,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            To change the presence level of the current contact - a correct match between the presence level and the presence details must be followed in the <see cref="T:Rainbow.Model.Presence"/> object.
            </summary>
            <param name="presence"><see cref="T:Rainbow.Model.Presence"/>The presence object used to set the presence</param>
            <param name="priority"><see cref="T:System.Int32"/>The priority as a integer to set. From 0 to 5 (5 by default)</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - Boolean is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Contacts.SetBusyPresenceAccordingMedias(System.Int32)">
            <summary>
            Set presence according the list of medias provided.
            </summary>
            <param name="medias"><see cref="T:System.Int32"/>List of medias</param>
        </member>
        <member name="M:Rainbow.Contacts.RollbackPresenceSavedFromCurrentContact">
            <summary>
            Rollback presence previously set by <see cref="M:Rainbow.Contacts.SavePresenceFromCurrentContactForRollback"/>.
            Do nothing if if there is no presence saved for rollback.
            </summary>
        </member>
        <member name="M:Rainbow.Contacts.GetPresenceSavedFromCurrentContactForRollback">
            <summary>
            Get the presence  of the current contact previously stored using <see cref="M:Rainbow.Contacts.SavePresenceFromCurrentContactForRollback"/>
            </summary>
            <returns><see cref="T:Rainbow.Model.Presence"/> - Presence object</returns>
        </member>
        <member name="M:Rainbow.Contacts.SavePresenceFromCurrentContactForRollback">
            <summary>
            Save presence of the current contact for rollback purpose - Can be restored using <see cref="M:Rainbow.Contacts.RollbackPresenceSavedFromCurrentContact"/>
            </summary>
        </member>
        <member name="M:Rainbow.Contacts.GetPresencesFromContactJid(System.String)">
            <summary>
            Get presences list of specified contact using Jid
            </summary>
            <param name="jid"><see cref="T:System.String"/>The Jid of the specified contact</param>
            <returns><see cref="T:System.Collections.Generic.Dictionary`2"/> - Dictionary (by resource) of Presences or null if not available</returns>
        </member>
        <member name="M:Rainbow.Contacts.GetPresencesFromContactId(System.String)">
            <summary>
            Get presences list of specified contact using Id
            </summary>
            <param name="id"><see cref="T:System.String"/>The Id of the specified contact</param>
            <returns><see cref="T:System.Collections.Generic.Dictionary`2"/> - Dictionary (by resource) of Presences or null if not available</returns>
        </member>
        <member name="M:Rainbow.Contacts.GetPresencesFromContact(Rainbow.Model.Contact)">
            <summary>
            Get presences list of specified contact
            </summary>
            <param name="contact"><see cref="T:Rainbow.Model.Contact"/> object</param>
            <returns><see cref="T:System.Collections.Generic.Dictionary`2"/> - Dictionary (by resource) of Presences or null if not available</returns>
        </member>
        <member name="M:Rainbow.Contacts.GetPresencesFromCurrentContact">
            <summary>
            Get presences list of the current contact (from all resources)
            </summary>
            <returns><see cref="T:System.Collections.Generic.Dictionary`2"/> - Dictionary (by resource) of Presences or null if not available</returns>
        </member>
        <member name="M:Rainbow.Contacts.GetPresencesFromCurrentContactFromServer(System.Action{Rainbow.SdkResult{System.Collections.Generic.Dictionary{System.String,Rainbow.Model.Presence}}})">
            <summary>
            Get presences list of the current contact (from all resources) asking the server (not using local cache)
            
            Useful if you have set <see cref="P:Rainbow.Restrictions.EventMode"/> equals to <see cref="F:Rainbow.Restrictions.SDKEventMode.NONE"/>
            
            </summary>
            <returns><see cref="T:System.Collections.Generic.Dictionary`2"/> - Dictionary (by resource) of Presences or null if not available</returns>
        </member>
        <member name="M:Rainbow.Contacts.GetPresenceFromCurrentContact">
            <summary>
            Get presence of the current contact using this SDK
            </summary>
            <returns><see cref="T:Rainbow.Model.Presence"/> - Presence object</returns>
        </member>
        <member name="M:Rainbow.Contacts.GetAggregatedPresenceFromContactJid(System.String)">
            <summary>
            Get aggregated presence of specified contact Jid
            
            Aggregated presence is a summarize of all presences from all resources of the specified contact
            </summary>
            <param name="jid"><see cref="T:System.String"/> contact jid</param>
            <returns><see cref="T:Rainbow.Model.Presence"/> - Presence object or null if not available</returns>
        </member>
        <member name="M:Rainbow.Contacts.GetAggregatedPresenceFromContact(Rainbow.Model.Contact)">
            <summary>
            Get aggregated presence of specified contact 
            
            Aggregated presence is a summarize of all presences from all resources of the specified contact
            </summary>
            <param name="contact"><see cref="T:Rainbow.Model.Contact"/> object</param>
            <returns><see cref="T:Rainbow.Model.Presence"/> - Presence object or null if not available</returns>
        </member>
        <member name="M:Rainbow.Contacts.GetAggregatedPresenceFromContactId(System.String)">
            <summary>
            Get aggregated presence of specified contactId
            
            Aggregated presence is a summarize of all presences from all resources of the specified contact
            </summary>
            <param name="contactId"><see cref="T:System.String"/> contact id</param>
            <returns><see cref="T:Rainbow.Model.Presence"/> - Presence object or null if not available</returns>
        </member>
        <member name="M:Rainbow.Contacts.GetAggregatedPresenceFromCurrentContact">
            <summary>
            Get aggregated presence of the current contact
            
            Aggregated presence is a summarize of all presences from all resources of the specified contact
            </summary>
            <returns><see cref="T:Rainbow.Model.Presence"/> - Presence object or null if not available</returns>
        </member>
        <member name="M:Rainbow.Contacts.GetAggregatedPresence(System.Collections.Generic.Dictionary{System.String,Rainbow.Model.Presence})">
            <summary>
            Get aggregated Presence based on list of presences provided (by resource)
            </summary>
            <param name="presences"><see cref="T:System.Collections.Generic.Dictionary{String, Presence}"/>List of Presences by resource</param>
            <returns><see cref="T:Rainbow.Model.Presence"/> The aggreagated presence</returns>
        </member>
        <member name="M:Rainbow.Contacts.GetAllAggregatedPresences">
            <summary>
            Get all aggregated presences of contacts indexed by "Basic Jid Node" (cf. <see cref="M:Rainbow.Util.GetBasicNodeJid(System.String)"/>)
            </summary>
            <returns><see cref="T:Dictionary{string, Presence}"/> - Dictionnary of all aggregated presences of contacts indexed by "Basic Jid Node"</returns>
        </member>
        <member name="M:Rainbow.Contacts.GetAllPresences">
            <summary>
            Get all presences of contacts indexed by "Basic Jid Node" (cf. <see cref="M:Rainbow.Util.GetBasicNodeJid(System.String)"/>)
            </summary>
            <returns><see cref="T:Dictionary{string, Presence}"/> - Dictionnary of  all all aggregated presences of contacts indexed by "Basic Jid Node"</returns>
        </member>
        <member name="M:Rainbow.Contacts.GetCurrentContact">
            <summary>
            To get <see cref="T:Rainbow.Model.Contact" /> object of the current contact.
            </summary>
            <returns><see cref="T:Rainbow.Model.Contact"/> - Contact object or NULL if not found</returns>
        </member>
        <member name="M:Rainbow.Contacts.GetCurrentContactId">
            <summary>
            To get the ID of the current contact
            </summary>
            <returns><see cref="T:System.String"/> - ID of the current contact</returns>
        </member>
        <member name="M:Rainbow.Contacts.GetCurrentContactJid">
            <summary>
            To get the Jid of the current contact
            </summary>
            <returns><see cref="T:System.String"/> - Jid of the current contact</returns>
        </member>
        <member name="M:Rainbow.Contacts.UpdateCurrentContact(Rainbow.Model.Contact,System.Action{Rainbow.SdkResult{Rainbow.Model.Contact}})">
            <summary>
            To update current contact information. Only the current contact can be updated.
            </summary>
            <param name="contact"><see cref="T:Rainbow.Model.Contact" /> object used to update information</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Contact}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.Contact"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Contacts.GetCurrentCompanyId">
            <summary>
            Get Company Id of the current user 
            </summary>
            <returns><see cref="T:System.String"/> - Company Id or null</returns>
        </member>
        <member name="M:Rainbow.Contacts.GetCurrentCompanyFromCache">
            <summary>
            Get Company of the current user using cache info
            </summary>
            <returns><see cref="T:Rainbow.Model.Company"/> - Company object or null</returns>
        </member>
        <member name="M:Rainbow.Contacts.GetCurrentCompany(System.Action{Rainbow.SdkResult{Rainbow.Model.Company}})">
            <summary>
            Get Company of the current user from server
            </summary>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Company}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.Company"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Contacts.GetCompany(System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.Company}})">
            <summary>
            Get Company using the Company Id
            </summary>
            <param name="companyId"><see cref="T:System.String"/>Company ID</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Company}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.Company"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Contacts.SearchContactsByTag(System.String,System.Int32,System.Action{Rainbow.SdkResult{Rainbow.Model.SearchContactsResult}},System.String)">
            <summary>
            To search contacts by 'tag'. This search is using several fields: firstName, lastName, jobTitle, companyName and tags. 
            
            The result comes from only source:
            * Rainbow public users and users being in companies visible by logged in user's company. 
            
            It's possible to set the maximum number of results
            </summary>
            <param name="value"><see cref="T:System.String"/>A string used to perform the search (with at least two caracters)</param>
            <param name="nbMaxResults"><see cref="T:System.Int32"/>The maximum number of results expected (no more than 20) </param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{SearchByDisplayNameResult}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.SearchContactsResult"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
            <param name="companyId"><see cref="T:System.String"/>The ID company to restrict the search or an empty value</param>
        </member>
        <member name="M:Rainbow.Contacts.SearchContactsByDisplayName(System.String,System.Int32,System.Action{Rainbow.SdkResult{Rainbow.Model.SearchContactsResult}},System.String)">
            <summary>
            To search contacts by their names. 
            
            The result comes from 3 distinct sources:
            * Rainbow public users and users being in companies visible by logged in user's company. 
            * Phonebook  of the user's company (if users has the permission) - 
            * Office 365 Active Directory of the user's company (if users has the permission)
            * Directory of the user's company (if users has the permission)
            
            It's possible to set the maximum number (cannot be greater than 20) of results but it's for each source
            
            The search is done by: [first name], [last name], [first and last name] and [last and first name]
            </summary>
            <param name="value"><see cref="T:System.String"/>A string used to perform the search (with at least two caracters)</param>
            <param name="nbMaxResults"><see cref="T:System.Int32"/>The maximum number of results expected (no more than 20) on each source</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{SearchContactsResult}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.SearchContactsResult"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
            <param name="companyId"><see cref="T:System.String"/>The ID company to restrict the search or an empty value</param>
        </member>
        <member name="M:Rainbow.Contacts.SearchContactByPhoneNumber(System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.SearchContactsResult}},System.String)">
            <summary>
            To search contacts by phone number
            
            The result comes from 4 distinct sources:
            * Rainbow public users and users being in companies visible by logged in user's company. The API search for users having the provided E164 number filled in their profile
            * Phonebook  of the user's company (if users has the permission) - 
            * Office 365 Active Directory of the user's company (if users has the permission)
            * Directory of the user's company (if users has the permission)
            
            Whatever the source an exact match is expected to have a result
            </summary>
            <param name="value"><see cref="T:System.String"/>A string used to perform the search (with at least 3 caracters)</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{SearchContactsResult}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.SearchContactsResult"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
            <param name="companyId"><see cref="T:System.String"/>The ID company to restrict the search or an empty value</param>
        </member>
        <member name="M:Rainbow.Contacts.SearchContactByEmails(System.Collections.Generic.List{System.String},System.Action{Rainbow.SdkResult{Rainbow.Model.SearchContactsResult}})">
            <summary>
            To search contacts by emails list
            
            The result comes from only one source
            * Rainbow public users and users being in companies visible by logged in user's company. 
            
            The maximum number of loginEmails allowed to be provided is 1000. No contact is returned if it's the case
            </summary>
            <param name="emails"><see cref="T:System.Collections.Generic.List`1"/>A list of email to find</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{SearchContactsResult}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.SearchContactsResult"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Contacts.IsContactId(System.String)">
            <summary>
            To know if the specified id is related to a Contact (the cache is used to perform the test)
            </summary>
            <param name="id"><see cref="T:System.String"/>Id</param>
            <returns>True if this is related to a Contact</returns>
        </member>
        <member name="M:Rainbow.Contacts.GetAllContactsFromCache">
            <summary>
            To get the full list of <see cref="T:Rainbow.Model.Contact" /> objects stored in the cache.
            </summary>
            <returns><see cref="T:System.Collections.Generic.List`1"/> - List of <see cref="T:Rainbow.Model.Contact"/></returns>
        </member>
        <member name="M:Rainbow.Contacts.GetAllContactsInRoster(System.Action{Rainbow.SdkResult{System.Collections.Generic.List{Rainbow.Model.Contact}}})">
            <summary>
            To get the full list of <see cref="T:Rainbow.Model.Contact" /> objects stored in the cache which are in the roster
            </summary>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{List{Contact}}}"/>Callback fired when the operation is done - List of <see cref="T:Rainbow.Model.Contact"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Contacts.GetAllContactsInRosterFromServer(System.Action{Rainbow.SdkResult{System.Collections.Generic.List{Rainbow.Model.Contact}}})">
            <summary>
            To get the full list of <see cref="T:Rainbow.Model.Contact" /> objects stored from the server which are in roster
            </summary>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{List{Contact}}}"/>Callback fired when the operation is done - List of <see cref="T:Rainbow.Model.Contact"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Contacts.GetContactFromContactId(System.String)">
            <summary>
            To get <see cref="T:Rainbow.Model.Contact" /> object of the specified contact ID.
            
            The cache is used by this method
            </summary>
            <param name="contactId"><see cref="T:System.String"/>The contact ID to retrieve</param>
            <returns><see cref="T:Rainbow.Model.Contact"/> - Contact object or NULL if not found</returns>
        </member>
        <member name="M:Rainbow.Contacts.GetContactFromContactJid(System.String)">
            <summary>
            To get <see cref="T:Rainbow.Model.Contact" /> object of the specified contact JID.
            
            The cache is used by this method
            </summary>
            <param name="jid"><see cref="T:System.String"/>The contact Jid to retrieve or its basic node jid - see <see cref="M:Rainbow.Util.GetBasicNodeJid(System.String)"/></param>
            <returns><see cref="T:Rainbow.Model.Contact"/> - Contact object or NULL if not found</returns>
        </member>
        <member name="M:Rainbow.Contacts.RemoveFromContactId(System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            To remove from roster a contact using its contact ID. This contact is not removed from the cache
            </summary>
            <param name="contactId"><see cref="T:System.String"/>The contact ID to remove</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - Boolean is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Contacts.GetContactFromContactIdFromServer(System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.Contact}})">
            <summary>
            To get <see cref="T:Rainbow.Model.Contact" /> information based on contact ID directly from server. The cache is updated in consequence
            
            If this contact was not already in cache, the event ContactAdded is raised.
            </summary>
            <param name="contactId"><see cref="T:System.String"/>The contact Id to retrieve</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Contact}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.Contact"/> object is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Contacts.GetContactFromContactJidFromServer(System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.Contact}})">
            <summary>
            To get <see cref="T:Rainbow.Model.Contact" /> information based on JID directly from server. The cache is updated in consequence
            
            If this contact was not already in cache, the event ContactAdded is raised.
            </summary>
            <param name="jid"><see cref="T:System.String"/>The jid to retrieve</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Contact}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.Contact"/> object is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Contacts.GetContactIdFromContactJid(System.String)">
            <summary>
            To get Contact ID of the specified contact JID.
            
            The cache is used by this method
            </summary>
            <param name="jid"><see cref="T:System.String"/>The contact Jid to retrieve</param>
            <returns><see cref="T:System.String"/> - A contact ID or NULL if not found</returns>
        </member>
        <member name="M:Rainbow.Contacts.UpdateAvatarFromCurrentContact(System.Byte[]@,System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            Update the avatar of the current contact. Only JPG and PNG format are supported. The previous avatar is definitively lost if the update is performed with success.
            </summary>
            <param name="data"><see cref="T:Byte[]"/>Byte array storing the new avatar</param>
            <param name="format"><see cref="T:System.String"/>'PNG' or 'JPG' - to know the format of the image store in the byte array</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - Boolean is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Contacts.DeleteAvatarFromCurrentContact(System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            Delete the avatar of the current contact
            </summary>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - Boolean is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Contacts.GetAvatarFromContactId(System.String,System.Int32,System.Action{Rainbow.SdkResult{System.Byte[]}})">
            <summary>
            Get the avatar of the specified contact Id from the server with the specified size.
            </summary>
            <param name="id"><see cref="T:System.String"/>contact Id</param>
            <param name="size"><see cref="T:System.Int32"/>Specify avatar size in pixels (square size x size). Default value: 80. Max Value: 512. The image is not resized if the expected size is greater than the image stored on server side.</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{byte[]}}"/>Callback fired when the operation is done - <see cref="T:byte[]"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs. Image can be null is user as no Avatar</param>
        </member>
        <member name="M:Rainbow.Contacts.GetAvatarFromCurrentContact(System.Int32,System.Action{Rainbow.SdkResult{System.Byte[]}})">
            <summary>
            Get the avatar of the current contact from the server with the specified size.
            </summary>
            <param name="size"><see cref="T:System.Int32"/>Specify avatar size in pixels (square size x size). Default value: 80. Max Value: 512. The image is not resized if the expected size is greater than the image stored on server side.</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{byte[]}}"/>Callback fired when the operation is done - <see cref="T:byte[]"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Contacts.GetAllBots">
            <summary>
            To get the full list of <see cref="T:Rainbow.Model.Bot"/> objects stored in the cache.
            </summary>
            <returns><see cref="T:System.Collections.Generic.List`1"/> - List of <see cref="T:Rainbow.Model.Bot"/> objects stored in the cache.</returns>
        </member>
        <member name="M:Rainbow.Contacts.GetAllBotsFromServer(System.Action{Rainbow.SdkResult{System.Collections.Generic.List{Rainbow.Model.Bot}}})">
            <summary>
            To get the full list of <see cref="T:Rainbow.Model.Bot"/> objects from the server
            </summary>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{List{Bot}}}"/>Callback fired when the operation is done - List of <see cref="T:Rainbow.Model.Bot"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Contacts.GetBotFromBotIdFromServer(System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.Bot}})">
            <summary>
            To get <see cref="T:Rainbow.Model.Bot" /> object from the specified Bot ID from server
            </summary>
            <param name="botId"><see cref="T:System.String"/>The Bot ID to retrieve</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Bot}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.Bot"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Contacts.GetBotFromBotId(System.String)">
            <summary>
            To get <see cref="T:Rainbow.Model.Bot" /> object from the specified Bot ID.
            
            The cache is used by this method
            </summary>
            <param name="botId"><see cref="T:System.String"/>The Bot ID to retrieve</param>
            <returns><see cref="T:Rainbow.Model.Bot"/> - Bot object or NULL if not found</returns>
        </member>
        <member name="M:Rainbow.Contacts.GetBotFromBotJid(System.String)">
            <summary>
            To get <see cref="T:Rainbow.Model.Bot" /> object from the specified Bot Jid.
            
            The cache is used by this method
            </summary>
            <param name="botJid"><see cref="T:System.String"/>The Bot Jid to retrieve</param>
            <returns><see cref="T:Rainbow.Model.Bot"/> - Bot object or NULL if not found</returns>
        </member>
        <member name="M:Rainbow.Contacts.GetBotIdFromBotJid(System.String)">
            <summary>
            To get Bot Id object from the specified Bot Jid.
            
            The cache is used by this method
            </summary>
            <param name="botJid"><see cref="T:System.String"/>The Bot Jid to retrieve</param>
            <returns><see cref="T:System.String"/> - Bot Id or NULL if not found</returns>   q
        </member>
        <member name="M:Rainbow.Contacts.IsBotId(System.String)">
            <summary>
            To know if the specified id is related to a Bot (the cache is used to perform the test)
            </summary>
            <param name="id"><see cref="T:System.String"/>Id</param>
            <returns>True if this is related to a Bot</returns>
        </member>
        <member name="M:Rainbow.Contacts.GetUserSettingBooleanValue(System.String)">
            <summary>
            To get the value (as boolean) of the user setting specified
            </summary>
            <param name="name"><see cref="T:System.String"/>Name of the user setting</param>
            <returns><see cref="T:System.Boolean"/> - Returns null if user settings is not found or it has not a Boolean as value. Else returns the Boolean of the user setting</returns>
        </member>
        <member name="M:Rainbow.Contacts.GetUserSettingStringValue(System.String)">
            <summary>
            To get the value (as string) of the user setting specified
            </summary>
            <param name="name"><see cref="T:System.String"/>Name of the user setting</param>
            <returns><see cref="T:System.Boolean"/> - Returns null if user settings is not found or it has not a String as value. Else returns the String of the user setting</returns>
        </member>
        <member name="M:Rainbow.Contacts.GetUserSettings">
            <summary>
            To get all user settings (name and value) stored in a <see cref="T:Dictionary{String, Object}"/>
            </summary>
            <returns><see cref="T:Dictionary{String, Object}"/> - Returns user settings (name and value)</returns>
        </member>
        <member name="M:Rainbow.Contacts.UpdateUserSetting(System.String,System.Object,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            To update, on server side and locally, the value of a user setting
            </summary>
            <param name="name"><see cref="T:System.String"/>User setting name</param>
            <param name="value"><see cref="T:System.Object"/>User setting value</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Contacts.GetSynchroProviderStatusList">
            <summary>
            Get the list of synchronisation status stored. 
            
            Even after the SDK has been connected and initialized, no synchronization status is available.
            
            It's necessary to use:
            
            - <see cref="M:Rainbow.Contacts.GetTeamsPresenceStateFromCurrentContact(System.Action{Rainbow.SdkResult{Rainbow.Model.TeamsPresenceState}})"/> to get the presence synchronization status with Teams
            
            - <see cref="M:Rainbow.Contacts.GetCalendarStateFromCurrentContact(System.Action{Rainbow.SdkResult{Rainbow.Model.CalendarState}})"/> to get the calendar synchronization status with "office365" or "google"
            
            Once connected, even if no synchronization status has been asked, the list will be updated and the event <see cref="E:Rainbow.Contacts.SynchroProviderStatusChanged"/> will be raised if synchronization status with a provider has changed.
            </summary>
            <returns><see cref="T:List{SynchroProviderStatus}}"/> - List of <see cref="T:Rainbow.Model.SynchroProviderStatus"/></returns>
        </member>
        <member name="M:Rainbow.Contacts.GetTeamsPresenceStateFromCurrentContact(System.Action{Rainbow.SdkResult{Rainbow.Model.TeamsPresenceState}})">
            <summary>
            To get teams presence state of the current contact.
            
            Teams presence is available only if the current user has previously enabled calendar synchronization in office 365.
            </summary>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{CalendarState}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.TeamsPresenceState"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Contacts.GetTeamsPresenceStateFromContactId(System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.TeamsPresenceState}})">
            <summary>
            Get teams presence  of the specified contact id
            </summary>
            <param name="contactId"><see cref="T:System.String"/>Contact Id</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{CalendarState}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.TeamsPresenceState"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Contacts.GetTeamsPresenceStatesFromContactsId(System.Collections.Generic.List{System.String},System.Action{Rainbow.SdkResult{Rainbow.Model.TeamsPresenceState}})">
            <summary>
            Get teams presence states of the specified list of contact id
            </summary>
            <param name="contactsId"><see cref="T:System.Collections.Generic.List`1"/>List of contact Id</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{TeamsPresenceState}}"/>Callback fired when the operation is done - List of <see cref="T:Rainbow.Model.TeamsPresenceState"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Contacts.RegisterCalendar(System.String,System.Boolean,System.String,System.Action{Rainbow.SdkResult{System.String}})">
            <summary>
            To register to a third party calendar. A URL is returned to performe an authentication usinh OAuth
            
            The requesting client get a redirection URL or could be redirected immediately to the provider login page to gather user consent.
            </summary>
            <param name="type"><see cref="T:System.String"/>The name of the third party calendar: office365, google </param>
            <param name="redirect"><see cref="T:System.Boolean"/>Immediately redirect to login page (OAuth2) or generate an HTML page.</param>
            <param name="redirectUrl"><see cref="T:System.String"/>The redirect URL to use if redirect is set to true </param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{String}}"/>Callback fired when the operation is done - A URL (i.e. a String) is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Contacts.UnregisterCalendar(System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            To unregister to a third party calendar.
            </summary>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done -True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Contacts.EnableCalendar(System.Boolean,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            To enable (or disable) calendar sharing of the current contact
            </summary>
            <param name="enable"><see cref="T:System.Boolean"/>True to enable / False to disable calendar sharing</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Contacts.GetCalendarStateFromCurrentContact(System.Action{Rainbow.SdkResult{Rainbow.Model.CalendarState}})">
            <summary>
            To get calendar state of the current contact
            </summary>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{CalendarState}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.CalendarState"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Contacts.GetCalendarStateFromContactId(System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.CalendarState}})">
            <summary>
            Get calendar state of the specified contact id
            </summary>
            <param name="contactId"><see cref="T:System.String"/>Contact Id</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{CalendarState}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.CalendarState"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Contacts.GetCalendarStatesFromContactsId(System.Collections.Generic.List{System.String},System.Action{Rainbow.SdkResult{Rainbow.Model.CalendarStateResult}})">
            <summary>
            Get calendar states of the specified list of contact id
            </summary>
            <param name="contactsId"><see cref="T:System.Collections.Generic.List`1"/>List of contact Id</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{CalendarState}}"/>Callback fired when the operation is done - List of <see cref="T:Rainbow.Model.CalendarState"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Contacts.GetCalendarOutOfOfficeStateFromCurrentContact(System.Action{Rainbow.SdkResult{Rainbow.Model.CalendarOutOfOfficeState}})">
            <summary>
            To get calendar "Out of office" state of the current contact
            </summary>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{CalendarOutOfOfficeState}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.CalendarOutOfOfficeState"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Contacts.GetCalendarOutOfOfficeStateFromContactId(System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.CalendarOutOfOfficeState}})">
            <summary>
            To get calendar "Out of office" state of the specified contact id
            
            This API will return valid information **ONLY** if the specified contact is in the same Organization of the current contact.
            </summary>
            <param name="contactId"><see cref="T:System.String"/>Contact Id</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{CalendarOutOfOfficeState}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.CalendarOutOfOfficeState"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Contacts.GetAllTvs">
            <summary>
            To get the full list of <see cref="T:Rainbow.Model.TV"/> objects stored in the cache.
            </summary>
            <returns><see cref="T:System.Collections.Generic.List`1"/> - List of <see cref="T:Rainbow.Model.TV"/> objects stored in the cache.</returns>
        </member>
        <member name="M:Rainbow.Contacts.GetAllTvsFromServer(System.String,System.Action{Rainbow.SdkResult{System.Collections.Generic.List{Rainbow.Model.TV}}})">
            <summary>
            To get the full list of <see cref="T:Rainbow.Model.TV"/> objects from the server limited to the specified company id.
            </summary>
            <param name="companyId"><see cref="T:System.String"/>Company ID - If not specified/ NULL, the company id of the current user is used</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{List{TV}}}"/>Callback fired when the operation is done - List of <see cref="T:Rainbow.Model.TV"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Contacts.GetTvFromTvId(System.String)">
            <summary>
            To get <see cref="T:Rainbow.Model.TV" /> object from the specified Tv ID.
            
            The cache is used by this method
            </summary>
            <param name="tvId"><see cref="T:System.String"/>Tv ID</param>
            <returns><see cref="T:Rainbow.Model.TV"/> - Tv object or NULL if not found</returns>
        </member>
        <member name="M:Rainbow.Contacts.GetTvFromUserId(System.String)">
            <summary>
            To get <see cref="T:Rainbow.Model.TV" /> object from the specified User Id.
            
            The cache is used by this method
            </summary>
            <param name="userId"><see cref="T:System.String"/>User Id</param>
            <returns><see cref="T:Rainbow.Model.TV"/> - TV object or NULL if not found</returns>
        </member>
        <member name="M:Rainbow.Contacts.GetTvIdFromUserId(System.String)">
            <summary>
            To get TV Id object from the specified User Id.
            
            The cache is used by this method
            </summary>
            <param name="userId"><see cref="T:System.String"/>User Id</param>
            <returns><see cref="T:System.String"/> - TV Id or NULL if not found</returns>
        </member>
        <member name="M:Rainbow.Contacts.IsTvId(System.String)">
            <summary>
            To know if the specified id is related to a TV (the cache is used to perform the test)
            </summary>
            <param name="id"><see cref="T:System.String"/>Id</param>
            <returns>True if this is related to a TV</returns>
        </member>
        <member name="M:Rainbow.Contacts.CreateDirectoryContact(Rainbow.Model.DirectoryContact,System.Action{Rainbow.SdkResult{Rainbow.Model.DirectoryContact}})">
            <summary>
            To create a <see cref="T:Rainbow.Model.DirectoryContact"/> in the the personal directory.
            
            At least one of this property must be not null/empty: FirstName, LastName or CompanyName.
            
            To create Company Directory use <see cref="M:Rainbow.Administration.CreateDirectoryContact(Rainbow.Model.DirectoryContact,System.Action{Rainbow.SdkResult{Rainbow.Model.DirectoryContact}})"/>
            
            </summary>
            <param name="directoryContact"><see cref="T:Rainbow.Model.DirectoryContact"/> the directory contact to create</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{DirectoryContact}}"/> Callback fired when the operation is done - <see cref="T:Rainbow.Model.DirectoryContact"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs. Image can be null is user as no Avatar</param>
        </member>
        <member name="M:Rainbow.Contacts.UpdateDirectoryContact(Rainbow.Model.DirectoryContact,System.Action{Rainbow.SdkResult{Rainbow.Model.DirectoryContact}})">
            <summary>
            To update a <see cref="T:Rainbow.Model.DirectoryContact"/> in the personal directory.
            
            "Id" property is mandatory
            
            At least one of this property must be not null/empty: FirstName, LastName or CompanyName.
            
            </summary>
            <param name="directoryContact"><see cref="T:Rainbow.Model.DirectoryContact"/> The directory contact to update</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{DirectoryContact}}"/> Callback fired when the operation is done - <see cref="T:Rainbow.Model.DirectoryContact"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs. Image can be null is user as no Avatar</param>
        </member>
        <member name="M:Rainbow.Contacts.DeleteDirectoryContact(System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            To delete a <see cref="T:Rainbow.Model.DirectoryContact"/> in the company directory or the personal directory.
            </summary>
            <param name="id"><see cref="T:System.String"/> Id of the Directory Contact</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Contacts.GetDirectoryContact(System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.DirectoryContact}})">
            <summary>
            To get a <see cref="T:Rainbow.Model.DirectoryContact"/> from the personal directory.
            </summary>
            <param name="id"><see cref="T:System.String"/> Id of the Directory Contact</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{DirectoryContact}}"/> Callback fired when the operation is done - <see cref="T:Rainbow.Model.DirectoryContact"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs. Image can be null is user as no Avatar</param>
        </member>
        <member name="M:Rainbow.Contacts.GetDirectoryContactsList(System.Int32,System.Int32,System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.DirectoryContactsListData}})">
            <summary>
            To get a list of <see cref="T:Rainbow.Model.DirectoryContact"/> objects.
            
            Use "view" property if you want to retrieve personal directory contacts, company directory contacts or both.
            
            </summary>
            <param name="limit"><see cref="T:System.Int32"/> Limit of DirectoryContact to retrieve (100 by default)</param>
            <param name="offset"><see cref="T:System.Int32"/> Offset to use to retrieve DirectoryContact - if offset > total, no result is returned</param>
            <param name="view"><see cref="T:System.String"/> To retreive "personal", "company" or "all" (default value) DirectoryContact</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{ApplicationsInfoData}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.DirectoryContactsListData"/> object is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="T:Rainbow.Conversations">
            <summary>
            This object is available only using <see cref="M:Rainbow.Application.GetConversations"/> from <see cref="T:Rainbow.Application"/> object.
            
            This class is used to get / set / update info about any <see cref="T:Rainbow.Model.Conversation" />.
            
            A cache is used internally and updated automatically when a Conversation is added, updated, removed
            </summary>
        </member>
        <member name="E:Rainbow.Conversations.ConversationCreated">
            <summary>
            Event fired when a conversation has been created
            
             The <see cref="T:Rainbow.Events.ConversationEventArgs" /> object permits to know all the details of the conversation
            </summary>
        </member>
        <member name="E:Rainbow.Conversations.ConversationRemoved">
            <summary>
            Event fired when a conversation has been removed
            
             The <see cref="T:Rainbow.Events.ConversationEventArgs" /> object permits to know all the details of the conversation
            </summary>
        </member>
        <member name="E:Rainbow.Conversations.ConversationUpdated">
            <summary>
            Event fired when a conversation has been updated
            
             The <see cref="T:Rainbow.Events.ConversationEventArgs" /> object permits to know all the details of the conversation
            </summary>
        </member>
        <member name="M:Rainbow.Conversations.GetAllConversationsFromCache">
            <summary>
            Get the full list of conversations from the cache
            </summary>
            <returns><see cref="T:System.Collections.Generic.List`1"/> - List of <see cref="T:Rainbow.Model.Conversation"/></returns>
        </member>
        <member name="M:Rainbow.Conversations.GetAllConversations(System.Action{Rainbow.SdkResult{System.Collections.Generic.List{Rainbow.Model.Conversation}}})">
            <summary>
            Get the full list of conversations already created from server
            </summary>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{List{Conversation}}}"/>Callback fired when the operation is done - List of <see cref="T:Rainbow.Model.Conversation"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Conversations.GetMutedConversations(System.Action{Rainbow.SdkResult{System.Collections.Generic.List{Rainbow.Model.Conversation}}})">
            <summary>
            Get the full list of muted conversations already created
            </summary>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{List{Conversation}}}"/>Callback fired when the operation is done - List of <see cref="T:Rainbow.Model.Conversation"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Conversations.GetUnmutedConversations(System.Action{Rainbow.SdkResult{System.Collections.Generic.List{Rainbow.Model.Conversation}}})">
            <summary>
            Get the full list of unmuted conversations already created
            </summary>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{List{Conversation}}}"/>Callback fired when the operation is done - List of <see cref="T:Rainbow.Model.Conversation"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Conversations.RemoveFromConversations(Rainbow.Model.Conversation,System.Action{Rainbow.SdkResult{Rainbow.Model.Conversation}})">
            <summary>
            Delete the specified conversation
            </summary>
            <param name="conversation"><see cref="T:Rainbow.Model.Conversation"/>The conversation object to delete</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Conversation}}"/>Callback fired when the operation is done - List of <see cref="T:Rainbow.Model.Conversation"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Conversations.RemoveFromConversationsById(System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.Conversation}})">
            <summary>
            Delete the specified conversation using its ID
            </summary>
            <param name="conversationId"><see cref="T:System.String"/>ID of the conversation to delete</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Conversation}}"/>Callback fired when the operation is done - List of <see cref="T:Rainbow.Model.Conversation"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Conversations.MuteConversationById(System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.Conversation}})">
            <summary>
            Mute the specified conversation
            </summary>
            <param name="conversationId"><see cref="T:System.String"/>ID of the conversation to mute or unmute</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Conversation}}"/>Callback fired when the operation is done - List of <see cref="T:Rainbow.Model.Conversation"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Conversations.UnmuteConversation(System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.Conversation}})">
            <summary>
            Mute the specified conversation
            </summary>
            <param name="conversationId"><see cref="T:System.String"/>ID of the conversation to mute or unmute</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Conversation}}"/>Callback fired when the operation is done - List of <see cref="T:Rainbow.Model.Conversation"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Conversations.MuteOrUnmuteConversationById(System.String,System.Boolean,System.Action{Rainbow.SdkResult{Rainbow.Model.Conversation}})">
            <summary>
            Mute or Unmute the specified conversation
            </summary>
            <param name="conversationId"><see cref="T:System.String"/>ID of the conversation to mute or unmute</param>
            <param name="isMuted"><see cref="T:System.Boolean"/>Boolena to know if the converastion must be muted or unmute</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Conversation}}"/>Callback fired when the operation is done - List of <see cref="T:Rainbow.Model.Conversation"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Conversations.GetConversationFromBot(Rainbow.Model.Bot,System.Action{Rainbow.SdkResult{Rainbow.Model.Conversation}})">
            <summary>
            Get the conversation from the specified bot
            </summary>
            <param name="bot"><see cref="T:Rainbow.Model.Bot"/> object</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Conversation}}"/>Callback fired when the operation is done - List of <see cref="T:Rainbow.Model.Conversation"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Conversations.GetConversationFromBotId(System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.Conversation}})">
            <summary>
            Get the conversation from the specified bot id
            </summary>
            <param name="botId"><see cref="T:System.String"/>the ID of the bot</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Conversation}}"/>Callback fired when the operation is done - List of <see cref="T:Rainbow.Model.Conversation"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Conversations.GetConversationFromContact(Rainbow.Model.Contact,System.Action{Rainbow.SdkResult{Rainbow.Model.Conversation}})">
            <summary>
            Get the conversation from the specified contact
            </summary>
            <param name="contact"><see cref="T:Rainbow.Model.Contact"/> object</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Conversation}}"/>Callback fired when the operation is done - List of <see cref="T:Rainbow.Model.Conversation"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Conversations.GetConversationFromContactId(System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.Conversation}})">
            <summary>
            Get the conversation from the specified contact
            </summary>
            <param name="contactId"><see cref="T:System.String"/>the ID of the contact</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Conversation}}"/>Callback fired when the operation is done - List of <see cref="T:Rainbow.Model.Conversation"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Conversations.GetConversationFromBubble(Rainbow.Model.Bubble,System.Action{Rainbow.SdkResult{Rainbow.Model.Conversation}})">
            <summary>
            Get the conversation from the specified bubble
            </summary>
            <param name="bubble"><see cref="T:Rainbow.Model.Bubble"/>Bubble object</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Conversation}}"/>Callback fired when the operation is done - List of <see cref="T:Rainbow.Model.Conversation"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Conversations.GetConversationFromBubbleId(System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.Conversation}})">
            <summary>
            Get the conversation from the specified bubble
            </summary>
            <param name="bubbleId"><see cref="T:System.String"/>the ID of the bubble</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Conversation}}"/>Callback fired when the operation is done - List of <see cref="T:Rainbow.Model.Conversation"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Conversations.GetConversationByIdFromCache(System.String)">
            <summary>
            Get the specified conversation using the cache
            </summary>
            <param name="conversationId"><see cref="T:System.String"/>ID of the conversation to found</param>
            <returns><see cref="T:Rainbow.Model.Conversation"/> - Conversation object or NULL if not found</returns>
        </member>
        <member name="M:Rainbow.Conversations.GetConversationByPeerIdFromCache(System.String)">
            <summary>
            Get the specified conversation using the cache
            </summary>
            <param name="peerId"><see cref="T:System.String"/>Peer Id of the conversation to found</param>
            <returns><see cref="T:Rainbow.Model.Conversation"/> - Conversation object or NULL if not found</returns>
        </member>
        <member name="M:Rainbow.Conversations.GetConversationByJidFromCache(System.String)">
            <summary>
            Get the specified conversation using the cache
            </summary>
            <param name="conversationJid"><see cref="T:System.String"/>Jid of the conversation to found</param>
            <returns><see cref="T:Rainbow.Model.Conversation"/> - Conversation object or NULL if not found</returns>
        </member>
        <member name="M:Rainbow.Conversations.GetConversationIdByPeerIdFromCache(System.String)">
            <summary>
            Get the specified conversation using the cache
            </summary>
            <param name="peerId"><see cref="T:System.String"/>ID of the contact to found</param>
            <returns><see cref="T:System.String"/> - ID of the conversation if found or NULL</returns>
        </member>
        <member name="M:Rainbow.Conversations.GetConversationIdByJidFromCache(System.String)">
            <summary>
            Get the specified conversation using the cache
            </summary>
            <param name="conversationJid"><see cref="T:System.String"/>Jid of the conversation to found</param>
            <returns><see cref="T:System.String"/> - ID of the conversation if found or NULL</returns>
        </member>
        <member name="M:Rainbow.Conversations.GetOrCreateConversationFromBubbleId(System.String)">
            <summary>
            Get conversation using Bubble Id from cache but, if no exists, creates it on server
            </summary>
            <param name="bubbleId"><see cref="T:System.String"/>Bubble Id</param>
            <returns><see cref="T:Rainbow.Model.Conversation"/> or NULL it the creation is not possible</returns>
        </member>
        <member name="M:Rainbow.Conversations.GetOrCreateConversationFromUserId(System.String)">
            <summary>
            Get conversation using User Id from cache but, if no exists, creates it on server
            </summary>
            <param name="userId"><see cref="T:System.String"/>Userd Id</param>
            <returns><see cref="T:Rainbow.Model.Conversation"/> or NULL it the creation is not possible</returns>
        </member>
        <member name="M:Rainbow.Conversations.GetOrCreateConversationFromBotId(System.String)">
            <summary>
            Get conversation using Bot Id from cache but, if no exists, creates it on server
            </summary>
            <param name="BotId"><see cref="T:System.String"/>Bot Id</param>
            <returns><see cref="T:Rainbow.Model.Conversation"/> or NULL it the creation is not possible</returns>
        </member>
        <member name="T:Rainbow.Events.AckMessageEventArgs">
            <summary>
            Content of the Event raised when an AckMessage is received
            </summary>
        </member>
        <member name="P:Rainbow.Events.AckMessageEventArgs.AckMessage">
            <summary>
            <see cref="T:Rainbow.Model.AckMessage"/> - AckMessage object
            </summary>
        </member>
        <member name="M:Rainbow.Events.AckMessageEventArgs.#ctor(Rainbow.Model.AckMessage)">
            <summary>
            Initializes a new instance of the AckMessageEventArgs class.
            </summary>
            <param name="ackMessage"><see cref="P:Rainbow.Events.AckMessageEventArgs.AckMessage"/>AckMessage object</param>
        </member>
        <member name="T:Rainbow.Events.AdHocCommandEventArgs">
            <summary>
            Content of the Event raised when an AdHocCommand is received
            </summary>
        </member>
        <member name="P:Rainbow.Events.AdHocCommandEventArgs.AdHocCommand">
            <summary>
            <see cref="T:Rainbow.Model.AdHocCommand"/> - AdHocCommand object
            </summary>
        </member>
        <member name="M:Rainbow.Events.AdHocCommandEventArgs.#ctor(Rainbow.Model.AdHocCommand)">
            <summary>
            Initializes a new instance of the AdHocCommandEventArgs class.
            </summary>
            <param name="adHocCommand"><see cref="P:Rainbow.Events.AdHocCommandEventArgs.AdHocCommand"/>AdHocCommand object</param>
        </member>
        <member name="T:Rainbow.Events.AlertMessageEventArgs">
            <summary>
            Event fired when the current user recevied an alert message
            </summary>
        </member>
        <member name="P:Rainbow.Events.AlertMessageEventArgs.AlertMessage">
            <summary>
            <see cref="P:Rainbow.Events.AlertMessageEventArgs.AlertMessage"/> - The Alert Message
            </summary>
        </member>
        <member name="M:Rainbow.Events.AlertMessageEventArgs.#ctor(Rainbow.Model.AlertMessage)">
            <summary>
            Initializes a new instance of the AlertMessageEventArgs class.
            </summary>
            <param name="alertMessage"><see cref="P:Rainbow.Events.AlertMessageEventArgs.AlertMessage"/>Alert message</param>
        </member>
        <member name="T:Rainbow.Events.BooleanEventArgs">
            <summary>
            Event fired with an Boolean value
            </summary>
        </member>
        <member name="P:Rainbow.Events.BooleanEventArgs.Value">
            <summary>
            <see cref="T:System.Boolean"/> - The Boolen value associated to this event
            </summary>
        </member>
        <member name="M:Rainbow.Events.BooleanEventArgs.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the BooleanEventArgs class.
            </summary>
            <param name="value"><see cref="T:System.Boolean"/>Id</param>
        </member>
        <member name="T:Rainbow.Events.BubbleAffiliationEventArgs">
            <summary>
            Event fired when the current contact has its affiliation changed in a Bubble (i.e. he has joined the bubble or not)
            </summary>
        </member>
        <member name="P:Rainbow.Events.BubbleAffiliationEventArgs.BubbleJid">
            <summary>
            <see cref="T:System.String"/> - The bubble jid
            </summary>
        </member>
        <member name="P:Rainbow.Events.BubbleAffiliationEventArgs.HasJoined">
            <summary>
            <see cref="T:System.Boolean"/> - True if the current user has joined this bubble
            </summary>
        </member>
        <member name="P:Rainbow.Events.BubbleAffiliationEventArgs.CanRetryJoinRoom">
            <summary>
            <see cref="T:System.Boolean"/> - True if the current user could retry the action to join the room
            </summary>
        </member>
        <member name="M:Rainbow.Events.BubbleAffiliationEventArgs.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the BubbleInvitationEventArgs class.
            </summary>
            <param name="bubbleJid"><see cref="T:System.String"/>the Jid of the bubble</param>
            <param name="hasJoined"><see cref="T:System.Boolean"/>True if the current user has joined this bubble</param>
            <param name="canRetryJoinRoom"><see cref="T:System.Boolean"/>True if the current user could retry the action to join the room</param>
        </member>
        <member name="T:Rainbow.Events.BubbleAvatarEventArgs">
            <summary>
            Event fired when Avatar of a bubble has beend updated, deleted
            </summary>
        </member>
        <member name="P:Rainbow.Events.BubbleAvatarEventArgs.BubbleId">
            <summary>
            <see cref="T:System.String"/> - The bubble id 
            </summary>
        </member>
        <member name="P:Rainbow.Events.BubbleAvatarEventArgs.BubbleJid">
            <summary>
            <see cref="T:System.String"/> - The bubble jid
            </summary>
        </member>
        <member name="P:Rainbow.Events.BubbleAvatarEventArgs.Status">
            <summary>
            <see cref="T:System.String"/> - The avatar status: "updated" or "deleted"
            </summary>
        </member>
        <member name="M:Rainbow.Events.BubbleAvatarEventArgs.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the BubbleAvatarEventArgs class.
            </summary>
            <param name="bubbleId"><see cref="T:System.String"/>The id of the bubble</param>
            <param name="bubbleJid"><see cref="T:System.String"/>the Jid of the bubble</param>
            <param name="status"><see cref="T:System.String"/>the status of the avatar: "updated" or "deleted"</param>
        </member>
        <member name="T:Rainbow.Events.BubbleInfoEventArgs">
            <summary>
            Event fired when name and/or topic of a bubble has been modified
            </summary>
        </member>
        <member name="P:Rainbow.Events.BubbleInfoEventArgs.BubbleId">
            <summary>
            <see cref="T:System.String"/> - The bubble id 
            </summary>
        </member>
        <member name="P:Rainbow.Events.BubbleInfoEventArgs.BubbleJid">
            <summary>
            <see cref="T:System.String"/> - The bubble jid
            </summary>
        </member>
        <member name="P:Rainbow.Events.BubbleInfoEventArgs.Name">
            <summary>
            <see cref="T:System.String"/> - The name of the bubble
            </summary>
        </member>
        <member name="P:Rainbow.Events.BubbleInfoEventArgs.Topic">
            <summary>
            <see cref="T:System.String"/> - The Topic of the bubble 
            </summary>
        </member>
        <member name="M:Rainbow.Events.BubbleInfoEventArgs.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the BubbleMemberEventArgs class.
            </summary>
            <param name="bubbleId"><see cref="T:System.String"/>the id of the bubble</param>
            <param name="bubbleJid"><see cref="T:System.String"/>the Jid of the bubble</param>
            <param name="name"><see cref="T:System.String"/>the name of the bubble</param>
            <param name="topic"><see cref="T:System.String"/>the topic of the bubble</param>
        </member>
        <member name="T:Rainbow.Events.BubbleInvitationEventArgs">
            <summary>
            Event fired when the current contact has received an invitation to be a member of a bubble
            </summary>
        </member>
        <member name="P:Rainbow.Events.BubbleInvitationEventArgs.BubbleId">
            <summary>
            <see cref="T:System.String"/> - The bubble id 
            </summary>
        </member>
        <member name="P:Rainbow.Events.BubbleInvitationEventArgs.BubbleJid">
            <summary>
            <see cref="T:System.String"/> - The bubble jid
            </summary>
        </member>
        <member name="P:Rainbow.Events.BubbleInvitationEventArgs.BubbleName">
            <summary>
            <see cref="T:System.String"/> - The bubble name
            </summary>
        </member>
        <member name="P:Rainbow.Events.BubbleInvitationEventArgs.UserId">
            <summary>
            <see cref="T:System.String"/> - The User Id who send the invitation
            </summary>
        </member>
        <member name="P:Rainbow.Events.BubbleInvitationEventArgs.UserJid">
            <summary>
            <see cref="T:System.String"/> - The User Jid who send the invitation
            </summary>
        </member>
        <member name="P:Rainbow.Events.BubbleInvitationEventArgs.UserDisplayName">
            <summary>
            vThe User Display Name who send the invitation
            </summary>
        </member>
        <member name="P:Rainbow.Events.BubbleInvitationEventArgs.Subject">
            <summary>
            <see cref="T:System.String"/> - The subject's invitation
            </summary>
        </member>
        <member name="M:Rainbow.Events.BubbleInvitationEventArgs.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the BubbleInvitationEventArgs class.
            </summary>
            <param name="bubbleId"><see cref="T:System.String"/>the id of the bubble</param>
            <param name="bubbleJid"><see cref="T:System.String"/>the Jid of the bubble</param>
            <param name="bubbleName"><see cref="T:System.String"/>the name of the bubble</param>
            <param name="userId"><see cref="T:System.String"/>the id of the user</param>
            <param name="userJid"><see cref="T:System.String"/>the Jid of the user</param>
            <param name="userDisplayName"><see cref="T:System.String"/>the display name of the user</param>
            <param name="subject"><see cref="T:System.String"/>the subject of the invitation</param>
        </member>
        <member name="T:Rainbow.Events.BubbleMemberEventArgs">
            <summary>
            Event fired when a member as been added /removed / promoted / accepted / invited in a bubble
            </summary>
        </member>
        <member name="P:Rainbow.Events.BubbleMemberEventArgs.BubbleId">
            <summary>
            <see cref="T:System.String"/> - The bubble id 
            </summary>
        </member>
        <member name="P:Rainbow.Events.BubbleMemberEventArgs.BubbleJid">
            <summary>
            <see cref="T:System.String"/> - The bubble jid
            </summary>
        </member>
        <member name="P:Rainbow.Events.BubbleMemberEventArgs.ContactJid">
            <summary>
            <see cref="T:System.String"/> - The Contact Jid added / remove / promoted in the bubble
            </summary>
        </member>
        <member name="P:Rainbow.Events.BubbleMemberEventArgs.Status">
            <summary>
            <see cref="T:Rainbow.Model.Bubble.MemberStatus"/> - The Contact status (if updated)
            </summary>
        </member>
        <member name="P:Rainbow.Events.BubbleMemberEventArgs.Privilege">
            <summary>
            <see cref="T:Rainbow.Model.Bubble.MemberPrivilege"/> - The Contact privilege (if updated) 
            </summary>
        </member>
        <member name="M:Rainbow.Events.BubbleMemberEventArgs.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the BubbleMemberEventArgs class.
            </summary>
            <param name="bubbleId"><see cref="T:System.String"/>the id of the bubble</param>
            <param name="bubbleJid"><see cref="T:System.String"/>the Jid of the bubble</param>
            <param name="contactJid"><see cref="T:System.String"/>the contact Jid concerns by this event</param>
            <param name="status"><see cref="T:Rainbow.Model.Bubble.MemberStatus"/>the new status (if any) of the contacts as member</param>
            <param name="privilege"><see cref="T:Rainbow.Model.Bubble.MemberPrivilege"/>the new privilege (if any) of the contacts as member</param>
        </member>
        <member name="T:Rainbow.Events.CallEventArgs">
            <summary>
            Event fired when a call has been updated
            </summary>
        </member>
        <member name="P:Rainbow.Events.CallEventArgs.Call">
            <summary>
            <see cref="T:Rainbow.Model.Call"/> - The call status
            </summary>
        </member>
        <member name="M:Rainbow.Events.CallEventArgs.#ctor(Rainbow.Model.Call)">
            <summary>
            Initializes a new instance of the CallEventArgs class.
            </summary>
            <param name="call"><see cref="T:Rainbow.Model.Call"/>The call object</param>
        </member>
        <member name="T:Rainbow.Events.CallForwardStatusEventArgs">
            <summary>
            Event fired when the call forward status is updated
            </summary>
        </member>
        <member name="P:Rainbow.Events.CallForwardStatusEventArgs.CallForwardStatus">
            <summary>
            <see cref="T:Rainbow.Model.CallForwardStatus"/> - The call forward status
            </summary>
        </member>
        <member name="M:Rainbow.Events.CallForwardStatusEventArgs.#ctor(Rainbow.Model.CallForwardStatus)">
            <summary>
            Initializes a new instance of the CallForwarfStatusEventArgs class.
            </summary>
            <param name="callForwardStatus"><see cref="T:Rainbow.Model.CallForwardStatus"/>The call forward status</param>
        </member>
        <member name="T:Rainbow.Events.CallIdEventArgs">
            <summary>
            Event fired wiht a CallId value
            </summary>
        </member>
        <member name="P:Rainbow.Events.CallIdEventArgs.CallId">
            <summary>
            <see cref="T:System.String"/> - The CallId value associated to this event
            </summary>
        </member>
        <member name="M:Rainbow.Events.CallIdEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CallIdEventArgs class.
            </summary>
            <param name="callId"><see cref="T:System.String"/>CallId</param>
        </member>
        <member name="T:Rainbow.Events.CallLogEventArgs">
            <summary>
            Event fired when a call log as been read
            </summary>
        </member>
        <member name="P:Rainbow.Events.CallLogEventArgs.Id">
            <summary>
            <see cref="T:System.String"/> - ID the call log read
            </summary>
        </member>
        <member name="M:Rainbow.Events.CallLogEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CallLogEventArgs class.
            </summary>
            <param name="id"><see cref="T:System.String"/>The id of the call log</param>
        </member>
        <member name="T:Rainbow.Events.ChannelAvatarEventArgs">
            <summary>
            Event fired when Avatar of a bubble has beend updated, deleted
            </summary>
        </member>
        <member name="P:Rainbow.Events.ChannelAvatarEventArgs.ChannelId">
            <summary>
            <see cref="T:System.String"/> - The channel id 
            </summary>
        </member>
        <member name="P:Rainbow.Events.ChannelAvatarEventArgs.Status">
            <summary>
            <see cref="T:System.String"/> - The avatar status: "update" or "delete"
            </summary>
        </member>
        <member name="M:Rainbow.Events.ChannelAvatarEventArgs.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the ChannelAvatarEventArgs class.
            </summary>
            <param name="channelId"><see cref="T:System.String"/>The id of the channel</param>
            <param name="status"><see cref="T:System.String"/>the status of the avatar: "update" or "delete"</param>
        </member>
        <member name="T:Rainbow.Events.ChannelItemEventArgs">
            <summary>
            Event fired when a ChannelItem has been added / deleted / updated in a Channel
            </summary>
        </member>
        <member name="P:Rainbow.Events.ChannelItemEventArgs.ChannelId">
            <summary>
            The Channel id 
            </summary>
        </member>
        <member name="P:Rainbow.Events.ChannelItemEventArgs.ItemId">
            <summary>
            The Item id 
            </summary>
        </member>
        <member name="P:Rainbow.Events.ChannelItemEventArgs.Action">
            <summary>
            Action done on this file: "deleted" / "updated" / "created"
            </summary>
        </member>
        <member name="M:Rainbow.Events.ChannelItemEventArgs.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the ChannelItemEventArgs class.
            </summary>
            <param name="channelId"><see cref="T:System.String"/> Id of the channel</param>
            <param name="itemId"><see cref="T:System.String"/> Id of the item</param>
            <param name="action"><see cref="T:System.String"/> Action done on this file: "deleted" / "updated" / "created"</param>
        </member>
        <member name="T:Rainbow.Events.ChannelMemberEventArgs">
            <summary>
            Event fired when a member as been subscribed / unsubscribed / added / removed / updated in a channel
            </summary>
        </member>
        <member name="P:Rainbow.Events.ChannelMemberEventArgs.Member">
            <summary>
            <see cref="T:Rainbow.Model.Channel.Member"/> - The channel member updated
            </summary>
        </member>
        <member name="M:Rainbow.Events.ChannelMemberEventArgs.#ctor(Rainbow.Model.Channel.Member)">
            <summary>
            Initializes a new instance of the ChannelMemberEventArgs class.
            </summary>
            <param name="member"><see cref="T:Rainbow.Model.Channel.Member"/>the member updated</param>
        </member>
        <member name="T:Rainbow.Events.ConferenceEventArgs">
            <summary>
            Event raised when conference information are updated
            </summary>
        </member>
        <member name="P:Rainbow.Events.ConferenceEventArgs.Conference">
            <summary>
            <see cref="P:Rainbow.Events.ConferenceEventArgs.Conference"/> - The Conference object
            </summary>
        </member>
        <member name="M:Rainbow.Events.ConferenceEventArgs.#ctor(Rainbow.Model.Conference)">
            <summary>
            Initializes a new instance of the ConferenceEventArgs class.
            </summary>
            <param name="conference"><see cref="T:System.String"/>The conference object</param>
        </member>
        <member name="T:Rainbow.Events.ConferenceOwnerEventArgs">
            <summary>
            Event raised when the Owner of the conference has been updated
            </summary>
        </member>
        <member name="P:Rainbow.Events.ConferenceOwnerEventArgs.ConferenceId">
            <summary>
            <see cref="T:System.String"/> - Id ot the conference
            </summary>
        </member>
        <member name="P:Rainbow.Events.ConferenceOwnerEventArgs.Owner">
            <summary>
            <see cref="T:Rainbow.Model.Conference.Participant"/> - new Owner
            </summary>
        </member>
        <member name="M:Rainbow.Events.ConferenceOwnerEventArgs.#ctor(System.String,Rainbow.Model.Conference.Participant)">
            <summary>
            Initializes a new instance of the ConferencePublishersEventArgs class.
            </summary>
            <param name="conferenceId"><see cref="T:System.String"/>Id ot the conference</param>
            <param name="owner"><see cref="T:Rainbow.Model.Conference.Participant"/> - new Owner</param>
        </member>
        <member name="T:Rainbow.Events.ConferenceParticipantsEventArgs">
            <summary>
            Event raised when at least one participants in the Conference has been added, updated or removed
            </summary>
        </member>
        <member name="P:Rainbow.Events.ConferenceParticipantsEventArgs.ConferenceId">
            <summary>
            <see cref="T:System.String"/> - Id ot the conference
            </summary>
        </member>
        <member name="P:Rainbow.Events.ConferenceParticipantsEventArgs.Participants">
            <summary>
            <see cref="T:Dictionary{String, Conference.Participant}"/> - Dictionnary (by Participant Id) of participants
            </summary>
        </member>
        <member name="M:Rainbow.Events.ConferenceParticipantsEventArgs.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,Rainbow.Model.Conference.Participant})">
            <summary>
            Initializes a new instance of the ConferenceEventArgs class.
            </summary>
            <param name="conferenceId"><see cref="T:System.String"/>Id ot the conference</param>
            <param name="participants"><see cref="T:Dictionary{String, Conference.Participant}"/>Dictionnay (by Participant Id) of participants</param>
        </member>
        <member name="T:Rainbow.Events.ConferenceSharingTransfertStatusEventArgs">
            <summary>
            Event raised when the status of the Conference Sharing Tranfert has been updated
            </summary>
        </member>
        <member name="P:Rainbow.Events.ConferenceSharingTransfertStatusEventArgs.ConferenceId">
            <summary>
            <see cref="T:System.String"/> - Id ot the conference
            </summary>
        </member>
        <member name="P:Rainbow.Events.ConferenceSharingTransfertStatusEventArgs.ConferenceSharingTranfertStatus">
            <summary>
            <see cref="T:Rainbow.Model.ConferenceSharingTranfertStatus"/> - Status of Conference Sharing Tranfert
            </summary>
        </member>
        <member name="P:Rainbow.Events.ConferenceSharingTransfertStatusEventArgs.FromJid">
            <summary>
            <see cref="T:System.String"/> - Jid of the user who has updated the status
            </summary>
        </member>
        <member name="P:Rainbow.Events.ConferenceSharingTransfertStatusEventArgs.FromResource">
            <summary>
            <see cref="T:System.String"/> - Resource of the user who has updated the status
            </summary>
        </member>
        <member name="M:Rainbow.Events.ConferenceSharingTransfertStatusEventArgs.#ctor(System.String,System.String,System.String,Rainbow.Model.ConferenceSharingTranfertStatus)">
            <summary>
            Initializes a new instance of the ConferenceSharingTranfertStatusEventArgs class.
            </summary>
            <param name="conferenceId"><see cref="T:System.String"/>Id ot the conference</param>
            <param name="fromJid"><see cref="T:System.String"/>Jid of the user who has updated the status</param>
            <param name="fromResource"><see cref="T:System.String"/>Resource of the user who has updated the status</param>
            <param name="conferenceSharingTranfertStatus"><see cref="T:Rainbow.Model.ConferenceSharingTranfertStatus"/> - Status of Conference Sharing Tranfert</param>
        </member>
        <member name="T:Rainbow.Events.ConferenceTalkersEventArgs">
            <summary>
            Event raised when at least one publisher in the Conference has been added, updated or removed
            </summary>
        </member>
        <member name="P:Rainbow.Events.ConferenceTalkersEventArgs.ConferenceId">
            <summary>
            <see cref="T:System.String"/> - Id ot the conference
            </summary>
        </member>
        <member name="P:Rainbow.Events.ConferenceTalkersEventArgs.Talkers">
            <summary>
            <see cref="T:Dictionary{String, Conference.Talker}"/> - Dictionnay (by Participant Id) of talkers
            </summary>
        </member>
        <member name="M:Rainbow.Events.ConferenceTalkersEventArgs.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,Rainbow.Model.Conference.Talker})">
            <summary>
            Initializes a new instance of the ConferenceTalkersEventArgs class.
            </summary>
            <param name="conferenceId"><see cref="T:System.String"/>Id ot the conference</param>
            <param name="talkers"><see cref="T:Dictionary{String, Conference.Talkers}"/>Dictionnay (by Participant Id) of talkers</param>
        </member>
        <member name="T:Rainbow.Events.ConnectionStateEventArgs">
            <summary>
            Provides event about for the connection status.
            </summary>
        </member>
        <member name="P:Rainbow.Events.ConnectionStateEventArgs.State">
            <summary>
            <see cref="T:Rainbow.Model.ConnectionState"/> - The status of the connection
            </summary>
        </member>
        <member name="P:Rainbow.Events.ConnectionStateEventArgs.Reason">
            <summary>
            <see cref="T:System.String"/> - Reason of the disconnection if done by the server (can be null)
            </summary>
        </member>
        <member name="P:Rainbow.Events.ConnectionStateEventArgs.Details">
            <summary>
            <see cref="T:System.String"/> - Details of the disconnection if done by the server (can be null)
            </summary>
        </member>
        <member name="P:Rainbow.Events.ConnectionStateEventArgs.Criticity">
            <summary>
            <see cref="T:System.String"/> - Criticity of the status (if any) - info usefull only if a <see cref="P:Rainbow.Events.ConnectionStateEventArgs.Reason"/> is not null/empty
            'fatal': we are disconnected and the AutoReconnection service (if used) will stop immediatly.
            'error': we are disconnected and the AutoReconnection service (if used) will continue its job (so it will try to reconnect to the server).
            'info': we are not disconnected but the server returns an error
            </summary>
        </member>
        <member name="M:Rainbow.Events.ConnectionStateEventArgs.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the ConnectionStatusEventArgs class.
            </summary>
            <param name="state"><see cref="T:Rainbow.Model.ConnectionState"/>State of the connection</param>
            <param name="reason"><see cref="T:System.String"/>(optional) Reason of the disconnection if done by the server</param>
            <param name="details"><see cref="T:System.String"/>(optional) Details of the disconnection if done by the server</param>
            <param name="criticity"><see cref="T:System.String"/>(optional) Criticity of the status</param>
        </member>
        <member name="T:Rainbow.Events.ConversationEventArgs">
            <summary>
            Used when an conversation has been create / updated / removed
            </summary>
        </member>
        <member name="P:Rainbow.Events.ConversationEventArgs.Conversation">
            <summary>
            <see cref="T:Rainbow.Model.Conversation"/> - The Conversation object
            </summary>
        </member>
        <member name="M:Rainbow.Events.ConversationEventArgs.#ctor(Rainbow.Model.Conversation)">
            <summary>
            Initializes a new instance of the ConversationEventArgs class.
            </summary>
            <param name="conversation"><see cref="T:Rainbow.Model.Conversation"/>Conversation object</param>
        </member>
        <member name="T:Rainbow.Events.FavoriteEventArgs">
            <summary>
            Used when a favorite has been create / updated / removed
            </summary>
        </member>
        <member name="P:Rainbow.Events.FavoriteEventArgs.Favorite">
            <summary>
            <see cref="T:Rainbow.Model.Favorite"/> - The Favorite object
            </summary>
        </member>
        <member name="M:Rainbow.Events.FavoriteEventArgs.#ctor(Rainbow.Model.Favorite)">
            <summary>
            Initializes a new instance of the FavoriteEventArgs class.
            </summary>
            <param name="favorite"><see cref="T:Rainbow.Model.Favorite"/> - Favorite object</param>
        </member>
        <member name="T:Rainbow.Events.FileDownloadEventArgs">
            <summary>
            Event fired when a file is downloaded from the server to know its progress
            </summary>
        </member>
        <member name="P:Rainbow.Events.FileDownloadEventArgs.FileId">
            <summary>
            <see cref="T:System.String"/> - Id of the file downloaded
            </summary>
        </member>
        <member name="P:Rainbow.Events.FileDownloadEventArgs.SizeDownloaded">
            <summary>
            <see cref="T:System.Int64"/> - Size of date already downloaded
            </summary>
        </member>
        <member name="P:Rainbow.Events.FileDownloadEventArgs.FileSize">
            <summary>
            <see cref="T:System.Int64"/> - Size of the file
            </summary>
        </member>
        <member name="P:Rainbow.Events.FileDownloadEventArgs.InProgress">
            <summary>
            <see cref="T:System.Boolean"/> - True if the upload is in progres, False if it's finished (due to an error or once completed)
            
            If InProgress = False and Completed = False, it means the upload failed
            
            If InProgress = False and Completed = True, it means the upload is finished and was done correclty
            </summary>
        </member>
        <member name="P:Rainbow.Events.FileDownloadEventArgs.Completed">
            <summary>
            <see cref="T:System.Boolean"/> - True if the upload is finshied and done correctly. 
            
            If InProgress = False and Completed = False, it means the upload failed
            
            If InProgress = False and Completed = True, it means the upload is finished and was done correclty
            </summary>
        </member>
        <member name="M:Rainbow.Events.FileDownloadEventArgs.#ctor(System.String,System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the FileDownloadEventArgs class.
            </summary>
            <param name="fileId"><see cref="T:System.String"/> - Id of the file</param>
            <param name="sizeDownloaded"><see cref="T:System.Int64"/> - Size downloaded</param>
            <param name="fileSize"><see cref="T:System.Int64"/> - Size of the file</param>
        </member>
        <member name="T:Rainbow.Events.FileStorageEventArgs">
            <summary>
            Event fired when a file has been added / deleted / updated fro file storage of the current user
            </summary>
        </member>
        <member name="P:Rainbow.Events.FileStorageEventArgs.FileId">
            <summary>
            The file id 
            </summary>
        </member>
        <member name="P:Rainbow.Events.FileStorageEventArgs.Action">
            <summary>
            Action done on this file: "deleted" / "updated" / "created"
            </summary>
        </member>
        <member name="M:Rainbow.Events.FileStorageEventArgs.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the FileStorageEventArgs class.
            </summary>
            <param name="fileId"><see cref="T:System.String"/> Id of the file</param>
            <param name="action"><see cref="T:System.String"/> Action done on this file: "deleted" / "updated" / "created"</param>
        </member>
        <member name="T:Rainbow.Events.FileUploadEventArgs">
            <summary>
            Event fired when a file is uploaded on the server to know its progress
            </summary>
        </member>
        <member name="P:Rainbow.Events.FileUploadEventArgs.FileDescriptor">
            <summary>
            <see cref="T:Rainbow.Model.FileDescriptor"/> - The file descriptor
            </summary>
        </member>
        <member name="P:Rainbow.Events.FileUploadEventArgs.SizeUploaded">
            <summary>
            <see cref="T:System.Int64"/> - The size of data already uploaded
            </summary>
        </member>
        <member name="P:Rainbow.Events.FileUploadEventArgs.InProgress">
            <summary>
            <see cref="T:System.Boolean"/> - True if the upload is in progres, False if it's finished (due to an error or once completed)
            
            If InProgress = False and Completed = False, it means the upload failed
            
            If InProgress = False and Completed = True, it means the upload is finished and was done correclty
            </summary>
        </member>
        <member name="P:Rainbow.Events.FileUploadEventArgs.Completed">
            <summary>
            <see cref="T:System.Boolean"/> - True if the upload is finished and done correctly. 
            
            If InProgress = False and Completed = False, it means the upload failed
            
            If InProgress = False and Completed = True, it means the upload is finished and was done correclty
            </summary>
        </member>
        <member name="P:Rainbow.Events.FileUploadEventArgs.PeerId">
            <summary>
            <see cref="T:System.String"/> - PeerId which will receive this file
            </summary>
        </member>
        <member name="P:Rainbow.Events.FileUploadEventArgs.PeerType">
            <summary>
            <see cref="T:System.String"/> - Type of Peer (see <see cref="T:Rainbow.Model.Conversation.ConversationType"/> for possible values)
            </summary>
        </member>
        <member name="M:Rainbow.Events.FileUploadEventArgs.#ctor(Rainbow.Model.FileDescriptor@,System.Int64,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the FileUploadEventArgs class.
            </summary>
            <param name="fileDescriptor"><see cref="P:Rainbow.Events.FileUploadEventArgs.FileDescriptor"/> - File descriptor object</param>
            <param name="sizeUploaded"><see cref="T:System.Int64"/> - Size uploaded</param>
            <param name="peerId"><see cref="T:System.String"/> - PeerId which will receive this file</param>
            <param name="peerType"><see cref="T:System.String"/> - Type of Peer (see <see cref="T:Rainbow.Model.Conversation.ConversationType"/> for possible values)</param>
            <param name="inProgress"><see cref="T:System.Boolean"/> - To know if upload is in progress</param>
            <param name="completed"><see cref="T:System.Boolean"/> - To know if upload is completed</param>
        </member>
        <member name="T:Rainbow.Events.GroupMemberEventArgs">
            <summary>
            Event fired when a member as been added /removed from a Group
            </summary>
        </member>
        <member name="P:Rainbow.Events.GroupMemberEventArgs.GroupId">
            <summary>
            <see cref="T:System.String"/> - The group id 
            </summary>
        </member>
        <member name="P:Rainbow.Events.GroupMemberEventArgs.UserId">
            <summary>
            <see cref="T:System.String"/> - The user id 
            </summary>
        </member>
        <member name="P:Rainbow.Events.GroupMemberEventArgs.Action">
            <summary>
            <see cref="T:System.String"/> - The action performed: "added" or "removed"
            </summary>
        </member>
        <member name="M:Rainbow.Events.GroupMemberEventArgs.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the BubbleMemberEventArgs class.
            </summary>
            <param name="groupId"><see cref="T:System.String"/>the id of the Group</param>
            <param name="userId"><see cref="T:System.String"/>the id of the User</param>
            <param name="action"><see cref="T:System.String"/>the action performed "added" or "removed"</param>
        </member>
        <member name="T:Rainbow.Events.IceCandidatesEventArgs">
            <summary>
            Describe event about Ice candidates received
            </summary>
        </member>
        <member name="P:Rainbow.Events.IceCandidatesEventArgs.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Rainbow.Events.IceCandidatesEventArgs.IceCandidates">
            <summary>
            List of I<see cref="T:Rainbow.Model.Jingle.IceCandidate"/>
            </summary>
        </member>
        <member name="M:Rainbow.Events.IceCandidatesEventArgs.#ctor(System.String,System.Collections.Generic.List{Rainbow.Model.Jingle.IceCandidate})">
            <summary>
            Initializes a new instance of the IceCandidatesEventArgs class.
            </summary>
            <param name="id"><see cref="T:System.String"/>Id</param>
            <param name="iceCandidates"><see cref="T:System.Collections.Generic.List`1"/>List of IceCandidate</param>
        </member>
        <member name="T:Rainbow.Events.IdEventArgs">
            <summary>
            Event fired wiht an Id value
            </summary>
        </member>
        <member name="P:Rainbow.Events.IdEventArgs.Id">
            <summary>
            <see cref="T:System.String"/> - The ID value associated to this event
            </summary>
        </member>
        <member name="M:Rainbow.Events.IdEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the IdEventArgs class.
            </summary>
            <param name="id"><see cref="T:System.String"/>Id</param>
        </member>
        <member name="T:Rainbow.Events.InvitationEventArgs">
            <summary>
            Event fired with a invitation id value
            </summary>
        </member>
        <member name="P:Rainbow.Events.InvitationEventArgs.InvitationId">
            <summary>
            <see cref="T:System.String"/> - The JID value associated to this event
            </summary>
        </member>
        <member name="M:Rainbow.Events.InvitationEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the InvitationEventArgs class.
            </summary>
            <param name="invitationId"><see cref="T:System.String"/>Invitation ID</param>
        </member>
        <member name="T:Rainbow.Events.JidEventArgs">
            <summary>
            Event fired wiht a Jid value
            </summary>
        </member>
        <member name="P:Rainbow.Events.JidEventArgs.Jid">
            <summary>
            <see cref="T:System.String"/> - The JID value associated to this event
            </summary>
        </member>
        <member name="M:Rainbow.Events.JidEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the JidEventArgs class.
            </summary>
            <param name="jid"><see cref="T:System.String"/>Jid</param>
        </member>
        <member name="T:Rainbow.Events.MediaPublicationsEventArgs">
            <summary>
            Event raised when at least one MediaPublication in the Conference has been added, updated or removed
            </summary>
        </member>
        <member name="P:Rainbow.Events.MediaPublicationsEventArgs.ConferenceId">
            <summary>
            <see cref="T:System.String"/> - Id ot the conference
            </summary>
        </member>
        <member name="P:Rainbow.Events.MediaPublicationsEventArgs.MediaPublications">
            <summary>
            <see cref="T:List{MediaPublication}"/> - List of <see cref="T:Rainbow.Model.MediaPublication"/>
            </summary>
        </member>
        <member name="M:Rainbow.Events.MediaPublicationsEventArgs.#ctor(System.String,System.Collections.Generic.List{Rainbow.Model.MediaPublication})">
            <summary>
            Initializes a new instance of the MediaPublicationsEventArgs class.
            </summary>
            <param name="conferenceId"><see cref="T:System.String"/>Id ot the conference</param>
            <param name="mediaPublications"><see cref="T:Dictionary{String, MediaPublication}"/>Dictionnay (by Participant Id) of <see cref="T:Rainbow.Model.MediaPublication"/></param>
        </member>
        <member name="T:Rainbow.Events.MediaPublicationEventArgs">
            <summary>
            Event raised when a media stream (Audio, Video or Sharing) in a Call (Conference or P2P) is updated - see <see cref="T:Rainbow.Model.MediaPublicationStatus"/>
            </summary>
        </member>
        <member name="P:Rainbow.Events.MediaPublicationEventArgs.MediaPublication">
            <summary>
            <see cref="P:Rainbow.Events.MediaPublicationEventArgs.MediaPublication"/> - Conference Media Publication object
            </summary>
        </member>
        <member name="P:Rainbow.Events.MediaPublicationEventArgs.Status">
            <summary>
            <see cref="T:Rainbow.Model.MediaPublicationStatus"/> - Status of the Conference Media Publication
            </summary>
        </member>
        <member name="M:Rainbow.Events.MediaPublicationEventArgs.#ctor(System.String,System.String,System.String,System.Int32,Rainbow.Model.MediaPublicationStatus)">
            <summary>
            Initializes a new instance of the MediaPublicationUpdatedEventArgs class.
            </summary>
            <param name="callId"><see cref="T:System.String"/>Call Id</param>
            <param name="publisherId"><see cref="T:System.String"/>Id of the publisher (i.e. a Contact.Id)</param>
            <param name="publisherJid"><see cref="T:System.String"/>Jid of the publisher (i.e. a Contact.Jid_Im)</param>
            <param name="media"><see cref="T:System.Int32"/>Media used in the publication - see <see cref="T:Rainbow.Model.Call.Media"/> for possible values</param>
            <param name="status"><see cref="T:Rainbow.Model.MediaPublicationStatus"/> Status of the publication</param>
        </member>
        <member name="T:Rainbow.Events.MessageEventArgs">
            <summary>
            Event fired when the current user recevied a message from a conversation
            </summary>
        </member>
        <member name="P:Rainbow.Events.MessageEventArgs.ContactJid">
            <summary>
            <see cref="T:System.String"/> - The JID value of the contact who sent the message
            </summary>
        </member>
        <member name="P:Rainbow.Events.MessageEventArgs.ConversationId">
            <summary>
            <see cref="T:System.String"/> - The ID of the conversation
            </summary>
        </member>
        <member name="P:Rainbow.Events.MessageEventArgs.Message">
            <summary>
            <see cref="T:Rainbow.Model.Message"/> - Message received
            </summary>
        </member>
        <member name="P:Rainbow.Events.MessageEventArgs.CarbonCopy">
            <summary>
            <see cref="T:System.Boolean"/> - True if this message has been send by the current user from another device
            </summary>
        </member>
        <member name="M:Rainbow.Events.MessageEventArgs.#ctor(System.String,System.String,System.Boolean,Rainbow.Model.Message)">
            <summary>
            Initializes a new instance of the MessageEventArgs class.
            </summary>
            <param name="conversationId"><see cref="T:System.String"/>Xonversation Id</param>
            <param name="contactJid"><see cref="T:System.String"/>Contact Jid</param>
            <param name="carbonCopy"><see cref="T:System.Boolean"/>Is it a carbon copy message</param>
            <param name="message"><see cref="T:Rainbow.Model.Message"/>Message object</param>
        </member>
        <member name="T:Rainbow.Events.NomadicStatusEventArgs">
            <summary>
            Event fired when the nomadic status is updated
            </summary>
        </member>
        <member name="P:Rainbow.Events.NomadicStatusEventArgs.NomadicStatus">
            <summary>
            <see cref="T:Rainbow.Model.NomadicStatus"/> - The nomadic status object
            </summary>
        </member>
        <member name="M:Rainbow.Events.NomadicStatusEventArgs.#ctor(Rainbow.Model.NomadicStatus)">
            <summary>
            Initializes a new instance of the NomadicStatusEventArgs class.
            </summary>
            <param name="nomadicStatus"><see cref="T:Rainbow.Model.NomadicStatus"/>The nomadic status</param>
        </member>
        <member name="T:Rainbow.Events.PBXAgentInfoEventArgs">
            <summary>
            Event fired when the PBX Agent info is received / updated
            </summary>
        </member>
        <member name="P:Rainbow.Events.PBXAgentInfoEventArgs.PbxAgentInfo">
            <summary>
            <see cref="T:Rainbow.Model.PbxAgentInfo"/> - The PBX Agent info
            </summary>
        </member>
        <member name="M:Rainbow.Events.PBXAgentInfoEventArgs.#ctor(Rainbow.Model.PbxAgentInfo)">
            <summary>
            Initializes a new instance of the PBXAgentInfoUpdateEventArgs class.
            </summary>
            <param name="pbxAgentInfo"><see cref="T:Rainbow.Model.PbxAgentInfo"/>The PBX Agent info</param>
        </member>
        <member name="T:Rainbow.Events.PeerEventArgs">
            <summary>
            Event fired with a Peer object
            </summary>
        </member>
        <member name="P:Rainbow.Events.PeerEventArgs.Peer">
            <summary>
            <see cref="P:Rainbow.Events.PeerEventArgs.Peer"/> - The Peer object associated to this event
            </summary>
        </member>
        <member name="M:Rainbow.Events.PeerEventArgs.#ctor(Rainbow.Model.Contact)">
            <summary>
            Initializes a new instance of the PeerEventArgs class using Contact object
            </summary>
            <param name="contact"><see cref="T:Rainbow.Model.Contact"/>Contact object</param>
        </member>
        <member name="M:Rainbow.Events.PeerEventArgs.#ctor(Rainbow.Model.Bubble)">
            <summary>
            Initializes a new instance of the PeerEventArgs class using Bubble object
            </summary>
            <param name="bubble"><see cref="T:Rainbow.Model.Bubble"/>Bubble object</param>
        </member>
        <member name="T:Rainbow.Events.PresenceEventArgs">
            <summary>
            Event fired wiht a Jid value and a <see cref="T:Rainbow.Model.Presence"/> object
            </summary>
        </member>
        <member name="P:Rainbow.Events.PresenceEventArgs.Presence">
            <summary>
            <see cref="T:Rainbow.Model.Presence"/> - The Presence object
            </summary>
        </member>
        <member name="M:Rainbow.Events.PresenceEventArgs.#ctor(Rainbow.Model.Presence)">
            <summary>
            Initializes a new instance of the PresenceLevelEventArgs class.
            </summary>
            <param name="jid"><see cref="T:System.String"/>Jid</param>
            <param name="presence"><see cref="T:Rainbow.Model.Presence"/>Presence object</param>
        </member>
        <member name="T:Rainbow.Events.ReceiptReceivedEventArgs">
            <summary>
            Event fired when a message delivery is received
            </summary>
        </member>
        <member name="P:Rainbow.Events.ReceiptReceivedEventArgs.ConversationId">
            <summary>
            <see cref="T:System.String"/> - The Id of the conversation which contains this message
            </summary>
        </member>
        <member name="P:Rainbow.Events.ReceiptReceivedEventArgs.MessageId">
            <summary>
            <see cref="T:System.String"/> - The Id of the message which has been delivered
            </summary>
        </member>
        <member name="P:Rainbow.Events.ReceiptReceivedEventArgs.ReceiptType">
            <summary>
            <see cref="T:Rainbow.Model.ReceiptType"/> - The receipt type of this message
            </summary>
        </member>
        <member name="M:Rainbow.Events.ReceiptReceivedEventArgs.#ctor(System.String,System.String,Rainbow.Model.ReceiptType)">
            <summary>
            Initializes a new instance of the ReceiptReceivedEventArgs class.
            </summary>
            <param name="conversationId"><see cref="T:System.String"/>Conversation Id</param>
            <param name="messageId"><see cref="T:System.String"/>Message Id</param>
            <param name="receiptType"><see cref="T:Rainbow.Model.ReceiptType"/>The type of receipt</param>
        </member>
        <member name="T:Rainbow.Events.RecordingFileEventArgs">
            <summary>
            Event fired when a recording is performed and when files associated are avaialble / in progress
            </summary>
        </member>
        <member name="P:Rainbow.Events.RecordingFileEventArgs.Status">
            <summary>
            Status of files in the recording process: "in_progress" / "release_complete"
            </summary>
        </member>
        <member name="P:Rainbow.Events.RecordingFileEventArgs.Peer">
            <summary>
            Context of the recording
            </summary>
        </member>
        <member name="P:Rainbow.Events.RecordingFileEventArgs.FilesDescriptor">
            <summary>
            Context of the recording
            </summary>
        </member>
        <member name="M:Rainbow.Events.RecordingFileEventArgs.#ctor(System.String,Rainbow.Model.Peer,System.Collections.Generic.List{Rainbow.Model.FileDescriptor})">
            <summary>
            Initializes a new instance of the RecordingFileEventArgs class.
            </summary>
            <param name="status"><see cref="T:System.String"/> Status of the recording process:  "in_progress" | "release_complete"</param>
            <param name="peer"><see cref="P:Rainbow.Events.RecordingFileEventArgs.Peer"/> Context of the recording</param>
            <param name="files"><see cref="P:Rainbow.Events.RecordingFileEventArgs.Peer"/> List of file descriptor</param>
        </member>
        <member name="T:Rainbow.Events.RemoteSDPEventArgs">
            <summary>
            Describe evnt about the remote SDP received
            </summary>
        </member>
        <member name="P:Rainbow.Events.RemoteSDPEventArgs.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Rainbow.Events.RemoteSDPEventArgs.Type">
            <summary>
            <see cref="T:System.String"/> - Type of the remote description: "answer" or "offer"
            </summary>
        </member>
        <member name="P:Rainbow.Events.RemoteSDPEventArgs.SDP">
            <summary>
            <see cref="T:System.String"/> - SDP
            </summary>
        </member>
        <member name="M:Rainbow.Events.RemoteSDPEventArgs.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the RemoteDescriptionEventArgs class.
            </summary>
            <param name="id"><see cref="T:System.String"/>Id</param>
            <param name="type"><see cref="T:System.String"/>Type</param>
            <param name="sdp"><see cref="T:System.String"/>SDP</param>
        </member>
        <member name="T:Rainbow.Events.StringEventArgs">
            <summary>
            To raise Event with a String value
            </summary>
        </member>
        <member name="P:Rainbow.Events.StringEventArgs.Value">
            <summary>
            <see cref="T:System.String"/> - The String value associated to this event
            </summary>
        </member>
        <member name="M:Rainbow.Events.StringEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the StringEventArgs class.
            </summary>
            <param name="value"><see cref="T:System.String"/>String value</param>
        </member>
        <member name="T:Rainbow.Events.StringListEventArgs">
            <summary>
            Event fired with a list of String
            </summary>
        </member>
        <member name="P:Rainbow.Events.StringListEventArgs.Values">
            <summary>
            <see cref="T:System.Collections.Generic.List`1"/> - The list of String
            </summary>
        </member>
        <member name="M:Rainbow.Events.StringListEventArgs.#ctor(System.Collections.Generic.List{System.String})">
            <summary>
            Initializes a new instance of the StringListEventArgs class.
            </summary>
            <param name="values"><see cref="T:System.String"/>First string</param>
        </member>
        <member name="T:Rainbow.Events.SynchroProviderStatusEventArgs">
            <summary>
            To raise event about the synhcronisation status with a provider has changed
            </summary>
        </member>
        <member name="P:Rainbow.Events.SynchroProviderStatusEventArgs.SynchroProviderStatus">
            <summary>
            <see cref="P:Rainbow.Events.SynchroProviderStatusEventArgs.SynchroProviderStatus"/> - The synchronisation status with a provider 
            </summary>
        </member>
        <member name="M:Rainbow.Events.SynchroProviderStatusEventArgs.#ctor(System.String,System.String,System.Boolean)">
             <summary>
             Initializes a new instance of the SynchroProviderStatusEventArgs class.
             </summary>
            
             <param name="type"><see cref="T:System.String"/>The type of synchro: "calendar" or "presence"</param>
             <param name="provider"><see cref="T:System.String"/>The provider of the synchro: "office365" or "google"</param>
             <param name="enabled"><see cref="T:System.Boolean"/>To know if the synchro is enabled or not</param>
        </member>
        <member name="T:Rainbow.Events.TelephonyStatusEventArgs">
            <summary>
            Event fired when the status of the telephony service is updated
            </summary>
        </member>
        <member name="P:Rainbow.Events.TelephonyStatusEventArgs.Enabled">
            <summary>
            <see cref="T:System.Boolean"/> - To know the status of the telephony service
            </summary>
        </member>
        <member name="M:Rainbow.Events.TelephonyStatusEventArgs.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TelephonyStatusEventArgs class.
            </summary>
            <param name="enabled"><see cref="T:System.Boolean"/>The status of the telephony service</param>
        </member>
        <member name="T:Rainbow.Events.UserSettingsEventArgs">
            <summary>
            To raise event about users setings which has changed
            </summary>
        </member>
        <member name="F:Rainbow.Events.UserSettingsEventArgs.UserSettings">
            <summary>
            <see cref="T:Dictionary{string, Object}"/> - Dictionary of user settings changed with their new value
            </summary>
        </member>
        <member name="M:Rainbow.Events.UserSettingsEventArgs.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object})">
             <summary>
             Initializes a new instance of the UserSettingsEventArgs class.
             </summary>
            
             <param name="userSettings"><see cref="T:Dictionary{string, Object}"/>Dictionary of user settings</param>
        </member>
        <member name="T:Rainbow.Events.UserTypingEventArgs">
            <summary>
            Event fired when a user is typing in a converqation or finish to type
            </summary>
        </member>
        <member name="P:Rainbow.Events.UserTypingEventArgs.ContactJid">
            <summary>
            <see cref="T:System.String"/> - The JID value of the contact typing
            </summary>
        </member>
        <member name="P:Rainbow.Events.UserTypingEventArgs.ConversationId">
            <summary>
            <see cref="T:System.String"/> - The ID of the conversation
            </summary>
        </member>
        <member name="P:Rainbow.Events.UserTypingEventArgs.IsTyping">
            <summary>
            <see cref="T:System.Boolean"/> - Is typing or not ?
            </summary>
        </member>
        <member name="M:Rainbow.Events.UserTypingEventArgs.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the JidEventArgs class.
            </summary>
            <param name="conversationId"><see cref="T:System.String"/>Conversation Id</param>
            <param name="contactJid"><see cref="T:System.String"/>Contact Jid</param>
            <param name="isTyping"><see cref="T:System.Boolean"/>Is typing or not ?</param>
        </member>
        <member name="T:Rainbow.Events.VoiceMessageEventArgs">
            <summary>
            Provide file information of a voice message
            </summary>
        </member>
        <member name="P:Rainbow.Events.VoiceMessageEventArgs.Id">
            <summary>
            <see cref="T:System.String"/> - Id of the **VoiceMessage**
            </summary>
        </member>
        <member name="P:Rainbow.Events.VoiceMessageEventArgs.FileId">
            <summary>
            <see cref="T:System.String"/> - The file id 
            </summary>
        </member>
        <member name="P:Rainbow.Events.VoiceMessageEventArgs.Action">
            <summary>
            <see cref="T:System.String"/> - Action done on this file: "created", "updated" or "deleted"
            </summary>
        </member>
        <member name="M:Rainbow.Events.VoiceMessageEventArgs.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor of VoiceMessageEventArgs class
            </summary>
            <param name="id"><see cref="T:System.String"/>id of the Voice Message</param>
            <param name="fileId"><see cref="T:System.String"/>id of the file</param>
            <param name="action"><see cref="T:System.String"/>Action done on this file: "created" or "deleted"</param>
        </member>
        <member name="T:Rainbow.Events.VoiceMessagesNumberEventArgs">
            <summary>
            Event fired when the number of voice messages is updated
            </summary>
        </member>
        <member name="P:Rainbow.Events.VoiceMessagesNumberEventArgs.Nb">
            <summary>
            <see cref="T:System.Int32"/> - The number of voice messages
            </summary>
        </member>
        <member name="M:Rainbow.Events.VoiceMessagesNumberEventArgs.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the VoiceMessagesEventArgs class.
            </summary>
            <param name="nb"><see cref="T:System.String"/>Number of voice messages</param>
        </member>
        <member name="T:Rainbow.Events.XmlElementEventArgs">
            <summary>
            To raise Event with a String value
            </summary>
        </member>
        <member name="P:Rainbow.Events.XmlElementEventArgs.Value">
            <summary>
            <see cref="T:System.Xml.XmlElement"/> - The XmlElement object associated to this event
            </summary>
        </member>
        <member name="M:Rainbow.Events.XmlElementEventArgs.#ctor(System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the StringEventArgs class.
            </summary>
            <param name="value"><see cref="T:System.Xml.XmlElement"/>XmlElement object</param>
        </member>
        <member name="T:Rainbow.Favorites">
            <summary>
            This object is available only using <see cref="M:Rainbow.Application.GetFavorites"/> from <see cref="T:Rainbow.Application"/> object.
            
            Favorites is used to get / set / update info about any favorite which concern the current contact with a a Peer Id (Contact or Bubble)
            
            When an Favorite is created / updated / deleted an event is fired
            
            A cache is used to have always a valid lis of favorites in the correct order
            
            </summary>
        </member>
        <member name="E:Rainbow.Favorites.FavoriteCreated">
            <summary>
            Event fired when a favorite has been created by a thrid party
            
             The <see cref="T:Rainbow.Events.FavoriteEventArgs" /> object permits to know all the details of the favorite
            </summary>
        </member>
        <member name="E:Rainbow.Favorites.FavoriteRemoved">
            <summary>
            Event fired when a favorite has been removed by a thrid party
            
             The <see cref="T:Rainbow.Events.FavoriteEventArgs" /> object permits to know all the details of the favorite
            </summary>
        </member>
        <member name="E:Rainbow.Favorites.FavoriteUpdated">
            <summary>
            Event fired when a favorite has been updated by a thrid party
            
             The <see cref="T:Rainbow.Events.FavoriteEventArgs" /> object permits to know all the details of the favorite
            </summary>
        </member>
        <member name="M:Rainbow.Favorites.GetFavorites">
            <summary>
            Get all favorites
            </summary>
        </member>
        <member name="M:Rainbow.Favorites.GetFavorite(System.String)">
            <summary>
            Get by ID the specified favorite
            </summary>
            <param name="favoriteId"><see cref="T:System.String"/>ID of the favorite to find</param>
            <returns>A <see cref="T:Rainbow.Model.Favorite"/> - Favorite object or NULL if not found</returns>
        </member>
        <member name="M:Rainbow.Favorites.GetFavoriteByPeerId(System.String)">
            <summary>
            Get by ID the specified favorite
            </summary>
            /// <param name="peerId"><see cref="T:System.String"/>ID of the peer to find</param>
            <returns>A <see cref="T:Rainbow.Model.Favorite"/> - Favorite object or NULL if not found</returns>
        </member>
        <member name="M:Rainbow.Favorites.CreateFavorite(System.String,System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.Favorite}})">
            <summary>
            Create a favortie with the specified Peer Id and type. Since no position is specified, it's added to the end
            </summary>
            <param name="peerId"><see cref="T:System.String"/>the Peer ID </param>
            <param name="type"><see cref="T:System.String"/>the type of favorite - see <see cref="T:Rainbow.Model.FavoriteType"/> for possible values</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Favorite}}"/>Callback fired when the operation is done - A <see cref="T:Rainbow.Model.Favorite"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Favorites.CreateFavoriteWithPosition(System.String,System.String,System.Int32,System.Action{Rainbow.SdkResult{Rainbow.Model.Favorite}})">
            <summary>
            Create a favorite with the specified Peer Id, type and position
            </summary>
            <param name="peerId"><see cref="T:System.String"/>the Peer ID </param>
            <param name="type"><see cref="T:System.String"/>the type of favorite - see <see cref="T:Rainbow.Model.FavoriteType"/> for possible values</param>
            <param name="position"><see cref="T:System.Int32"/>the position of favorite</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Favorite}}"/>Callback fired when the operation is done - A <see cref="T:Rainbow.Model.Favorite"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Favorites.UpdateFavoritePosition(System.String,System.Int32,System.Action{Rainbow.SdkResult{Rainbow.Model.Favorite}})">
            <summary>
            Update the position of the specified favorite
            </summary>
            <param name="favoriteId"><see cref="T:System.String"/>the ID of the favortie</param>
            <param name="position"><see cref="T:System.Int32"/>the position of the favorite</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Favorite}}"/>Callback fired when the operation is done - A <see cref="T:Rainbow.Model.Favorite"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Favorites.DeleteFavorite(System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.Favorite}})">
            <summary>
            Delete the specified favorite
            </summary>
            <param name="favoriteId"><see cref="T:System.String"/>The ID of the <see cref="T:Rainbow.Model.Favorite"/> to delete</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Favorite}}"/>Callback fired when the operation is done - A <see cref="T:Rainbow.Model.Favorite"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Favorites.DeleteFavorite(Rainbow.Model.Favorite,System.Action{Rainbow.SdkResult{Rainbow.Model.Favorite}})">
            <summary>
            Delete the specified favorite
            </summary>
            <param name="favorite"><see cref="T:Rainbow.Model.Favorite"/>The <see cref="T:Rainbow.Model.Favorite"/> to delete</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Favorite}}"/>Callback fired when the operation is done - A <see cref="T:Rainbow.Model.Favorite"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="T:Rainbow.FileStorage">
             <summary>
             This object is available only using <see cref="M:Rainbow.Application.GetFileStorage"/> from <see cref="T:Rainbow.Application"/> object.
             
             This services permits to manage files shared in Rainbow 
             * Upload and download files
             * Get the list of files shared (sent or received) in a conversation (one to one or in a bubble)
             * Remove files
            
             A <see cref="T:Rainbow.Model.FileDescriptor"/> object is used to know details of a file shared with someone.
             
             A cache is used to maintain the list of files descriptor accessible by the current user
            
             </summary>
        </member>
        <member name="E:Rainbow.FileStorage.RecordingFileUpdated">
            <summary>
            Event fired when a recording is performed and when files associated are avaialble / in progress
            </summary>
        </member>
        <member name="E:Rainbow.FileStorage.FileStorageUpdated">
            <summary>
            Event fired when a file has been added / deleted / updated in the file storage of the current user
            
            Voice messages stored in voice mail are not concerned by this event - see <see cref="E:Rainbow.FileStorage.VoiceMessageUpdated"/> event instead
            
            The <see cref="T:Rainbow.Events.FileStorageEventArgs" /> object permits to know the file id and the action done on it
            </summary>
        </member>
        <member name="E:Rainbow.FileStorage.VoiceMessageUpdated">
            <summary>
            Event fired when a voice message has been added / deleted / updated in the file storage of the current user
            
            The <see cref="T:Rainbow.Events.VoiceMessageEventArgs" /> object permits to know the voice message Id, the file id associated and the action done on it
            </summary>
        </member>
        <member name="E:Rainbow.FileStorage.FileUploadUpdated">
            <summary>
            Event fired when a file is being uploaded for progress
            
            The <see cref="T:Rainbow.Events.FileUploadEventArgs" /> object permits to know size already uploade and if the upload is completed or still in progress
            </summary>
        </member>
        <member name="E:Rainbow.FileStorage.FileDownloadUpdated">
            <summary>
            Event fired when a file is being downloaded and its download progress has been modified.
            
            The <see cref="T:Rainbow.Events.FileDownloadEventArgs" /> object permits to know size already downloaded and if the upload is completed or still in progress
            </summary>
        </member>
        <member name="M:Rainbow.FileStorage.CreateFileDescriptor(System.String,System.Int64,System.String,System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.FileDescriptor}})">
            <summary>
            Create a File Descriptor on server using a file namd and its size
            </summary>
            <param name="fileName"><see cref="T:System.String"/>File name</param>
            <param name="fileSize"><see cref="T:System.Int64"/>File size in bytes</param>
            <param name="peerId"><see cref="T:System.String"/>The PeerID to share this file: a userId or a BubbleId</param>
            <param name="peerType"><see cref="T:System.String"/>The type of PeerId - see <see cref="T:Rainbow.Model.Conversation.ConversationType"/> for possible values</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{FileDescriptor}"/>Callback fired when the operation is done -  a FileDescriptor is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.FileStorage.CreateFileDescriptor(System.String,System.String,System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.FileDescriptor}})">
            <summary>
            Create a File Descriptor on server using a file path
            </summary>
            <param name="filePath"><see cref="T:System.String"/>Valid file path</param>
            <param name="peerId"><see cref="T:System.String"/>The PeerID to share this file: a userId or a BubbleId</param>
            <param name="peerType"><see cref="T:System.String"/>The type of PeerId - see <see cref="T:Rainbow.Model.Conversation.ConversationType"/> for possible values</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{FileDescriptor}"/>Callback fired when the operation is done -  a FileDescriptor is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.FileStorage.UploadFile(System.IO.Stream,System.String,System.String,Rainbow.Model.FileDescriptor,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            Permits to upload a file to the specified PeerId/PeerType using a Stream and a FileDescriptor
            
            It's possible to not specify a PeerId/PeeType to upload file for storage only (shared with nobody)
            
            To share a file with a Peer, it's better to send him a IM Message with the file - see **SendMessageWithFileToConversation** in <see cref="T:Rainbow.InstantMessaging"/> object.
            
            It's possible to know the upload status of this file using event **FileUploadUpdated**.
            
            The callback **callbackMessage** permits to know if finally the file upload has been uploaded with success.
            </summary>
            <param name="fileStream"><see cref="T:System.IO.Stream"/>a Stream to the file</param>
            <param name="peerId"><see cref="T:System.String"/>The PeerID to share this file: a userId or a BubbleId</param>
            <param name="peerType"><see cref="T:System.String"/>The type of PeerId - see <see cref="T:Rainbow.Model.Conversation.ConversationType"/> for possible values</param>
            <param name="fileDescriptor"><see cref="T:Rainbow.Model.FileDescriptor"/>File descriptor object</param>
            <param name="callbackResult"><see cref="T:Action{Rainbow.SdkResult{Boolean}"/>Callback fired when the file is uploaded  -  True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.FileStorage.UploadFile(System.String,System.String,System.String,Rainbow.Model.FileDescriptor,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            Permits to upload a file to the specified PeerId/PeerType using a file path and a file descriptor
            
            It's possible to not specify a PeerId/PeeType to upload file for storage only (shared with nobody)
            
            To share a file with a Peer, it's better to send him a IM Message with the file - see **SendMessageWithFileToConversation** in <see cref="T:Rainbow.InstantMessaging"/> object.
            
            It's possible to know the upload status of this file using event **FileUploadUpdated**.
            
            The callback **callbackMessage** permits to know if finally the file upload has been uploaded with success.
            </summary>
            <param name="filePath"><see cref="T:System.String"/>File path</param>
            <param name="peerId"><see cref="T:System.String"/>The PeerID to share this file: a userId or a BubbleId</param>
            <param name="peerType"><see cref="T:System.String"/>The type of PeerId - see <see cref="T:Rainbow.Model.Conversation.ConversationType"/> for possible values</param>
            <param name="fileDescriptor"><see cref="T:Rainbow.Model.FileDescriptor"/>File descriptor object</param>
            <param name="callbackResult"><see cref="T:Action{Rainbow.SdkResult{Boolean}"/>Callback fired when the file is uploaded  -  True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.FileStorage.UploadFile(System.IO.Stream,System.String,System.String,System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.FileDescriptor}},System.Action{Rainbow.SdkResult{System.Boolean}})">
             <summary>
             Permits to upload a file to the specified PeerId/PeerType using a Stream
             
             It's possible to not specify a PeerId/PeeType to upload file for storage only (shared with nobody)
             
             To share a file with a Peer, it's better to send him a IM Message with the file - see **SendMessageWithFileToConversation** in <see cref="T:Rainbow.InstantMessaging"/> object.
             
             The callback **callbackFileDescriptor** permits to know the file descriptor created. So it's possible to know the upload status of this file using event **FileUploadUpdated**.
             If the FileDescriptor is not well created, the file is not uploaded.
            
             The callback **callbackMessage** permits to know if finally the file upload has been uploaded with success.
             </summary>
             <param name="fileStream"><see cref="T:System.IO.Stream"/>Stream used to get file contant.The stream must be readabled and seekable</param>
             <param name="fileName"><see cref="T:System.String"/>File name</param>
             <param name="peerId"><see cref="T:System.String"/>The PeerID to share this file: a userId or a BubbleId</param>
             <param name="peerType"><see cref="T:System.String"/>The type of PeerId - see <see cref="T:Rainbow.Model.Conversation.ConversationType"/> for possible values</param>
             <param name="callbackFileDescriptor"><see cref="T:Action{Rainbow.SdkResult{FileDescriptor}"/>Callback fired when the file descriptor creation is performed -  FileDescriptor object is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
             <param name="callbackResult"><see cref="T:Action{Rainbow.SdkResult{Boolean}"/>Callback fired when the file is uploaded -  True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.FileStorage.UploadFile(System.String,System.String,System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.FileDescriptor}},System.Action{Rainbow.SdkResult{System.Boolean}})">
             <summary>
             Permits to upload a file to the specified PeerId/PeerType using a file path.
             
             It's possible to not specify a PeerId/PeeType to upload file for storage only (shared with nobody)
             
             To share a file with a Peer, it's better to send him a IM Message with the file - see **SendMessageWithFileToConversation** in <see cref="T:Rainbow.InstantMessaging"/> object.
             
             The callback **callbackFileDescriptor** permits to know the file descriptor created. So it's possible to know the upload status of this file using event **FileUploadUpdated**.
             If the FileDescriptor is not well created, the file is not uploaded and the message is not sent
            
             The callback **callbackMessage** permits to know if finally the file upload has been uploaded with success.
             </summary>
             <param name="filePath"><see cref="T:System.String"/>File path to upload. The file must be accessible and can be opened</param>
             <param name="peerId"><see cref="T:System.String"/>The PeerID to share this file: a userId or a BubbleId</param>
             <param name="peerType"><see cref="T:System.String"/>The type of PeerId - see <see cref="T:Rainbow.Model.Conversation.ConversationType"/> for possible values</param>
             <param name="callbackFileDescriptor"><see cref="T:Action{Rainbow.SdkResult{FileDescriptor}"/>Callback fired when the file descriptor creation is performed -  FileDescriptor object is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
             <param name="callbackResult"><see cref="T:Action{Rainbow.SdkResult{Boolean}"/>Callback fired when the file descriptor creation is performed -  True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.FileStorage.DownloadFile(System.String,System.String,System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            Download file in the specified destination path (a full path with a file name). 
            
            A file descriptor with this file Id must in the cache to well start the download.
            
            This method avoid memory buffering and write data directly in a file.
            
            To know the progress of the download, the <see cref="E:Rainbow.FileStorage.FileDownloadUpdated"/> event can be used.
            </summary>
            <param name="fileId"><see cref="T:System.String"/>Id of the file</param>
            <param name="destinationFolder"><see cref="T:System.String"/>Folder path where the file must be saved</param>
            <param name="destinationFileName"><see cref="T:System.String"/>Name of the file once downloaded</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}"/>Callback fired when the operation is done -  True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.FileStorage.DownloadFileFromFileDescriptor(Rainbow.Model.FileDescriptor,System.String,System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            Download file in the specified destination path (a full path with a file name). 
            
            A valid file descriptor must be provided to well start the download.
            
            This method avoid memory buffering and write data directly in a file.
            
            To know the progress of the download, the <see cref="E:Rainbow.FileStorage.FileDownloadUpdated"/> event can be used.
            </summary>
            <param name="fileDescriptor"><see cref="T:Rainbow.Model.FileDescriptor"/>FileDescriptor</param>
            <param name="destinationFolder"><see cref="T:System.String"/>Folder path where the file must be saved</param>
            <param name="destinationFileName"><see cref="T:System.String"/>Name of the file once downloaded</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}"/>Callback fired when the operation is done -  True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.FileStorage.DownloadThumbnailFile(System.String,System.String,System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            Download thumbnail file in the specified destination path (a full path with a file name). 
            
            This method avoid memory buffering and write data directly in a file.
            
            To know the progress of the download, the <see cref="E:Rainbow.FileStorage.FileDownloadUpdated"/> event can be used.
            </summary>
            <param name="fileId"><see cref="T:System.String"/>Id of the file</param>
            <param name="destinationFolder"><see cref="T:System.String"/>Folder path where the file must be saved</param>
            <param name="destinationFileName"><see cref="T:System.String"/>Name of the file once downloaded</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}"/>Callback fired when the operation is done -  True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.FileStorage.CopyFileToPersonalStorage(System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.FileDescriptor}})">
            <summary>
            Copy the file using its file descriptor id to the personal storage of the current user
            </summary>
            <param name="fileId"><see cref="T:System.String"/>Id of the file descriptor</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{FileDescriptor}"/>Callback fired when the operation is done -  FileDescriptor is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.FileStorage.RemoveFileDescriptor(System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            Remove the specified file descriptor (the file asscociated is definitively removed too)
            
            It's necessary to be the owner of the file.
            </summary>
            <param name="fileId"><see cref="T:System.String"/>ID of the file descriptor to remove</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}"/>Callback fired when the operation is done -  True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.FileStorage.GetFileDescriptor(System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.FileDescriptor}})">
            <summary>
            Ask the server the get the file descriptor for the specified file id
            </summary>
            <param name="fileId"><see cref="T:System.String"/>Id of the file</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{FileDescriptor}"/>Callback fired when the operation is done -  FileDescriptor object is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.FileStorage.GetFileDescriptorFromCache(System.String)">
            <summary>
            Get the file descriptor from cache for the specifiec file id
            </summary>
            <param name="fileId"><see cref="T:System.String"/>Id of the file</param>
            <returns><see cref="T:Rainbow.Model.FileDescriptor"/> - The FileDescriptor object or NULL if not found</returns>
        </member>
        <member name="M:Rainbow.FileStorage.GetFilesDescriptorReceivedInConversationFromCache(System.String)">
            <summary>
            Get from cache FileDescriptor received in the specified conversation
            </summary>
            <param name="conversationId"><see cref="T:System.String"/>Conversation Id</param>
            <returns>List of <see cref="T:Rainbow.Model.FileDescriptor"/></returns>
        </member>
        <member name="M:Rainbow.FileStorage.GetFilesDescriptorSentInConversationFromCache(System.String)">
            <summary>
            Get from cache FileDescriptor sent in the specified conversation
            </summary>
            <param name="conversationId"><see cref="T:System.String"/>Conversation Id</param>
            <returns>List of <see cref="T:Rainbow.Model.FileDescriptor"/></returns>
        </member>
        <member name="M:Rainbow.FileStorage.GetFilesDescriptorReceivedInConversationId(System.String,System.Action{Rainbow.SdkResult{System.Collections.Generic.List{Rainbow.Model.FileDescriptor}}})">
            <summary>
            Ask server FileDescriptor received in the specified conversation
            </summary>
            <param name="conversationId"><see cref="T:System.String"/>Conversation Id</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{List{FileDescriptor}}"/>Callback fired when the operation is done -  List of FileDescriptor is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.FileStorage.GetFilesDescriptorSentInConversationId(System.String,System.Action{Rainbow.SdkResult{System.Collections.Generic.List{Rainbow.Model.FileDescriptor}}})">
            <summary>
            Ask server FileDescriptor sent in the specified conversation
            </summary>
            <param name="conversationId"><see cref="T:System.String"/>Conversation Id</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{List{FileDescriptor}}"/>Callback fired when the operation is done -  List of FileDescriptor is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.FileStorage.GetAllFilesDescriptorsSent(System.Action{Rainbow.SdkResult{System.Collections.Generic.List{Rainbow.Model.FileDescriptor}}})">
            <summary>
            Get all files descriptors received by the current user
            
            Method very consuming - It's better to get them by conversation
            </summary>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{List{FileDescriptor}}"/>Callback fired when the operation is done -  List of FileDescriptor is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.FileStorage.GetAllFilesDescriptorsReceived(System.Action{Rainbow.SdkResult{System.Collections.Generic.List{Rainbow.Model.FileDescriptor}}})">
            <summary>
            Get all files descriptors sent by the current user
            
            Method very consuming - It's better to get them by conversation
            </summary>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{List{FileDescriptor}}"/>Callback fired when the operation is done -  List of FileDescriptor is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.FileStorage.GetFilesDescriptorSentFromCache">
            <summary>
            Get all files descriptors received by the current user from cache
            </summary>
            <returns>List of <see cref="T:Rainbow.Model.FileDescriptor"/></returns>
        </member>
        <member name="M:Rainbow.FileStorage.GetFilesDescriptorReceivedFromCache">
            <summary>
            Get all files descriptors sent by the current user from cache
            </summary>
            <returns>List of <see cref="T:Rainbow.Model.FileDescriptor"/></returns>
        </member>
        <member name="M:Rainbow.FileStorage.GetQuotaComsumption(System.Action{Rainbow.SdkResult{Rainbow.Model.QuotaConsumption}})">
            <summary>
            To know the quota consumption of the current user
            </summary>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{QuotaConsumption}"/>Callback fired when the operation is done -  QuotaConsumption is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="T:Rainbow.Groups">
            <summary>
            This service makes it possible to centralize several users by groups. It is up to the end user to create their own groups themselves.
            
            You can create, delete and update groups information but also their members.
            
            An internal cache is used to store information when new data is obtained from server.
            </summary>
        </member>
        <member name="E:Rainbow.Groups.GroupInfoUpdated">
            <summary>
            Event fired when Group info is updated
            
             The <see cref="T:Rainbow.Events.IdEventArgs" /> object permits to know the Id of the Group
            </summary>
        </member>
        <member name="E:Rainbow.Groups.GroupCreated">
            <summary>
            Event fired when a Group is created
            
             The <see cref="T:Rainbow.Events.IdEventArgs" /> object permits to know the Id of the Group
            </summary>
        </member>
        <member name="E:Rainbow.Groups.GroupDeleted">
            <summary>
            Event fired when a Group is deleted
            
             The <see cref="T:Rainbow.Events.IdEventArgs" /> object permits to know the Id of the Group
            </summary>
        </member>
        <member name="E:Rainbow.Groups.GroupMemberUpdated">
            <summary>
            Event fired when a member has beend added or removed from a Group
            
             The <see cref="T:Rainbow.Events.GroupMemberEventArgs" /> object permits to know GroupId, the UserId and the action performed: "added" / "removed"
            </summary>
        </member>
        <member name="M:Rainbow.Groups.CreateGroup(Rainbow.Model.Group,System.Action{Rainbow.SdkResult{Rainbow.Model.Group}})">
            <summary>
            Create the specified Group on the server
            
            Only these properties are used in the Group object provided: Name (Mandatory, max: 255), Comment(max: 255), IsFavorite
            
            </summary>
            <param name="group"><see cref="T:Rainbow.Model.Group"/> Group to create</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Group}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.Group"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Groups.DeleteGroup(System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            Delete the specified Group on the server
            </summary>
            <param name="groupId"><see cref="T:System.String"/> Group ID to delete</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Groups.UpdateGroup(Rainbow.Model.Group,System.Action{Rainbow.SdkResult{Rainbow.Model.Group}})">
            <summary>
            Update the specified Group on the server
            
            Only these properties are used in the Group object provided: Id, (Mandatory), Name (Mandatory - max: 255), Comment(max: 255), IsFavorite
            
            </summary>
            <param name="group"><see cref="T:Rainbow.Model.Group"/> Group to update</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Group}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.Group"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Groups.GetGroupDetails(System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.Group}})">
            <summary>
            Get the group details from the server
            
            It's the only way to have the list of members from the server
            </summary>
            <param name="groupId"><see cref="T:System.String"/> Group Id</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Group}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.Group"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Groups.GetGroupFromCache(System.String)">
            <summary>
            Get the group from the server
            </summary>
            <param name="groupId"><see cref="T:System.String"/> Group Id</param>
            <returns><see cref="T:Group"/> - The groupd found or null</returns>
        </member>
        <member name="M:Rainbow.Groups.GetGroups(System.Action{Rainbow.SdkResult{System.Collections.Generic.List{Rainbow.Model.Group}}})">
            <summary>
            Get all existing groups from the server
            
            Info about members and Group Comment are not provided when this method is used. You need to use <see cref="M:Rainbow.Groups.GetGroupDetails(System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.Group}})"/> to have member details.
            </summary>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{List{Group}}}"/>Callback fired when the operation is done - List of <see cref="T:Rainbow.Model.Group"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Groups.GetGroupsFromCache">
            <summary>
            Get all groups from the cache
            </summary>
            <returns><see cref="T:List{Group}"/> - List of Group found or null</returns>
        </member>
        <member name="M:Rainbow.Groups.AddMember(System.String,System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.Group}})">
            <summary>
            Add member in a group
            </summary>
            <param name="groupId"><see cref="T:System.String"/> Group ID</param>
            <param name="userId"><see cref="T:System.String"/> User ID</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Group}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.Group"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Groups.RemoveMember(System.String,System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.Group}})">
            <summary>
            Remove member froma group
            </summary>
            <param name="groupId"><see cref="T:System.String"/> Group ID</param>
            <param name="userId"><see cref="T:System.String"/> User ID</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Group}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.Group"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Groups.GetAllMembers(System.String,System.Action{Rainbow.SdkResult{System.Collections.Generic.List{System.String}}})">
            <summary>
            Get all members from a group from server
            </summary>
            <param name="groupId"><see cref="T:System.String"/> Group ID</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - List of <see cref="T:System.String"/> (UserId) is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Groups.GetAllMembersFromCache(System.String)">
            <summary>
            Get all members from a group from the cache
            </summary>
            <param name="groupId"><see cref="T:System.String"/> Group ID</param>
            <returns><see cref="T:List{String}"/> - List of UserId found or null</returns>
        </member>
        <member name="T:Rainbow.IniFileParser">
            <summary>
            Allow to read / write data using INI structure - it's possibl to use this object based on a File (<see cref="M:Rainbow.IniFileParser.FromFile(System.String)"/>) or based on a text (<see cref="M:Rainbow.IniFileParser.FromText(System.String)"/>)
            
            It's possible to use encryption for sensible values.
            
            The SDK internally uses already this class to store Login, Password (in encrypted format) and Token (in encrypted format)
            To use same INI file that the SDK, use <see cref="M:Rainbow.Application.GetIniFileParser"/> from <see cref="T:Rainbow.Application"/> object.
            </summary>
        </member>
        <member name="M:Rainbow.IniFileParser.Load">
            <summary>
            Load the INI file content
            </summary>
        </member>
        <member name="M:Rainbow.IniFileParser.GetEncryptValue(System.String)">
            <summary>
            Get a parameter value at the root level which is encrypted
            </summary>
            <param name="key"><see cref="T:System.String"/>The key value</param>
            <returns>Decrypted value or empty string if not found</returns>
        </member>
        <member name="M:Rainbow.IniFileParser.GetEncryptValue(System.String,System.String)">
            <summary>
            Get a parameter value in the section which is encrypted
            </summary>
            <param name="key"><see cref="T:System.String"/>The key value</param>
            <param name="section"><see cref="T:System.String"/>The section value</param>
            <returns>Decrypted value or empty string if not found</returns>
        </member>
        <member name="M:Rainbow.IniFileParser.GetEncryptValue(System.String,System.String,System.String)">
            <summary>
            Get a parameter value, which is encrypted, in the section with a default value if not found
            </summary>
            <param name="key"><see cref="T:System.String"/>The key value</param>
            <param name="section"><see cref="T:System.String"/>The section value</param>
            <param name="default"><see cref="T:System.String"/>The default value</param>
            <returns>Decrypted value or the default value if not found</returns>
        </member>
        <member name="M:Rainbow.IniFileParser.GetValue(System.String)">
            <summary>
            Get a parameter value at the root level
            </summary>
            <param name="key"><see cref="T:System.String"/>The key value</param>
            <returns><see cref="T:System.String"/> - The value of the parameter or "" if not found</returns>
        </member>
        <member name="M:Rainbow.IniFileParser.GetValue(System.String,System.String)">
            <summary>
            Get a parameter value in the section
            </summary>
            <param name="key"><see cref="T:System.String"/>The key value</param>
            <param name="section"><see cref="T:System.String"/>The section value</param>
            <returns><see cref="T:System.String"/> - The value of the parameter or "" if not found</returns>
        </member>
        <member name="M:Rainbow.IniFileParser.GetValue(System.String,System.String,System.String)">
            <summary>
            Get a parameter value in the section with a default value if not found
            </summary>
            <param name="key"><see cref="T:System.String"/>The key value</param>
            <param name="section"><see cref="T:System.String"/>The section value</param>
            <param name="default"><see cref="T:System.String"/>The default value</param>
            <returns><see cref="T:System.String"/> - The value of the parameter or the default value provided</returns>
        </member>
        <member name="M:Rainbow.IniFileParser.Save">
            <summary>
            Save the INI content to file or text (necessary if some values have been modified)
            </summary>
            <returns><see cref="T:System.String"/> - The content of the INI</returns>
        </member>
        <member name="M:Rainbow.IniFileParser.WriteEncryptValue(System.String,System.String)">
            <summary>
            Write a encrypted parameter value at the root level
            </summary>
            <param name="key"><see cref="T:System.String"/>The key value</param>
            <param name="value"><see cref="T:System.String"/>The parameter value</param>
        </member>
        <member name="M:Rainbow.IniFileParser.WriteEncryptValue(System.String,System.String,System.String)">
            <summary>
            Write a encrypted parameter value  in a section
            </summary>
            <param name="key"><see cref="T:System.String"/>The key value</param>
            <param name="section"><see cref="T:System.String"/>The section value</param>
            <param name="value"><see cref="T:System.String"/>The parameter value</param>
        </member>
        <member name="M:Rainbow.IniFileParser.WriteValue(System.String,System.String)">
            <summary>
            Write a parameter value at the root level
            </summary>
            <param name="key"><see cref="T:System.String"/>The key value</param>
            <param name="value"><see cref="T:System.String"/>The parameter value</param>
        </member>
        <member name="M:Rainbow.IniFileParser.WriteValue(System.String,System.String,System.String)">
            <summary>
            Write a parameter value in a section
            </summary>
            <param name="key"><see cref="T:System.String"/>The key value</param>
            <param name="section"><see cref="T:System.String"/>The section value</param>
            <param name="value"><see cref="T:System.String"/>The parameter value</param>
        </member>
        <member name="M:Rainbow.IniFileParser.GetKeys(System.String)">
            <summary>
            Get all the keys names in a section
            </summary>
            <param name="section"><see cref="T:System.String"/>The section value</param>
            <returns>List of <see cref="T:System.String"/> - The list of keys found</returns>
        </member>
        <member name="M:Rainbow.IniFileParser.GetSections">
            <summary>
            Get all the section names of the INI file
            </summary>
            <returns>List of <see cref="T:System.String"/> - The list of sections found</returns>
        </member>
        <member name="M:Rainbow.IniFileParser.FromFile(System.String)">
            <summary>
            Create a INI file parser using the specified file
            </summary>
            <param name="file"><see cref="T:System.String"/>Valid path to a file</param>
            <returns><see cref="T:Rainbow.IniFileParser"/> - IniFileParser object</returns>
        </member>
        <member name="M:Rainbow.IniFileParser.FromText(System.String)">
            <summary>
            Create a INI parser using only the specified text (no file is used in this case - usefull to only parse INI structure)
            </summary>
            <param name="text"><see cref="T:System.String"/>text in INI format to parse</param>
            <returns><see cref="T:Rainbow.IniFileParser"/> - IniFileParser object</returns>
        </member>
        <member name="T:Rainbow.InstantMessaging">
            <summary>
            This object is available only using <see cref="M:Rainbow.Application.GetInstantMessaging"/> from <see cref="T:Rainbow.Application"/> object.
            
            This class is mainly used to manage IM messages:
             - To get / send <see cref="T:Rainbow.Model.Message"/> to contacts or bubbles (with or without a file) 
             - To reply to a <see cref="T:Rainbow.Model.Message"/>
             - To edit / delete a <see cref="T:Rainbow.Model.Message"/>
             - To mark a <see cref="T:Rainbow.Model.Message"/> as read
             - To indicate that the current contact is typing (or not) in a conversation
             - To get an historic of <see cref="T:Rainbow.Model.Message"/> sent / received in a conversation.
            
            A cache is used internally to store all IM messages sent / received.
            
            It's also possible to send / answer to <see cref="T:Rainbow.Model.AckMessage"/>. This kind of message can only be send to a specific resource (or device) of a Peer. (IM Message are sent to ALL resources of a Peer.)
            
            There is no store / history for <see cref="T:Rainbow.Model.AckMessage"/>. A answer is expected by the sender of <see cref="T:Rainbow.Model.AckMessage"/> if the receiver can manage it. 
            
            <see cref="T:Rainbow.Model.AckMessage"/> are not interpreted / managed by standard Rainbow client (Desktop, Web, iOS, Android - i.e. UCaaS Rainbow client)
            
            </summary>
        </member>
        <member name="E:Rainbow.InstantMessaging.UserTypingChanged">
            <summary>
            Event raised when a user is typing or finished to type in a conversation
            
             The <see cref="T:Rainbow.Events.UserTypingEventArgs" /> object permits to know the user Jid, the conversation Id and if user is typing or not.
            </summary>
        </member>
        <member name="E:Rainbow.InstantMessaging.AckMessageReceived">
            <summary>
            Event raised when the current user received an AckMessage 
            </summary>
        </member>
        <member name="E:Rainbow.InstantMessaging.AdHocCommandReceived">
            <summary>
            Event raised when the current user received an AdHocCommand 
            </summary>
        </member>
        <member name="E:Rainbow.InstantMessaging.MessageReceived">
            <summary>
            Event raised when the current user received a message from a conversation
            
             The <see cref="T:Rainbow.Events.UserTypingEventArgs" /> object permits to know the user Jid, the conversation Id and if user is typing or not.
            </summary>
        </member>
        <member name="E:Rainbow.InstantMessaging.ReceiptReceived">
            <summary>
            Event fired when a message receipt is received
            
             The <see cref="T:Rainbow.Events.ReceiptReceivedEventArgs" /> object permits to know the id of the conversation, the message id and the receipt type
            </summary>
        </member>
        <member name="E:Rainbow.InstantMessaging.MessagesAllRead">
            <summary>
            Event fired when all messages in a conversation have been set to <see cref="F:Rainbow.Model.ReceiptType.ClientRead"/>
            
             The <see cref="T:Rainbow.Events.IdEventArgs" /> object permits to know the id of the conversation
            </summary>
        </member>
        <member name="E:Rainbow.InstantMessaging.MessagesAllDeleted">
            <summary>
            Event fired when all messages in a conversation have been deleted - can only occur in one to one conversation (not in a bubble)
            
            Before this event is fired, related messages in cache are deleted.
            
             The <see cref="T:Rainbow.Events.JidEventArgs" /> object permits to know the id of the conversation
            </summary>
        </member>
        <member name="M:Rainbow.InstantMessaging.GetOneMessageFromContactId(System.String,System.String,System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.Message}})">
            <summary>
            To retrieve ONE message archived on server exchanged in P2P with the specified contact id based on the specified message Id and the timestamp
            
            Time stamp is mandatory - the search is performed using it.
            
            Once results are returned, we look for a message with the message id specified.
            </summary>
            <param name="contactId"><see cref="T:System.String"/> Id of the contact</param>
            <param name="messageId"><see cref="T:System.String"/>Id of the message</param>
            <param name="stamp"><see cref="T:System.String"/>Time stamp</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Message}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.Message"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.InstantMessaging.GetOneMessageFromBubbleId(System.String,System.String,System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.Message}})">
            <summary>
            To retrieve ONE message archived on server exchanged in a bubble based on the specified message Id and the timestamp
            
            Time stamp is mandatory - the search is performed using it.
            
            Once results are returned, we look for a message with the message id specified.
            </summary>
            <param name="bubbleId"><see cref="T:System.String"/> Id of the bubble</param>
            <param name="messageId"><see cref="T:System.String"/>Id of the message</param>
            <param name="stamp"><see cref="T:System.String"/>Time stamp</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Message}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.Message"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.InstantMessaging.GetOneMessageFromConversationId(System.String,System.String,System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.Message}})">
            <summary>
            To retrieve ONE message archived on server exchanged in a conversation based on the specified message Id and the timestamp
            
            Time stamp is mandatory - the search is performed using it.
            
            Once results are returned, we look for a message with the message id specified.
            </summary>
            <param name="conversationId"><see cref="T:System.String"/> Id of the conversation</param>
            <param name="messageId"><see cref="T:System.String"/>Id of the message</param>
            <param name="stamp"><see cref="T:System.String"/>Time stamp</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Message}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.Message"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.InstantMessaging.GetOneMessageFromContactIdFromCache(System.String,System.String)">
            <summary>
            Retrieve a message stored in the cache by its id exchanged with the specifed contact id
            </summary>
            <param name="contactId"><see cref="T:System.String"/> Id of the contact</param>
            <param name="messageId"><see cref="T:System.String"/> Id of the message</param>
            <returns><see cref="T:Rainbow.Model.Message"/> Message object or NULL if not found</returns>
        </member>
        <member name="M:Rainbow.InstantMessaging.GetOneMessageFromBubbleIdFromCache(System.String,System.String)">
            <summary>
            Retrieve a message stored in the cache by its id exchanged in the specifed bubble id
            </summary>
            <param name="bubbleId"><see cref="T:System.String"/> Id of the bubble</param>
            <param name="messageId"><see cref="T:System.String"/> Id of the message</param>
            <returns><see cref="T:Rainbow.Model.Message"/> Message object or NULL if not found</returns>
        </member>
        <member name="M:Rainbow.InstantMessaging.GetOneMessageFromConversationIdFromCache(System.String,System.String)">
            <summary>
            Retrieve a message stored in the cache by its id exchanged in the specifed conversation id
            </summary>
            <param name="conversationId"><see cref="T:System.String"/> Id of the conversation</param>
            <param name="messageId"><see cref="T:System.String"/> Id of the message</param>
            <returns><see cref="T:Rainbow.Model.Message"/> Message object or NULL if not found</returns>
        </member>
        <member name="M:Rainbow.InstantMessaging.GetMessagesFromBot(Rainbow.Model.Bot,System.Int32,System.Action{Rainbow.SdkResult{System.Collections.Generic.List{Rainbow.Model.Message}}})">
            <summary>
            To retrieve older messages archived from server based on the specified Bot.
            </summary>
            <param name="bot"><see cref="T:Rainbow.Model.Bot"/> Bot object</param>
            <param name="nbMessages"><see cref="T:System.Int32"/>Number of messages to retrieve</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{List{Message}}}"/>Callback fired when the operation is done - <see cref="T:List{Message}"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.InstantMessaging.GetMessagesFromBotJid(System.String,System.Int32,System.Action{Rainbow.SdkResult{System.Collections.Generic.List{Rainbow.Model.Message}}})">
            <summary>
            To retrieve older messages archived from server based on the specified Bot JID.
            </summary>
            <param name="botJid"><see cref="T:System.String"/>contact Jid</param>
            <param name="nbMessages"><see cref="T:System.Int32"/>Number of messages to retrieve</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{List{Message}}}"/>Callback fired when the operation is done - <see cref="T:List{Message}"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.InstantMessaging.GetMessagesFromBotId(System.String,System.Int32,System.Action{Rainbow.SdkResult{System.Collections.Generic.List{Rainbow.Model.Message}}})">
            <summary>
            To retrieve older messages archived from server based on the specified bot ID.
            </summary>
            <param name="botId"><see cref="T:System.String"/>contact ID</param>
            <param name="nbMessages"><see cref="T:System.Int32"/>Number of messages to retrieve</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{List{Message}}}"/>Callback fired when the operation is done - <see cref="T:List{Message}"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.InstantMessaging.GetMessagesFromContact(Rainbow.Model.Contact,System.Int32,System.Action{Rainbow.SdkResult{System.Collections.Generic.List{Rainbow.Model.Message}}})">
            <summary>
            To retrieve older messages archived from server based on the specified contact.
            </summary>
            <param name="contact"><see cref="T:Rainbow.Model.Contact"/> Contact object</param>
            <param name="nbMessages"><see cref="T:System.Int32"/>Number of messages to retrieve</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{List{Message}}}"/>Callback fired when the operation is done - <see cref="T:List{Message}"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.InstantMessaging.GetMessagesFromContactJid(System.String,System.Int32,System.Action{Rainbow.SdkResult{System.Collections.Generic.List{Rainbow.Model.Message}}})">
            <summary>
            To retrieve older messages archived from server based on the specified contact JID.
            </summary>
            <param name="contactJid"><see cref="T:System.String"/>contact Jid</param>
            <param name="nbMessages"><see cref="T:System.Int32"/>Number of messages to retrieve</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{List{Message}}}"/>Callback fired when the operation is done - <see cref="T:List{Message}"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.InstantMessaging.GetMessagesFromContactId(System.String,System.Int32,System.Action{Rainbow.SdkResult{System.Collections.Generic.List{Rainbow.Model.Message}}})">
            <summary>
            To retrieve older messages archived from server based on the specified contact ID.
            </summary>
            <param name="contactId"><see cref="T:System.String"/>contact ID</param>
            <param name="nbMessages"><see cref="T:System.Int32"/>Number of messages to retrieve</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{List{Message}}}"/>Callback fired when the operation is done - <see cref="T:List{Message}"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.InstantMessaging.GetMessagesFromBubble(Rainbow.Model.Bubble,System.Int32,System.Action{Rainbow.SdkResult{System.Collections.Generic.List{Rainbow.Model.Message}}})">
            <summary>
            To retrieve older messages archived from server based on the specified bubble.
            </summary>
            <param name="bubble"><see cref="T:Rainbow.Model.Bubble"/> Bubble object</param>
            <param name="nbMessages"><see cref="T:System.Int32"/>Number of messages to retrieve</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{List{Message}}}"/>Callback fired when the operation is done - <see cref="T:List{Message}"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.InstantMessaging.GetMessagesFromBubbleJid(System.String,System.Int32,System.Action{Rainbow.SdkResult{System.Collections.Generic.List{Rainbow.Model.Message}}})">
            <summary>
            To retrieve older messages archived from server based on the specified bubble JID.
            </summary>
            <param name="bubbleJid"><see cref="T:System.String"/>Bubble Jid</param>
            <param name="nbMessages"><see cref="T:System.Int32"/>Number of messages to retrieve</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{List{Message}}}"/>Callback fired when the operation is done - <see cref="T:List{Message}"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.InstantMessaging.GetMessagesFromBubbleId(System.String,System.Int32,System.Action{Rainbow.SdkResult{System.Collections.Generic.List{Rainbow.Model.Message}}})">
            <summary>
            To retrieve older messages archived from server based on the specified bubble ID.
            </summary>
            <param name="bubbleId"><see cref="T:System.String"/>bubble ID</param>
            <param name="nbMessages"><see cref="T:System.Int32"/>Number of messages to retrieve</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{List{Message}}}"/>Callback fired when the operation is done - <see cref="T:List{Message}"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.InstantMessaging.GetMessagesFromConversation(Rainbow.Model.Conversation,System.Int32,System.Action{Rainbow.SdkResult{System.Collections.Generic.List{Rainbow.Model.Message}}})">
            <summary>
            To retrieve older messages archived from server based on the specified conversation.
            </summary>
            <param name="conversation"><see cref="T:Rainbow.Model.Conversation"/> Conversation object</param>
            <param name="nbMessages"><see cref="T:System.Int32"/>Number of messages to retrieve</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{List{Message}}}"/>Callback fired when the operation is done - <see cref="T:List{Message}"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.InstantMessaging.GetMessagesFromConversationId(System.String,System.Int32,System.Action{Rainbow.SdkResult{System.Collections.Generic.List{Rainbow.Model.Message}}})">
            <summary>
            To retrieve older messages archived from server based on the specified conversation ID.
            </summary>
            <param name="conversationId"><see cref="T:System.String"/>Conversation Id</param>
            <param name="nbMessages"><see cref="T:System.Int32"/>Number of messages to retrieve</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{List{Message}}}"/>Callback fired when the operation is done - <see cref="T:List{Message}"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.InstantMessaging.GetAllMessagesFromContactFromCache(Rainbow.Model.Contact)">
            <summary>
            Get the full list of messages already stored in cache  from the conversation with this contact
            </summary>
            <param name="contact"><see cref="T:Rainbow.Model.Contact"/> Contact object</param>
            <returns><see cref="T:List{Message}"/> - List of messages or null if contact null or no messages already stored</returns>
        </member>
        <member name="M:Rainbow.InstantMessaging.GetAllMessagesFromContactJidFromCache(System.String)">
            <summary>
            Get the full list of messages already stored in cache  from the conversation with this contact jid
            </summary>
            <param name="contactJid"><see cref="T:System.String"/>Contact Jid</param>
            <returns><see cref="T:List{Message}"/> - List of messages or null if contact not found for this jid or no messages already stored</returns>
        </member>
        <member name="M:Rainbow.InstantMessaging.GetAllMessagesFromContactIdFromCache(System.String)">
            <summary>
            Get the full list of messages already stored in cache from the conversation with this contact id
            </summary>
            <param name="contactId"><see cref="T:System.String"/>Contact Id</param>
            <returns><see cref="T:List{Message}"/> - List of messages or null if contact not found for this id or no messages already stored</returns>
        </member>
        <member name="M:Rainbow.InstantMessaging.ClearAllMessagesFromContactFromCache(Rainbow.Model.Contact)">
            <summary>
            Clear all messages already stored in cache from the conversation with this contact
            </summary>
            <param name="contact"><see cref="T:Rainbow.Model.Contact"/>Contact object</param>
            <returns><see cref="T:System.Boolean"/> - True if messages have been deleted from this conversation</returns>
        </member>
        <member name="M:Rainbow.InstantMessaging.ClearAllMessagesFromContactJidFromCache(System.String)">
            <summary>
            Clear all messages already stored in cache from the conversation with this contact jid
            </summary>
            <param name="contactJid"><see cref="T:System.String"/>Contact Jid</param>
            <returns><see cref="T:System.Boolean"/> - True if messages have been deleted from this conversation</returns>
        </member>
        <member name="M:Rainbow.InstantMessaging.ClearAllMessagesFromContactIdFromCache(System.String)">
            <summary>
            Clear all messages already stored in cache from the conversation with this contact id
            </summary>
            <param name="contactId"><see cref="T:System.String"/>Contact id</param>
            <returns><see cref="T:System.Boolean"/> - True if messages have been deleted from this conversation</returns>
        </member>
        <member name="M:Rainbow.InstantMessaging.GetAllMessagesFromBubbleFromCache(Rainbow.Model.Bubble)">
            <summary>
            Get the full list of messages already stored in cache for the specified bubble
            </summary>
            <param name="bubble"><see cref="T:Rainbow.Model.Bubble"/> Bubble object</param>
            <returns><see cref="T:List{Message}"/> - List of messages or null if bubble is null or no messages already stored</returns>
        </member>
        <member name="M:Rainbow.InstantMessaging.GetAllMessagesFromBubbleJidFromCache(System.String)">
            <summary>
            Get the full list of messages already stored in cache for the specified bubble jid
            </summary>
            <param name="bubbleJid"><see cref="T:System.String"/>Bubble Jid</param>
            <returns><see cref="T:List{Message}"/> - List of messages or null if bubble not found for this jid or no messages already stored</returns>
        </member>
        <member name="M:Rainbow.InstantMessaging.GetAllMessagesFromBubbleIdFromCache(System.String)">
            <summary>
            Get the full list of messages already stored in cache for the specified bubble id
            </summary>
            <param name="bubbleId"><see cref="T:System.String"/>Bubble Id</param>
            <returns><see cref="T:List{Message}"/> - List of messages or null if bubble not found for this id or no messages already stored</returns>
        </member>
        <member name="M:Rainbow.InstantMessaging.ClearAllMessagesFromBubbleFromCache(Rainbow.Model.Bubble)">
            <summary>
            Clear all messages already stored in cache from the conversation in this bubble
            </summary>
            <param name="bubble"><see cref="T:Rainbow.Model.Bubble"/>Bubble object</param>
            <returns><see cref="T:System.Boolean"/> - True if messages have been deleted from this conversation</returns>
        </member>
        <member name="M:Rainbow.InstantMessaging.ClearAllMessagesFromBubbleJidFromCache(System.String)">
            <summary>
            Clear all messages already stored in cache from the conversation in this bubble jid
            </summary>
            <param name="bubbleJid"><see cref="T:System.String"/>Bubble jid</param>
            <returns><see cref="T:System.Boolean"/> - True if messages have been deleted from this conversation</returns>
        </member>
        <member name="M:Rainbow.InstantMessaging.ClearAllMessagesFromBubbleIdFromCache(System.String)">
            <summary>
            Clear all messages already stored in cache from the conversation in this bubble id
            </summary>
            <param name="bubbleId"><see cref="T:System.String"/>Bubble id</param>
            <returns><see cref="T:System.Boolean"/> - True if messages have been deleted from this conversation</returns>
        </member>
        <member name="M:Rainbow.InstantMessaging.GetAllMessagesFromBotFromCache(Rainbow.Model.Bot)">
            <summary>
            Get the full list of messages already stored in cache for the specified bot
            </summary>
            <param name="bot"><see cref="T:Rainbow.Model.Bubble"/> Bot object</param>
            <returns><see cref="T:List{Message}"/> - List of messages or null if Bot is null or no messages already stored</returns>
        </member>
        <member name="M:Rainbow.InstantMessaging.GetAllMessagesFromBotJidFromCache(System.String)">
            <summary>
            Get the full list of messages already stored in cache for the specified bot jid
            </summary>
            <param name="botJid"><see cref="T:System.String"/>Bot Jid</param>
            <returns><see cref="T:List{Message}"/> - List of messages or null if bot not found for this jid or no messages already stored</returns>
        </member>
        <member name="M:Rainbow.InstantMessaging.GetAllMessagesFromBotIdFromCache(System.String)">
            <summary>
            Get the full list of messages already stored in cache for the specified bot id
            </summary>
            <param name="botId"><see cref="T:System.String"/>Bot Id</param>
            <returns><see cref="T:List{Message}"/> - List of messages or null if bot not found for this id or no messages already stored</returns>
        </member>
        <member name="M:Rainbow.InstantMessaging.ClearAllMessagesFromBotFromCache(Rainbow.Model.Bot)">
            <summary>
            Clear all messages already stored in cache from the conversation whit this bot
            </summary>
            <param name="bot"><see cref="T:Rainbow.Model.Bot"/>Bot object</param>
            <returns><see cref="T:System.Boolean"/> - True if messages have been deleted from this conversation</returns>
        </member>
        <member name="M:Rainbow.InstantMessaging.ClearAllMessagesFromBotJidFromCache(System.String)">
            <summary>
            Clear all messages already stored in cache from the conversation with this bot jid
            </summary>
            <param name="botJid"><see cref="T:System.String"/>Bot jid</param>
            <returns><see cref="T:System.Boolean"/> - True if messages have been deleted from this conversation</returns>
        </member>
        <member name="M:Rainbow.InstantMessaging.ClearAllMessagesFromBotIdFromCache(System.String)">
            <summary>
            Clear all messages already stored in cache from the conversation with this bot id
            </summary>
            <param name="botId"><see cref="T:System.String"/>Bot id</param>
            <returns><see cref="T:System.Boolean"/> - True if messages have been deleted from this conversation</returns>
        </member>
        <member name="M:Rainbow.InstantMessaging.GetAllMessagesFromConversationFromCache(Rainbow.Model.Conversation)">
            <summary>
            Get the full list of messages already stored in cache for the specified conversation 
            </summary>
            <param name="conversation"><see cref="T:Rainbow.Model.Conversation"/> Conversation object</param>
            <returns><see cref="T:List{Message}"/> - List of messages or null if conversation is null or no messages already stored</returns>
        </member>
        <member name="M:Rainbow.InstantMessaging.GetAllMessagesFromConversationIdFromCache(System.String)">
            <summary>
            Get the full list of messages already stored in cache for the specified conversation id
            </summary>
            <param name="conversationId"><see cref="T:System.String"/>Conversation Id</param>
            <returns><see cref="T:List{Message}"/> - List of messages or null if conversation not found for this id or no messages already stored</returns>
        </member>
        <member name="M:Rainbow.InstantMessaging.ClearAllMessagesFromConversationFromCache(Rainbow.Model.Conversation)">
            <summary>
            Clear all messages already stored in cache from the conversation
            </summary>
            <param name="conversation"><see cref="T:Rainbow.Model.Conversation"/>Conversation object</param>
            <returns><see cref="T:System.Boolean"/> - True if messages have been deleted from this conversation</returns>
        </member>
        <member name="M:Rainbow.InstantMessaging.ClearAllMessagesFromConversationIdFromCache(System.String)">
            <summary>
            Clear all messages already stored in cache from the conversation id
            </summary>
            <param name="conversationId"><see cref="T:System.String"/>Conversation Id</param>
            <returns><see cref="T:System.Boolean"/> - True if messages have been deleted from this conversation</returns>
        </member>
        <member name="M:Rainbow.InstantMessaging.GetLastMessageSent(System.String)">
            <summary>
            To get the last Message sent in the specified conversation
            </summary>
            <param name="conversationId"><see cref="T:System.String"/>Id of the conversation</param>
            <returns><see cref="T:Rainbow.Model.Message"/> - Last Message sent or null if not found</returns>
        </member>
        <member name="M:Rainbow.InstantMessaging.GetLastMessage(System.String)">
            <summary>
            To get the last Message received in a conversation
            </summary>
            <param name="conversationId"><see cref="T:System.String"/>Id of the conversation</param>
            <returns><see cref="T:Rainbow.Model.Message"/> - Last Message received in this conversation or null if not found</returns>
        </member>
        <member name="M:Rainbow.InstantMessaging.MarkMessageAsRead(System.String,System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            Mark as Read the specified message for the specified conversation
            </summary>
            <param name="conversationId"><see cref="T:System.String"/>ID of the conversation</param>
            <param name="messageId"><see cref="T:System.String"/>ID of the message</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - Boolean is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.InstantMessaging.MarkAllMessagesAsRead(System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            Mark as Read all messages for the specified conversation
            </summary>
            <param name="conversationId"><see cref="T:System.String"/>ID of the conversation</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - Boolean is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.InstantMessaging.SendIsTypingInConversationById(System.String,System.Boolean,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            Indicates if current user is typing (or not) in the specified conversation (by id)
            </summary>
            <param name="conversationId"><see cref="T:System.String"/>ID of the convarsation</param>
            <param name="isTyping"><see cref="T:System.Boolean"/>Current user is typing or not </param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - Boolean is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.InstantMessaging.SendIsTypingInConversation(Rainbow.Model.Conversation,System.Boolean,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            Indicates if current user is typing (or not) in the specified conversation
            </summary>
            <param name="conversation"><see cref="T:Rainbow.Model.Conversation"/>Conversation object</param>
            <param name="isTyping"><see cref="T:System.Boolean"/>Current user is typing or not </param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - Boolean is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.InstantMessaging.ForwardMessage(System.String,System.String,System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.Message}})">
            <summary>
            Forward a message from another conversation
            </summary>
            <param name="sourceConversationId"><see cref="T:System.String"/>Id of the conversation where the message to forward is stored</param>
            <param name="sourceMessageID"><see cref="T:System.String"/>Id of the message to forward</param>
            <param name="destinationConversationId"><see cref="T:System.String"/>Id of the conversation to forward the message</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Message}}"/>Callback fired when the operation is done - Message object is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.InstantMessaging.EditMessage(System.String,System.String,System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.Message}})">
            <summary>
            Edit a previous message sent in the specified conversation with a new message but without any alternative content.
            </summary>
            <param name="conversationId"><see cref="T:System.String"/>Id of the conversation</param>
            <param name="messageId"><see cref="T:System.String"/>Id of the message to edit</param>
            <param name="newMessage"><see cref="T:System.String"/>new message</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Message}}"/>Callback fired when the operation is done - Message object is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.InstantMessaging.EditMessage(System.String,System.String,System.String,System.Collections.Generic.List{Rainbow.Model.MessageAlternativeContent},System.Action{Rainbow.SdkResult{Rainbow.Model.Message}})">
            <summary>
            Edit a previous message sent in the specified conversation with a new message and with new alternative content.
            </summary>
            <param name="conversationId"><see cref="T:System.String"/>Id of the conversation</param>
            <param name="messageId"><see cref="T:System.String"/>Id of the message to edit</param>
            <param name="newMessage"><see cref="T:System.String"/>new message</param>
            <param name="newAlternativeContent"><see cref="T:System.Collections.Generic.List`1"/>new alternative content</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Message}}"/>Callback fired when the operation is done - Message object is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.InstantMessaging.DeleteMessage(System.String,System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.Message}})">
            <summary>
            Delete a previous message sent in the specified conversation
            </summary>
            <param name="conversationId"><see cref="T:System.String"/>Id of the conversation</param>
            <param name="messageId"><see cref="T:System.String"/>Id of the message to edit</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Message}}"/>Callback fired when the operation is done - Message object is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.InstantMessaging.ReplyToMessage(System.String,System.String,System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.Message}})">
            <summary>
            Reply to a previous message sent in the specified conversation
            </summary>
            <param name="conversationId"><see cref="T:System.String"/>Id of the conversation</param>
            <param name="messageID"><see cref="T:System.String"/>Id of the message used for reply</param>
            <param name="replyMessage"><see cref="T:System.String"/>The message used as reply</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Message}}"/>Callback fired when the operation is done - Message object is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.InstantMessaging.DeleteAllMessages(System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            To delete all message in a P2P or in a Bubble conversation.
            Messages are deleted only for current user. They are NOT deleted for remote(s) user(s).
            </summary>
            <param name="conversationId"><see cref="T:System.String"/>Id of the conversation</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - Boolean is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.InstantMessaging.AnswerToUrgentMessage(System.String,System.String,System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.Message}})">
            <summary>
            To answer to an urgent message ("Acknowledged", "Ignored", ...)
            
            It perfomrs the same than the "ReplyToMessage" method
            </summary>
            <param name="conversationId"><see cref="T:System.String"/>Id of the conversation</param>
            <param name="messageID"><see cref="T:System.String"/>Id of the message used for reply</param>
            <param name="replyMessage"><see cref="T:System.String"/>The message used as reply - "Acknowledged" by default</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Message}}"/>Callback fired when the operation is done - Message object is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.InstantMessaging.SendAdHocCommand(Rainbow.Model.MessageType,System.String,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Xml.XmlElement,System.Action{Rainbow.SdkResult{Rainbow.Model.AdHocCommand}},System.Int32)">
            <summary>
            To send an <see cref="T:Rainbow.Model.AdHocCommand"/> to a specific user resource (i.e. a specific device used by a user and not all of these devices) using XML content.
            
            A delay (in ms) can be specified or not. After this delay, if no answer has been received the callback is called with an error.
            
            If no delay is used (-1 is set - default value) and if the Peer doesn't answer to the AdHocCommand, the callback will be never called.
            
            </summary>
            <param name="type"><see cref="T:Rainbow.Model.MessageType"/>Message Type (get or set)</param>
            <param name="userJid"><see cref="T:System.String"/>Jid of the Peer - cannot be null</param>
            <param name="userResource"><see cref="T:System.String"/>Resource of the Peer - cannot be null</param>
            <param name="node"><see cref="T:System.String"/>Node describing the AdHocCommand - cannot be null</param>
            <param name="session"><see cref="T:System.String"/>Session describing the AdHocCommand - can be null</param>
            <param name="attributes"><see cref="T:System.Collections.Generic.Dictionary`2"/>Dictionnary of attributes to describe the AdHocCommand - can be null</param>
            <param name="xmlContent"><see cref="T:System.Xml.XmlElement"/>Content in XML - can be null</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{AdHocCommand}}"/>Callback fired when an answer to AdHocCommand is received or if the operation cannot be performed (invalid argument for example) - <see cref="T:Rainbow.Model.AdHocCommand"/> is expected (it's the answer to the AdHocCommand send to the tPeer) in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs.</param>
            <param name="msDelay"><see cref="T:System.Int32"/>Delay (in ms) before to use the callback with an error if the Peed didn't answered yet. -1 by default (i.e. infinite delay)</param>
        </member>
        <member name="M:Rainbow.InstantMessaging.SendAdHocCommand(Rainbow.Model.AdHocCommand,System.Action{Rainbow.SdkResult{Rainbow.Model.AdHocCommand}},System.Int32)">
            <summary>
            To send an <see cref="T:Rainbow.Model.AdHocCommand"/> to a specific user resource (i.e. a specific device used by a user and not all of these devices) using XML content.
            
            A delay (in ms) can be specified or not. After this delay, if no answer has been received the callback is called with an error.
            
            If no delay is used (-1 is set - default value) and if the Peer doesn't answer to the AdHocCommand, the callback will be never called.
            
            </summary>
            <param name="adHocCommand"><see cref="T:Rainbow.Model.AdHocCommand"/>AdHocCommand to send</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{AdHocCommand}}"/>Callback fired when an answer to AdHocCommand is received or if the operation cannot be performed (invalid argument for example) - <see cref="T:Rainbow.Model.AdHocCommand"/> is expected (it's the answer to the AdHocCommand send to the tPeer) in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs.</param>
            <param name="msDelay"><see cref="T:System.Int32"/>Delay (in ms) before to use the callback with an error if the Peed didn't answered yet. -1 by default (i.e. infinite delay)</param>
        </member>
        <member name="M:Rainbow.InstantMessaging.AnwserToAdHocCommand(Rainbow.Model.AdHocCommand,Rainbow.Model.MessageType,System.String,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Xml.XmlElement,System.Action{Rainbow.SdkResult{System.Boolean}},System.Int32)">
            <summary>
            To answer to an AdHocCommand received.
            </summary>
            <param name="adHocCommandReceived"><see cref="T:Rainbow.Model.AdHocCommand"/> the AdHocCommand received - cannot be null</param>
            <param name="type"><see cref="T:Rainbow.Model.MessageType"/>Message Type (result or error)</param>
            <param name="userJid"><see cref="T:System.String"/>Jid of the Peer - cannot be null</param>
            <param name="userResource"><see cref="T:System.String"/>Resource of the Peer - cannot be null</param>
            <param name="node"><see cref="T:System.String"/>Node describing the AdHocCommand - cannot be null</param>
            <param name="session"><see cref="T:System.String"/>Session describing the AdHocCommand - can be null</param>
            <param name="attributes"><see cref="T:System.Collections.Generic.Dictionary`2"/>Dictionnary of attributes to describe the AdHocCommand - can be null</param>
            <param name="xmlContent"><see cref="T:System.Xml.XmlElement"/>Content in XML - can be null</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{AdHocCommand}}"/>Callback fired when an answer to AdHocCommand is received or if the operation cannot be performed (invalid argument for example) - <see cref="T:Rainbow.Model.AdHocCommand"/> is expected (it's the answer to the AdHocCommand send to the tPeer) in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs.</param>
            <param name="msDelay"><see cref="T:System.Int32"/>Delay (in ms) before to use the callback with an error if the Peed didn't answered yet. -1 by default (i.e. infinite delay)</param>
        </member>
        <member name="M:Rainbow.InstantMessaging.AnwserToAdHocCommand(Rainbow.Model.AdHocCommand,Rainbow.Model.AdHocCommand,System.Action{Rainbow.SdkResult{System.Boolean}},System.Int32)">
            <summary>
            To answer to an AdHocCommand received.
            </summary>
            <param name="adHocCommandReceived"><see cref="T:Rainbow.Model.AdHocCommand"/> the AdHocCommand received - cannot be null</param>
            <param name="adHocCommand"><see cref="T:Rainbow.Model.AdHocCommand"/>The AdHocCommand to sent as answer</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{AdHocCommand}}"/>Callback fired when an answer to AdHocCommand is received or if the operation cannot be performed (invalid argument for example) - <see cref="T:Rainbow.Model.AdHocCommand"/> is expected (it's the answer to the AdHocCommand send to the tPeer) in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs.</param>
            <param name="msDelay"><see cref="T:System.Int32"/>Delay (in ms) before to use the callback with an error if the Peed didn't answered yet. -1 by default (i.e. infinite delay)</param>
        </member>
        <member name="M:Rainbow.InstantMessaging.SendAckMessage(Rainbow.Model.MessageType,System.String,System.String,System.String,System.String,System.Xml.XmlElement,System.Action{Rainbow.SdkResult{Rainbow.Model.AckMessage}},System.Int32)">
            <summary>
            To send an <see cref="T:Rainbow.Model.AckMessage"/> to a specific user resource (i.e. a specific device used by a user and not all of these devices) using XML content.
            
            A delay (in ms) can be specified or not. After this delay, if no answer has been received the callback is called with an error.
            
            If no delay is used (-1 is set - default value) and if the Peer doesn't answer to the AckMessage, the callback will be never called.
            
            </summary>
            <param name="type"><see cref="T:Rainbow.Model.MessageType"/>Message Type (get or set)</param>
            <param name="userJid"><see cref="T:System.String"/>Jid of the Peer - cannot be null</param>
            <param name="userResource"><see cref="T:System.String"/>Resource of the Peer - cannot be null</param>
            <param name="action"><see cref="T:System.String"/>Action describing the AckMessage - cannot be null</param>
            <param name="mimeType"><see cref="T:System.String"/>Mime type describing the XML content - cannot be null - generally "application/xml" is used</param>
            <param name="xmlContent"><see cref="T:System.Xml.XmlElement"/>Content in XML - cannot be null</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{AckMessage}}"/>Callback fired when an answer to AckMessage is received or if the operation cannot be performed (invalid argument for example) - <see cref="T:Rainbow.Model.AckMessage"/> is expected (it's the answer to the AckMessage send to the tPeer) in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs.</param>
            <param name="msDelay"><see cref="T:System.Int32"/>Delay (in ms) before to use the callback with an error if the Peed didn't answered yet. -1 by default (i.e. infinite delay)</param>
        </member>
        <member name="M:Rainbow.InstantMessaging.SendAckMessage(Rainbow.Model.MessageType,System.String,System.String,System.String,System.String,System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.AckMessage}},System.Int32)">
            <summary>
            To send an <see cref="T:Rainbow.Model.AckMessage"/> to a specific user resource (i.e. a specific device used by a user and not all of these devices) using XML content.
            
            A delay (in ms) can be specified or not. After this delay, if no answer has been received the callback is called with an error.
            
            If no delay is used (-1 is set - default value) and if the Peer doesn't answer to the AckMessage, the callback will be never called.
            
            </summary>
            <param name="type"><see cref="T:Rainbow.Model.MessageType"/>Message Type (get or set)</param>
            <param name="userJid"><see cref="T:System.String"/>Jid of the Peer - cannot be null</param>
            <param name="userResource"><see cref="T:System.String"/>Resource of the Peer - cannot be null</param>
            <param name="action"><see cref="T:System.String"/>Action describing the AckMessage - cannot be null</param>
            <param name="mimeType"><see cref="T:System.String"/>Mime tyep describing the XML content - can be null</param>
            <param name="content"><see cref="T:System.String"/>Content as a String - can be null</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{AckMessage}}"/>Callback fired when an answer to AckMessage is received or if the operation cannot be performed (invalid argument for example) - <see cref="T:Rainbow.Model.AckMessage"/> is expected (it's the answer to the AckMessage send to the tPeer) in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs.</param>
            <param name="msDelay"><see cref="T:System.Int32"/>Delay (in ms) before to use the callback with an error if the Peed didn't answered yet. -1 by default (i.e. infinite delay)</param>
        </member>
        <member name="M:Rainbow.InstantMessaging.SendAckMessage(Rainbow.Model.AckMessage,System.Action{Rainbow.SdkResult{Rainbow.Model.AckMessage}},System.Int32)">
            <summary>
            To send an <see cref="T:Rainbow.Model.AckMessage"/> to a specific user resource (i.e. a specific device used by a user and not all of these devices) using XML content.
            
            A delay (in ms) can be specified or not. After this delay, if no answer has been received the callback is called with an error.
            
            If no delay is used (-1 is set - default value) and if the Peer doesn't answer to the AckMessage, the callback will be never called.
            
            </summary>
            <param name="ackMessage"><see cref="T:Rainbow.Model.AckMessage"/>AckMessage to send</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{AckMessage}}"/>Callback fired when an answer to AckMessage is received or if the operation cannot be performed (invalid argument for example) - <see cref="T:Rainbow.Model.AckMessage"/> is expected (it's the answer to the AckMessage send to the tPeer) in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs.</param>
            <param name="msDelay"><see cref="T:System.Int32"/>Delay (in ms) before to use the callback with an error if the Peed didn't answered yet. -1 by default (i.e. infinite delay)</param>
        </member>
        <member name="M:Rainbow.InstantMessaging.AnswerToAckMessage(Rainbow.Model.AckMessage,Rainbow.Model.MessageType,System.String,System.String,System.Action{Rainbow.SdkResult{System.Boolean}},System.Int32)">
            <summary>
            To answer to an AckMessage received. It's possible to answer without any mime type and content
            
            <see cref="P:Rainbow.Model.AckMessage.Action"/> specified in the <see cref="T:Rainbow.Model.AckMessage"/> received is used in the answer
            
            </summary>
            <param name="ackMessageReceived"><see cref="T:Rainbow.Model.AckMessage"/> the AckMessage received - cannot be null</param>
            <param name="answerType"><see cref="T:Rainbow.Model.MessageType"/>The answer message type (result or error)</param>
            <param name="mimeType"><see cref="T:System.String"/>Mime type on the content (if any) - can be null</param>
            <param name="content"><see cref="T:System.String"/>Content (as string) used as answser (if any) - can be null</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the opeartion has been done - True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs.</param>
            <param name="msDelay"><see cref="T:System.Int32"/>Delay (in ms) before to use the callback with an error if the Peed didn't answered yet. -1 by default (i.e. infinite delay)</param>
        </member>
        <member name="M:Rainbow.InstantMessaging.AnswerToAckMessage(Rainbow.Model.AckMessage,Rainbow.Model.MessageType,System.String,System.Xml.XmlElement,System.Action{Rainbow.SdkResult{System.Boolean}},System.Int32)">
            <summary>
            To answer to an AckMessage received. It's possible to answer without any mime type and content
            
            <see cref="P:Rainbow.Model.AckMessage.Action"/> specified in the <see cref="T:Rainbow.Model.AckMessage"/> received is used in the answer
            
            </summary>
            <param name="ackMessageReceived"><see cref="T:Rainbow.Model.AckMessage"/> the AckMessage received - cannot be null</param>
            <param name="answerType"><see cref="T:Rainbow.Model.MessageType"/>The answer message type (result or error)</param>
            <param name="mimeType"><see cref="T:System.String"/>Mime type on the content</param>
            <param name="xmlContent"><see cref="T:System.Xml.XmlElement"/>Content (as Xml) used as answser</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the opeartion has been done - True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs.</param>
            <param name="msDelay"><see cref="T:System.Int32"/>Delay (in ms) before to use the callback with an error if the Peed didn't answered yet. -1 by default (i.e. infinite delay)</param>
        </member>
        <member name="M:Rainbow.InstantMessaging.AnswerToAckMessage(Rainbow.Model.AckMessage,Rainbow.Model.AckMessage,System.Action{Rainbow.SdkResult{System.Boolean}},System.Int32)">
            <summary>
            To answer to an AckMessage received. It's possible to answer without any mime type and content
            
            <see cref="P:Rainbow.Model.AckMessage.Action"/> specified in the <see cref="T:Rainbow.Model.AckMessage"/> received is used in the answer
            
            </summary>
            <param name="ackMessageReceived"><see cref="T:Rainbow.Model.AckMessage"/> the AckMessage received - cannot be null</param>
            <param name="ackMessageToSend"><see cref="T:Rainbow.Model.AckMessage"/> the answer to send - cannot be null</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the opeartion has been done - True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs.</param>
            <param name="msDelay"><see cref="T:System.Int32"/>Delay (in ms) before to use the callback with an error if the Peed didn't answered yet. -1 by default (i.e. infinite delay)</param>
        </member>
        <member name="M:Rainbow.InstantMessaging.SendMessage(Rainbow.Model.Conversation,Rainbow.Model.Message@)">
            <summary>
            Low level API to send IM message using a valid Model.Message object. It's easier to use one of 15 others method (at least) to send IM.
            </summary>
            <param name="conversation"><see cref="T:Rainbow.Model.Conversation"/>Conversation object</param>
            <param name="message"><see cref="T:Rainbow.Model.Message"/>Message object</param>
            <returns><see cref="T:System.Boolean"/> - True if messages have been sent </returns>
        </member>
        <member name="M:Rainbow.InstantMessaging.CanSendMessageWithHighUrgencyToConversation(System.String)">
            <summary>
            To know if it's possible to send a message in a conversation in High Urgency mode.
            
            In One to one conversation it's possible if the peer has a licence.
            
            In a bubble, it's possible if one of the peer has a licence.
            </summary>
            <param name="conversationId"><see cref="T:System.String"/> Id of the conversation</param>
            <returns><see cref="T:System.Boolean"/> - True if it's possible</returns>
        </member>
        <member name="M:Rainbow.InstantMessaging.CanSendMessageWithHighUrgencyToConversation(Rainbow.Model.Conversation)">
            <summary>
            To know if it's possible to send a message in a conversation in High Urgency mode.
            
            In One to one conversation it's possible if the peer has a licence.
            
            In a bubble, it's possible if one of the peer has a licence.
            </summary>
            <param name="conversation"><see cref="T:Rainbow.Model.Conversation"/> Conversation object</param>
            <returns><see cref="T:System.Boolean"/> - True if it's possible</returns>
        </member>
        <member name="M:Rainbow.InstantMessaging.SendAlternativeContentsToConversationId(System.String,System.String,System.Collections.Generic.List{Rainbow.Model.MessageAlternativeContent},Rainbow.Model.UrgencyType,Rainbow.Model.Geolocation,System.Action{Rainbow.SdkResult{Rainbow.Model.Message}})">
            <summary>
            Send a message to the specified conversation id with the possibilities to set also alternative contents
            </summary>
            <param name="conversationId"><see cref="T:System.String"/>ID of the conversation</param>
            <param name="message"><see cref="T:System.String"/>The content of the message to send</param>
            <param name="urgency"><see cref="T:Rainbow.Model.UrgencyType"/>Urgency of the message - UrgencyType.Std is default</param>
            <param name="geolocation"><see cref="T:Rainbow.Model.Geolocation"/>Geolocalisation info (can be null)</param>
            <param name="alternativeContents"><see cref="T:List{MessageAlternativeContent}"/>List of alternative contents</param>
            <param name="callbackMessage"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - Message object is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.InstantMessaging.SendMessageWithFileToConversation(Rainbow.Model.Conversation,System.String,System.String,System.Collections.Generic.List{System.String},Rainbow.Model.UrgencyType,Rainbow.Model.Geolocation,System.Action{Rainbow.SdkResult{Rainbow.Model.FileDescriptor}},System.Action{Rainbow.SdkResult{Rainbow.Model.Message}})">
            <summary>
            Send a message with a file to the specified conversation
            
            The callback **callbackFileDescriptor** permits to know the file descriptor created. So it's possible to know the upload status of this file using event **FileUploadUpdated** from <see cref="T:Rainbow.FileStorage"/>.
            If the FileDescriptor is not well created, the file is not uploaded and the message is not sent
            
            The callback **callbackMessage** permits to know if finally the message with the file associated has been successfully sent.
            </summary>
            <param name="conversation"><see cref="T:Rainbow.Model.Conversation"/>Conversation object</param>
            <param name="message"><see cref="T:System.String"/>The content of the message to send</param>
            <param name="filePath"><see cref="T:System.String"/>The path to the file</param>
            <param name="mentions"><see cref="T:System.Collections.Generic.List`1"/>List of Contact Jid to mention - Parameter can be null</param>
            <param name="urgency"><see cref="T:Rainbow.Model.UrgencyType"/>Urgency of the message - UrgencyType.Std is default</param>
            <param name="geolocation"><see cref="T:Rainbow.Model.Geolocation"/>Geolocalisation info (can be null)</param>
            <param name="callbackFileDescriptor"><see cref="T:Action{Rainbow.SdkResult{FileDescriptor}}"/>Callback fired when the file descriptor creation is performed - A valid <see cref="T:Rainbow.Model.FileDescriptor"></see> object is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
            <param name="callbackMessage"><see cref="T:Action{Rainbow.SdkResult{Message}}"/>Callback fired when the operation is done - Message object is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.InstantMessaging.SendMessageWithFileToConversationId(System.String,System.String,System.IO.Stream,System.String,System.Collections.Generic.List{System.String},Rainbow.Model.UrgencyType,Rainbow.Model.Geolocation,System.Action{Rainbow.SdkResult{Rainbow.Model.FileDescriptor}},System.Action{Rainbow.SdkResult{Rainbow.Model.Message}})">
            <summary>
            Send a message with a file to the specified conversation id (using a file stream)
            
            The callback **callbackFileDescriptor** permits to know the file descriptor created. So it's possible to know the upload status of this file using event **FileUploadUpdated** from <see cref="T:Rainbow.FileStorage"/>.
            If the FileDescriptor is not well created, the file is not uploaded and the message is not sent
            
            The callback **callbackMessage** permits to know if finally the message with the file associated has been successfully sent.
            </summary>
            <param name="conversationId"><see cref="T:System.String"/>ID of the conversation</param>
            <param name="message"><see cref="T:System.String"/>The content of the message to send</param>
            <param name="fileStream"><see cref="T:System.IO.Stream"/>Stream used to read file content</param>
            <param name="fileName"><see cref="T:System.String"/>The file name</param>
            <param name="mentions"><see cref="T:System.Collections.Generic.List`1"/>List of Contact Jid to mention - Parameter can be null</param>
            <param name="urgency"><see cref="T:Rainbow.Model.UrgencyType"/>Urgency of the message - UrgencyType.Std is default</param>
            <param name="geolocation"><see cref="T:Rainbow.Model.Geolocation"/>Geolocalisation info (can be null)</param>
            <param name="callbackFileDescriptor"><see cref="T:Action{Rainbow.SdkResult{FileDescriptor}}"/>Callback fired when the file descriptor creation is performed - A valid <see cref="T:Rainbow.Model.FileDescriptor"></see> object is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
            <param name="callbackMessage"><see cref="T:Action{Rainbow.SdkResult{Message}}"/>Callback fired when the operation is done - Message object is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.InstantMessaging.SendMessageWithFileToConversationId(System.String,System.String,System.String,System.Collections.Generic.List{System.String},Rainbow.Model.UrgencyType,Rainbow.Model.Geolocation,System.Action{Rainbow.SdkResult{Rainbow.Model.FileDescriptor}},System.Action{Rainbow.SdkResult{Rainbow.Model.Message}})">
            <summary>
            Send a message with a file to the specified conversation id (using a file path)
            
            The callback **callbackFileDescriptor** permits to know the file descriptor created. So it's possible to know the upload status of this file using event **FileUploadUpdated** from <see cref="T:Rainbow.FileStorage"/>.
            If the FileDescriptor is not well created, the file is not uploaded and the message is not sent
            
            The callback **callbackMessage** permits to know if finally the message with the file associated has been successfully sent.
            </summary>
            <param name="conversationId"><see cref="T:System.String"/>ID of the conversation</param>
            <param name="message"><see cref="T:System.String"/>The content of the message to send</param>
            <param name="filePath"><see cref="T:System.String"/>The path to the file</param>
            <param name="mentions"><see cref="T:System.Collections.Generic.List`1"/>List of Contact Jid to mention - Parameter can be null</param>
            <param name="urgency"><see cref="T:Rainbow.Model.UrgencyType"/>Urgency of the message - UrgencyType.Std is default</param>
            <param name="geolocation"><see cref="T:Rainbow.Model.Geolocation"/>Geolocalisation info (can be null)</param>
            <param name="callbackFileDescriptor"><see cref="T:Action{Rainbow.SdkResult{FileDescriptor}}"/>Callback fired when the file descriptor creation is performed - A valid <see cref="T:Rainbow.Model.FileDescriptor"></see> object is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
            <param name="callbackMessage"><see cref="T:Action{Rainbow.SdkResult{Message}}"/>Callback fired when the operation is done - Message object is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.InstantMessaging.SendMessageWithFileToContactId(System.String,System.String,System.String,Rainbow.Model.UrgencyType,Rainbow.Model.Geolocation,System.Action{Rainbow.SdkResult{Rainbow.Model.FileDescriptor}},System.Action{Rainbow.SdkResult{Rainbow.Model.Message}})">
            <summary>
            Send a message with a file to the specified contact id
            
            The callback **callbackFileDescriptor** permits to know the file descriptor created. So it's possible to know the upload status of this file using event **FileUploadUpdated** from <see cref="T:Rainbow.FileStorage"/>.
            If the FileDescriptor is not well created, the file is not uploaded and the message is not sent
            
            The callback **callbackMessage** permits to know if finally the message with the file associated has been successfully sent.
            </summary>
            <param name="contactId"><see cref="T:System.String"/>ID of the contact</param>
            <param name="message"><see cref="T:System.String"/>The message to send</param>
            <param name="filePath"><see cref="T:System.String"/>The path to the file</param>
            <param name="urgency"><see cref="T:Rainbow.Model.UrgencyType"/>Urgency of the message - UrgencyType.Std is default</param>
            <param name="geolocation"><see cref="T:Rainbow.Model.Geolocation"/>Geolocalisation info (can be null)</param>
            <param name="callbackFileDescriptor"><see cref="T:Action{Rainbow.SdkResult{FileDescriptor}}"/>Callback fired when the file descriptor creation is performed - A valid <see cref="T:Rainbow.Model.FileDescriptor"></see> object is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
            <param name="callbackMessage"><see cref="T:Action{Rainbow.SdkResult{Message}}"/>Callback fired when the operation is done - Message object is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.InstantMessaging.SendMessageWithFileToContactJid(System.String,System.String,System.String,Rainbow.Model.UrgencyType,Rainbow.Model.Geolocation,System.Action{Rainbow.SdkResult{Rainbow.Model.FileDescriptor}},System.Action{Rainbow.SdkResult{Rainbow.Model.Message}})">
            <summary>
            Send a message with a file to the specified contact Jid
            
            The callback **callbackFileDescriptor** permits to know the file descriptor created. So it's possible to know the upload status of this file using event **FileUploadUpdated** from <see cref="T:Rainbow.FileStorage"/>.
            If the FileDescriptor is not well created, the file is not uploaded and the message is not sent
            
            The callback **callbackMessage** permits to know if finally the message with the file associated has been successfully sent.
            </summary>
            <param name="contactJid"><see cref="T:System.String"/>Jid of the contact</param>
            <param name="message"><see cref="T:System.String"/>The message to send</param>
            <param name="filePath"><see cref="T:System.String"/>The path to the file</param>
            <param name="urgency"><see cref="T:Rainbow.Model.UrgencyType"/>Urgency of the message - UrgencyType.Std is default</param>
            <param name="geolocation"><see cref="T:Rainbow.Model.Geolocation"/>Geolocalisation info (can be null)</param>
            <param name="callbackFileDescriptor"><see cref="T:Action{Rainbow.SdkResult{FileDescriptor}}"/>Callback fired when the file descriptor creation is performed - A valid <see cref="T:Rainbow.Model.FileDescriptor"></see> object is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
            <param name="callbackMessage"><see cref="T:Action{Rainbow.SdkResult{Message}}"/>Callback fired when the operation is done - Message object is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.InstantMessaging.SendMessageWithFileToContact(Rainbow.Model.Contact,System.String,System.String,Rainbow.Model.UrgencyType,Rainbow.Model.Geolocation,System.Action{Rainbow.SdkResult{Rainbow.Model.FileDescriptor}},System.Action{Rainbow.SdkResult{Rainbow.Model.Message}})">
            <summary>
            Send a message with a file to the specified contact
            
            The callback **callbackFileDescriptor** permits to know the file descriptor created. So it's possible to know the upload status of this file using event **FileUploadUpdated** from <see cref="T:Rainbow.FileStorage"/>.
            If the FileDescriptor is not well created, the file is not uploaded and the message is not sent
            
            The callback **callbackMessage** permits to know if finally the message with the file associated has been successfully sent.
            </summary>
            <param name="contact"><see cref="T:Rainbow.Model.Contact"/>Contact object</param>
            <param name="message"><see cref="T:System.String"/>The message to send</param>
            <param name="filePath"><see cref="T:System.String"/>The path to the file</param>
            <param name="urgency"><see cref="T:Rainbow.Model.UrgencyType"/>Urgency of the message - UrgencyType.Std is default</param>
            <param name="geolocation"><see cref="T:Rainbow.Model.Geolocation"/>Geolocalisation info (can be null)</param>
            <param name="callbackFileDescriptor"><see cref="T:Action{Rainbow.SdkResult{FileDescriptor}}"/>Callback fired when the file descriptor creation is performed - A valid <see cref="T:Rainbow.Model.FileDescriptor"></see> object is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
            <param name="callbackMessage"><see cref="T:Action{Rainbow.SdkResult{Message}}"/>Callback fired when the operation is done - Message object is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.InstantMessaging.SendMessageWithFileToBubbleId(System.String,System.String,System.String,System.Collections.Generic.List{System.String},Rainbow.Model.UrgencyType,Rainbow.Model.Geolocation,System.Action{Rainbow.SdkResult{Rainbow.Model.FileDescriptor}},System.Action{Rainbow.SdkResult{Rainbow.Model.Message}})">
            <summary>
            Send a message with a file to the specified Bubble Id
            
            The callback **callbackFileDescriptor** permits to know the file descriptor created. So it's possible to know the upload status of this file using event **FileUploadUpdated** from <see cref="T:Rainbow.FileStorage"/>.
            If the FileDescriptor is not well created, the file is not uploaded and the message is not sent
            
            The callback **callbackMessage** permits to know if finally the message with the file associated has been successfully sent.
            </summary>
            <param name="bubbleId"><see cref="T:System.String"/>Bubble Id</param>
            <param name="message"><see cref="T:System.String"/>The message to send</param>
            <param name="filePath"><see cref="T:System.String"/>The path to the file</param>
            <param name="mentions"><see cref="T:System.Collections.Generic.List`1"/>List of Contact Jid to mention - Parameter can be null</param>
            <param name="urgency"><see cref="T:Rainbow.Model.UrgencyType"/>Urgency of the message - UrgencyType.Std is default</param>
            <param name="geolocation"><see cref="T:Rainbow.Model.Geolocation"/>Geolocalisation info (can be null)</param>
            <param name="callbackFileDescriptor"><see cref="T:Action{Rainbow.SdkResult{FileDescriptor}}"/>Callback fired when the file descriptor creation is performed - A valid <see cref="T:Rainbow.Model.FileDescriptor"></see> object is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
            <param name="callbackMessage"><see cref="T:Action{Rainbow.SdkResult{Message}}"/>Callback fired when the operation is done - Message object is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.InstantMessaging.SendMessageWithFileToBubbleJid(System.String,System.String,System.String,System.Collections.Generic.List{System.String},Rainbow.Model.UrgencyType,Rainbow.Model.Geolocation,System.Action{Rainbow.SdkResult{Rainbow.Model.FileDescriptor}},System.Action{Rainbow.SdkResult{Rainbow.Model.Message}})">
            <summary>
            Send a message with a file to the specified Bubble Jid
            
            The callback **callbackFileDescriptor** permits to know the file descriptor created. So it's possible to know the upload status of this file using event **FileUploadUpdated** from <see cref="T:Rainbow.FileStorage"/>.
            If the FileDescriptor is not well created, the file is not uploaded and the message is not sent
            
            The callback **callbackMessage** permits to know if finally the message with the file associated has been successfully sent.
            </summary>
            <param name="bubbleJid"><see cref="T:System.String"/>Bubble Jid</param>
            <param name="message"><see cref="T:System.String"/>The message to send</param>
            <param name="filePath"><see cref="T:System.String"/>The path to the file</param>
            <param name="mentions"><see cref="T:System.Collections.Generic.List`1"/>List of Contact Jid to mention - Parameter can be null</param>
            <param name="urgency"><see cref="T:Rainbow.Model.UrgencyType"/>Urgency of the message - UrgencyType.Std is default</param>
            <param name="geolocation"><see cref="T:Rainbow.Model.Geolocation"/>Geolocalisation info (can be null)</param>
            <param name="callbackFileDescriptor"><see cref="T:Action{Rainbow.SdkResult{FileDescriptor}}"/>Callback fired when the file descriptor creation is performed - A valid <see cref="T:Rainbow.Model.FileDescriptor"></see> object is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
            <param name="callbackMessage"><see cref="T:Action{Rainbow.SdkResult{Message}}"/>Callback fired when the operation is done - Message object is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.InstantMessaging.SendMessageWithFileToBubble(Rainbow.Model.Bubble,System.String,System.String,System.Collections.Generic.List{System.String},Rainbow.Model.UrgencyType,Rainbow.Model.Geolocation,System.Action{Rainbow.SdkResult{Rainbow.Model.FileDescriptor}},System.Action{Rainbow.SdkResult{Rainbow.Model.Message}})">
            <summary>
            Send a message with a file to the specified Bubble
            
            The callback **callbackFileDescriptor** permits to know the file descriptor created. So it's possible to know the upload status of this file using event **FileUploadUpdated** from <see cref="T:Rainbow.FileStorage"/>.
            If the FileDescriptor is not well created, the file is not uploaded and the message is not sent
            
            The callback **callbackMessage** permits to know if finally the message with the file associated has been successfully sent.
            </summary>
            <param name="bubble"><see cref="T:Rainbow.Model.Bubble"/>Bubble Jid</param>
            <param name="message"><see cref="T:System.String"/>The message to send</param>
            <param name="filePath"><see cref="T:System.String"/>The path to the file</param>
            <param name="mentions"><see cref="T:System.Collections.Generic.List`1"/>List of Contact Jid to mention - Parameter can be null</param>
            <param name="urgency"><see cref="T:Rainbow.Model.UrgencyType"/>Urgency of the message - UrgencyType.Std is default</param>
            <param name="geolocation"><see cref="T:Rainbow.Model.Geolocation"/>Geolocalisation info (can be null)</param>
            <param name="callbackFileDescriptor"><see cref="T:Action{Rainbow.SdkResult{FileDescriptor}}"/>Callback fired when the file descriptor creation is performed - A valid <see cref="T:Rainbow.Model.FileDescriptor"></see> object is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
            <param name="callbackMessage"><see cref="T:Action{Rainbow.SdkResult{Message}}"/>Callback fired when the operation is done - Message object is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.InstantMessaging.SendMessageToConversation(Rainbow.Model.Conversation,System.String,System.Collections.Generic.List{System.String},Rainbow.Model.UrgencyType,Rainbow.Model.Geolocation,System.Action{Rainbow.SdkResult{Rainbow.Model.Message}})">
            <summary>
            Send a message to the specified conversation
            </summary>
            <param name="conversation"><see cref="T:Rainbow.Model.Conversation"/>Conversation object</param>
            <param name="message"><see cref="T:System.String"/>The content of the message</param>
            <param name="mentions"><see cref="T:System.Collections.Generic.List`1"/>List of Contact Jid to mention - Parameter can be null</param>
            <param name="urgency"><see cref="T:Rainbow.Model.UrgencyType"/>Urgency of the message - UrgencyType.Std is default</param>
            <param name="geolocation"><see cref="T:Rainbow.Model.Geolocation"/>Geolocalisation info (can be null)</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Message}}"/>Callback fired when the operation is done - Message object is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.InstantMessaging.SendMessageToConversationId(System.String,System.String,System.Collections.Generic.List{System.String},Rainbow.Model.UrgencyType,Rainbow.Model.Geolocation,System.Action{Rainbow.SdkResult{Rainbow.Model.Message}})">
            <summary>
            Send a message to the specified conversation id
            </summary>
            <param name="conversationId"><see cref="T:System.String"/>ID of the conversation</param>
            <param name="message"><see cref="T:System.String"/>The content of the message to send</param>
            <param name="mentions"><see cref="T:System.Collections.Generic.List`1"/>List of Contact Jid to mention - Parameter can be null</param>
            <param name="urgency"><see cref="T:Rainbow.Model.UrgencyType"/>Urgency of the message - UrgencyType.Std is default</param>
            <param name="geolocation"><see cref="T:Rainbow.Model.Geolocation"/>Geolocalisation info (can be null)</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Message}}"/>Callback fired when the operation is done - Message object is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.InstantMessaging.SendMessageToBotId(System.String,System.String,Rainbow.Model.UrgencyType,Rainbow.Model.Geolocation,System.Action{Rainbow.SdkResult{Rainbow.Model.Message}})">
            <summary>
            Send a message to the specified bot id
            </summary>
            <param name="botId"><see cref="T:System.String"/>ID of the bot</param>
            <param name="message"><see cref="T:System.String"/>The message to send</param>
            <param name="urgency"><see cref="T:Rainbow.Model.UrgencyType"/>Urgency of the message - UrgencyType.Std is default</param>
            <param name="geolocation"><see cref="T:Rainbow.Model.Geolocation"/>Geolocalisation info (can be null)</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Message}}"/>Callback fired when the operation is done - Message object is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.InstantMessaging.SendMessageToBotJid(System.String,System.String,Rainbow.Model.UrgencyType,Rainbow.Model.Geolocation,System.Action{Rainbow.SdkResult{Rainbow.Model.Message}})">
            <summary>
            Send a message to the specified Bot Jid
            </summary>
            <param name="botJid"><see cref="T:System.String"/>Jid of the bot</param>
            <param name="message"><see cref="T:System.String"/>The message to send</param>
            <param name="urgency"><see cref="T:Rainbow.Model.UrgencyType"/>Urgency of the message - UrgencyType.Std is default</param>
            <param name="geolocation"><see cref="T:Rainbow.Model.Geolocation"/>Geolocalisation info (can be null)</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Message}}"/>Callback fired when the operation is done - Message object is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.InstantMessaging.SendMessageToBot(Rainbow.Model.Bot,System.String,Rainbow.Model.UrgencyType,Rainbow.Model.Geolocation,System.Action{Rainbow.SdkResult{Rainbow.Model.Message}})">
            <summary>
            Send a message to the specified bot
            </summary>
            <param name="bot"><see cref="T:Rainbow.Model.Bot"/>Bot object</param>
            <param name="message"><see cref="T:System.String"/>The message to send</param>
            <param name="urgency"><see cref="T:Rainbow.Model.UrgencyType"/>Urgency of the message - UrgencyType.Std is default</param>
            <param name="geolocation"><see cref="T:Rainbow.Model.Geolocation"/>Geolocalisation info (can be null)</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Message}}"/>Callback fired when the operation is done - Message object is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.InstantMessaging.SendMessageToContactId(System.String,System.String,Rainbow.Model.UrgencyType,Rainbow.Model.Geolocation,System.Action{Rainbow.SdkResult{Rainbow.Model.Message}})">
            <summary>
            Send a message to the specified contact id
            </summary>
            <param name="contactId"><see cref="T:System.String"/>ID of the contact</param>
            <param name="message"><see cref="T:System.String"/>The message to send</param>
            <param name="urgency"><see cref="T:Rainbow.Model.UrgencyType"/>Urgency of the message - UrgencyType.Std is default</param>
            <param name="geolocation"><see cref="T:Rainbow.Model.Geolocation"/>Geolocalisation info (can be null)</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Message}}"/>Callback fired when the operation is done - Message object is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.InstantMessaging.SendMessageToContactJid(System.String,System.String,Rainbow.Model.UrgencyType,Rainbow.Model.Geolocation,System.Action{Rainbow.SdkResult{Rainbow.Model.Message}})">
            <summary>
            Send a message to the specified contact Jid
            </summary>
            <param name="contactJid"><see cref="T:System.String"/>Jid of the contact</param>
            <param name="message"><see cref="T:System.String"/>The message to send</param>
            <param name="urgency"><see cref="T:Rainbow.Model.UrgencyType"/>Urgency of the message - UrgencyType.Std is default</param>
            <param name="geolocation"><see cref="T:Rainbow.Model.Geolocation"/>Geolocalisation info (can be null)</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Message}}"/>Callback fired when the operation is done - Message object is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.InstantMessaging.SendMessageToContact(Rainbow.Model.Contact,System.String,Rainbow.Model.UrgencyType,Rainbow.Model.Geolocation,System.Action{Rainbow.SdkResult{Rainbow.Model.Message}})">
            <summary>
            Send a message to the specified contact
            </summary>
            <param name="contact"><see cref="T:Rainbow.Model.Contact"/>Contact object</param>
            <param name="message"><see cref="T:System.String"/>The message to send</param>
            <param name="urgency"><see cref="T:Rainbow.Model.UrgencyType"/>Urgency of the message - UrgencyType.Std is default</param>
            <param name="geolocation"><see cref="T:Rainbow.Model.Geolocation"/>Geolocalisation info (can be null)</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Message}}"/>Callback fired when the operation is done - Message object is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.InstantMessaging.SendMessageToBubbleId(System.String,System.String,System.Collections.Generic.List{System.String},Rainbow.Model.UrgencyType,Rainbow.Model.Geolocation,System.Action{Rainbow.SdkResult{Rainbow.Model.Message}})">
            <summary>
            Send a message to the specified Bubble Id
            </summary>
            <param name="bubbleId"><see cref="T:System.String"/>Bubble Id</param>
            <param name="message"><see cref="T:System.String"/>The message to send</param>
            <param name="mentions"><see cref="T:System.Collections.Generic.List`1"/>List of Contact Jid to mention - Parameter can be null</param>
            <param name="urgency"><see cref="T:Rainbow.Model.UrgencyType"/>Urgency of the message - UrgencyType.Std is default</param>
            <param name="geolocation"><see cref="T:Rainbow.Model.Geolocation"/>Geolocalisation info (can be null)</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - Message object is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.InstantMessaging.SendMessageToBubbleJid(System.String,System.String,System.Collections.Generic.List{System.String},Rainbow.Model.UrgencyType,Rainbow.Model.Geolocation,System.Action{Rainbow.SdkResult{Rainbow.Model.Message}})">
            <summary>
            Send a message to the specified Bubble Jid
            </summary>
            <param name="bubbleJid"><see cref="T:System.String"/>Bubble Jid</param>
            <param name="message"><see cref="T:System.String"/>The message to send</param>
            <param name="mentions"><see cref="T:System.Collections.Generic.List`1"/>List of Contact Jid to mention - Parameter can be null</param>
            <param name="urgency"><see cref="T:Rainbow.Model.UrgencyType"/>Urgency of the message - UrgencyType.Std is default</param>
            <param name="geolocation"><see cref="T:Rainbow.Model.Geolocation"/>Geolocalisation info (can be null)</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Message}}"/>Callback fired when the operation is done - Message object is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.InstantMessaging.SendMessageToBubble(Rainbow.Model.Bubble,System.String,System.Collections.Generic.List{System.String},Rainbow.Model.UrgencyType,Rainbow.Model.Geolocation,System.Action{Rainbow.SdkResult{Rainbow.Model.Message}})">
            <summary>
            Send a message to the specified Bubble
            </summary>
            <param name="bubble"><see cref="T:Rainbow.Model.Bubble"/>Bubble Jid</param>
            <param name="message"><see cref="T:System.String"/>The message to send</param>
            <param name="mentions"><see cref="T:System.Collections.Generic.List`1"/>List of Contact Jid to mention - Parameter can be null</param>
            <param name="urgency"><see cref="T:Rainbow.Model.UrgencyType"/>Urgency of the message - UrgencyType.Std is default</param>
            <param name="geolocation"><see cref="T:Rainbow.Model.Geolocation"/>Geolocalisation info (can be null)</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Message}}"/>Callback fired when the operation is done - Message object is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="T:Rainbow.Invitations">
            <summary>
            This object is available only using <see cref="M:Rainbow.Application.GetInvitations"/> from <see cref="T:Rainbow.Application"/> object.
            
            Invitations is used to get / set / update info about any <see cref="T:Rainbow.Model.Invitation" /> which concern the current contact.
            
            To add a person in its roster it's necessary to send him first a invitation. 
            
            An invitation can be sent to a **contact already in Rainbow** (found after performed a search for example). 
            In this case, the invitation can be sent using it's **contact ID**.
            
            An invitation can be sent also to a **contact not already in Rainbow** using it's **email address** or it's **phone number**. 
            In this case, an email or a SMS, in the specified language, is sent to this person by the Rainbow server.
            
            When an invitation is send to **a contact from the same company**, the invitation is **'auto-accepted'** - the contact is added in the roster without he needs to accept it.
            
            When an invitation is send to **a contact not from the same company**, **he must accept it** first to have it in its roster. 
            
            It's not possible to know if the invitation is specifically declined - it's seen as 'pending' in this case.
            
            </summary>
        </member>
        <member name="E:Rainbow.Invitations.InvitationReceived">
            <summary>
            The event raised when an invitation has been received - it occurs only when it's send by a contact which is not in the same company.
            
             The <see cref="T:Rainbow.Events.InvitationEventArgs" /> object permits to know the id of the invitation received
            </summary>
        </member>
        <member name="E:Rainbow.Invitations.InvitationSent">
            <summary>
            The event raised when an invitation has been sent by the current contact
            
             The <see cref="T:Rainbow.Events.InvitationEventArgs" /> object permits to know the id of the invitation received
            </summary>
        </member>
        <member name="E:Rainbow.Invitations.InvitationReSent">
            <summary>
            The event raised when an invitation has been re-sent by the current contact
            
             The <see cref="T:Rainbow.Events.InvitationEventArgs" /> object permits to know the id of the invitation received
            </summary>
        </member>
        <member name="E:Rainbow.Invitations.InvitationAccepted">
            <summary>
            The event raised when an invitation has been accepted by the current contact or by another contact
            
             The <see cref="T:Rainbow.Events.InvitationEventArgs" /> object permits to know the id of the invitation received
            </summary>
        </member>
        <member name="E:Rainbow.Invitations.InvitationDeleted">
            <summary>
            The event raised when an invitation previously accepted is deleted
            
             The <see cref="T:Rainbow.Events.InvitationEventArgs" /> object permits to know the id of the invitation received
            </summary>
        </member>
        <member name="E:Rainbow.Invitations.InvitationCancelled">
            <summary>
            The event raised when an **pending** invitation sent by the current contact has been cancelled by himself
            
             The <see cref="T:Rainbow.Events.InvitationEventArgs" /> object permits to know the id of the invitation received
            </summary>
        </member>
        <member name="E:Rainbow.Invitations.InvitationDeclined">
            <summary>
            The event raised when an **pending** invitation sent by another contact is declined by the current contact
            
             The <see cref="T:Rainbow.Events.InvitationEventArgs" /> object permits to know the id of the invitation received
            </summary>
        </member>
        <member name="M:Rainbow.Invitations.GetReceivedInvitations(System.Action{Rainbow.SdkResult{System.Collections.Generic.List{Rainbow.Model.Invitation}}},System.String)">
            <summary>
            Get list of invitations received filtered by the status specified
            </summary>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{List{Invitation}}}"/>Callback fired when the operation is done - List of <see cref="T:Rainbow.Model.Invitation"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
            <param name="status"><see cref="T:System.String"/>Optional - let empty to have all invitations a set a value as defined in <see cref="T:Rainbow.Model.Invitation.InvitationStatus"/> </param>
        </member>
        <member name="M:Rainbow.Invitations.GetSentInvitations(System.Action{Rainbow.SdkResult{System.Collections.Generic.List{Rainbow.Model.Invitation}}},System.String)">
            <summary>
            Get list of invitations sent filtered by the status specified
            </summary>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{List{Invitation}}}"/>Callback fired when the operation is done - List of <see cref="T:Rainbow.Model.Invitation"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
            <param name="status"><see cref="T:System.String"/>Optional - let empty to have all invitations a set a value as defined in <see cref="T:Rainbow.Model.Invitation.InvitationStatus"/> </param>
        </member>
        <member name="M:Rainbow.Invitations.GetInvitationById(System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.Invitation}})">
            <summary>
            Get the invitation from server using its ID
            </summary>
            <param name="invitationId"><see cref="T:System.String"/>the invitations's ID to get</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Invitation}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.Invitation"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Invitations.CancelInvitationFromServer(System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.Invitation}})">
            <summary>
            To cancel an invitation previously accepted
            </summary>
            <param name="invitationId"><see cref="T:System.String"/>the invitation ID to cancel</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Invitation}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.Invitation"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Invitations.SendInvitationByContactId(System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.Invitation}})">
            <summary>
            To invite a contact using its contact ID
            
            The contact is added automatically in the current user network roster if the invited contact is in the same company.
            </summary>
            <param name="contactId"><see cref="T:System.String"/>The contact ID</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Invitation}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.Invitation"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Invitations.SendInvitation(System.String,System.String,System.String,System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.Invitation}})">
            <summary>
            Send an invitation by contact id, email or phone number
            </summary>
            <param name="invitationMode"><see cref="T:System.String"/>see <see cref="T:Rainbow.Model.Invitation.InvitationMode"/> for possible values</param>
            <param name="value"><see cref="T:System.String"/>According the invitation mode set, specify a correct value: contact Id, an email address or a phone number</param>
            <param name="languageCode"><see cref="T:System.String"/>To set the language used in the invitation send. Language format is composed of locale using format ISO 639-1, with optionally the regional variation using ISO 3166‑1 alpha-2 (separated by hyphen). Default value: "en-US"</param>
            <param name="message"><see cref="T:System.String"/>Additional message added in the invitation sent - Max: 10 000 caracters -Default value: ""</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Invitation}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.Invitation"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Invitations.AcceptReceivedPendingInvitation(System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.Invitation}})">
            <summary>
            To accept a pending received invitation
            </summary>
            <param name="invitationId"><see cref="T:System.String"/>The invitation ID to accept</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Invitation}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.Invitation"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Invitations.DeclineReceivedPendingInvitation(System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.Invitation}})">
            <summary>
            To decline a pending received invitation
            </summary>
            <param name="invitationId"><see cref="T:System.String"/>The invitation ID to accept</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Invitation}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.Invitation"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Invitations.ReSendInvitation(System.String,System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.Invitation}})">
            <summary>
            To re-send a pending sent invitation.
            </summary>
            <param name="invitationId"><see cref="T:System.String"/>The invitation ID to accept</param>
            <param name="message"><see cref="T:System.String"/>A message to add in the invitation (optional) - Max 100 000 caracters</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Invitation}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.Invitation"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Invitations.CancelSentPendingInvitation(System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.Invitation}})">
            <summary>
            To cancel a pending sent invitation
            </summary>
            <param name="invitationId"><see cref="T:System.String"/>The invitation ID to accept</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Invitation}}"/>Callback fired when the operation is done - <see cref="T:Rainbow.Model.Invitation"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="T:Rainbow.Jingle">
            <summary>
            Base class to manage WebRTC Signaling (no media managed here). 
            
            This object must be used by other objects managing media (RTP)
            </summary>
        </member>
        <member name="E:Rainbow.Jingle.ErrorRaised">
            <summary>
            An error has raised when doin Jingle MEssage initation
            </summary>
        </member>
        <member name="E:Rainbow.Jingle.IncomingCall">
            <summary>
            As callee, we have an incoming call
            </summary>
        </member>
        <member name="E:Rainbow.Jingle.RetractedCall">
            <summary>
            As callee, the caller has retracted the call (before the call has been accepted)
            </summary>
        </member>
        <member name="E:Rainbow.Jingle.RejectedCall">
            <summary>
            As caller, the callee has rejected the call
            </summary>
        </member>
        <member name="E:Rainbow.Jingle.AcceptedCall">
            <summary>
            As caller, the callee has accepted the call
            </summary>
        </member>
        <member name="E:Rainbow.Jingle.AcceptedCallOnAnotherResource">
            <summary>
            As callee, the calal has been accepted on another resource
            </summary>
        </member>
        <member name="E:Rainbow.Jingle.ReleasedCall">
            <summary>
            The call is released
            </summary>
        </member>
        <member name="E:Rainbow.Jingle.Jingle_RemoteSDPReceived">
            <summary>
            We receive SDP from remote
            </summary>
        </member>
        <member name="E:Rainbow.Jingle.Jingle_IceCandidatesReceived">
            <summary>
            We receive Ice Candidates from remote
            </summary>
        </member>
        <member name="E:Rainbow.Jingle.Jingle_ContentChanged">
            <summary>
            Content has changed
            </summary>
        </member>
        <member name="E:Rainbow.Jingle.Jingle_MediaChanged">
            <summary>
            Media has changed
            </summary>
        </member>
        <member name="E:Rainbow.Jingle.Jingle_CreateAnswer">
            <summary>
            Need to create SDP Answer
            </summary>
        </member>
        <member name="E:Rainbow.Jingle.Jingle_ConferenceSessionInitiate">
            <summary>
            A Jingle Session Initiate message has been received in a conference context
            </summary>
        </member>
        <member name="M:Rainbow.Jingle.SendIceCandidate(System.String,Rainbow.Model.Jingle.IceCandidate)">
            <summary>
            Send Ice Candidate
            </summary>
            <param name="sid"><see cref="T:System.String"/>ID of the call</param>
            <param name="candidate"><see cref="T:Rainbow.Model.Jingle.IceCandidate"/>Ice Candidate to send</param>
        </member>
        <member name="M:Rainbow.Jingle.SendJingleSessionMessage(System.String,System.String@,System.String,System.Int32)">
            <summary>
            To send Jingle Session Message
            </summary>
            <param name="sid"><see cref="T:System.String"/>ID of the call</param>
            <param name="sdp"><see cref="T:System.String"/>SDP</param>
            <param name="actionName"><see cref="T:System.String"/>Action name</param>
            <param name="localMedias"><see cref="T:System.Int32"/>Local medias used (optional)</param>
        </member>
        <member name="M:Rainbow.Jingle.GetTurnServersConfiguration">
            <summary>
            To get the configuration of Turn Servers
            </summary>
            <returns><see cref="T:Rainbow.Model.TurnServersConfiguration"/> - configuration of Turn Servers</returns>
        </member>
        <member name="M:Rainbow.Jingle.GetJingleSessionFromCache(System.String)">
            <summary>
            Get Jingle session from cache
            </summary>
            <param name="sid"><see cref="T:System.String"/>Id of the session</param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Jingle.CheckMediasForMakeCall(System.Int32)">
            <summary>
            Check if medias list is correct to perform a MakeCall
            </summary>
            <param name="medias"><see cref="T:System.Int32"/>List of medias</param>
            <returns><see cref="T:System.Boolean"/> - True if medias list is correct</returns>
        </member>
        <member name="M:Rainbow.Jingle.CheckMediasForAnswerCall(System.Int32,System.Int32)">
            <summary>
            Check if medias list is correct to perform an AnswerCall based of the medias used by the remote
            </summary>
            <param name="remoteMedias"><see cref="T:System.Int32"/>List of medias used by the remote</param>
            <param name="medias"><see cref="T:System.Int32"/>List of medias to check</param>
            <returns><see cref="T:System.Boolean"/> - True if medias list is correct</returns>
        </member>
        <member name="M:Rainbow.Jingle.CreateJingleSessionForConference(System.String,System.String,System.Int32,System.String)">
            <summary>
            To create Jingle sessions in a conference context with the specified media
            </summary>
            <param name="peerBareJid"><see cref="T:System.String"/>Jid ot the conference</param>
            <param name="conferenceId"><see cref="T:System.String"/>Id of the conference</param>
            <param name="media"><see cref="T:System.Int32"/>Media used (only once media must be set)</param>
            <param name="sid"><see cref="T:System.Int32"/>(Optional) SID to use for this jingle session</param>
            <returns><see cref="T:System.String"/> - Sid of the Jingle Session</returns>
        </member>
        <member name="M:Rainbow.Jingle.ManageSessionInitiate(System.String,System.Xml.XmlElement)">
            <summary>
            To answer to a Jingle Session Initiate message
            </summary>
            <param name="sid"><see cref="T:System.String"/>Jingle Session Id</param>
            <param name="jingleElement"><see cref="T:System.Xml.XmlElement"/>Xml element used in the Jingle Session Initiate message</param>
        </member>
        <member name="M:Rainbow.Jingle.MakeCall(System.String,System.Int32,System.String,System.String)">
            <summary>
            Send message to peer about a make call action
            </summary>
            <param name="peerBareJid"><see cref="T:System.String"/>Jid of the peer to call</param>
            <param name="medias"><see cref="T:System.Int32"/>List of medias used</param>
            <param name="displayName"><see cref="T:System.String"/>Display name to use </param>
            <param name="subject"><see cref="T:System.String"/>Subject of the call (max 40 caracters)</param>
            <returns><see cref="T:System.String"/> - ID of the call if the make call has been sent successfully</returns>
        </member>
        <member name="M:Rainbow.Jingle.AcceptIncomingCall(System.String,System.Int32)">
            <summary>
            Send message to peer that we accept the incoming call
            </summary>
            <param name="sid"><see cref="T:System.String"/>ID of the call</param>
            <param name="medias"><see cref="T:System.Int32"/>List of medias used</param>
            <returns><see cref="T:System.Boolean"/> - True if the message has been sent successfully</returns>
        </member>
        <member name="M:Rainbow.Jingle.CanAddLocalAudioTocall(System.String)">
            <summary>
            Check if local audio can be added in the call
            </summary>
            <param name="sid"><see cref="T:System.String"/>ID of the call</param>
            <returns><see cref="T:System.Boolean"/> - True if if it's possible</returns>
        </member>
        <member name="M:Rainbow.Jingle.CanAddLocalVideoTocall(System.String)">
            <summary>
            Check if local video can be added in the call
            </summary>
            <param name="sid"><see cref="T:System.String"/>ID of the call</param>
            <returns><see cref="T:System.Boolean"/> - True if if it's possible</returns>
        </member>
        <member name="M:Rainbow.Jingle.CanRemoveLocalVideoFromCall(System.String)">
            <summary>
            Check if local video can be removed in the call
            </summary>
            <param name="sid"><see cref="T:System.String"/>ID of the call</param>
            <returns><see cref="T:System.Boolean"/> - True if if it's possible</returns>
        </member>
        <member name="M:Rainbow.Jingle.CanAddLocalSharingTocall(System.String)">
            <summary>
            Check if local sharing can be added in the call
            </summary>
            <param name="sid"><see cref="T:System.String"/>ID of the call</param>
            <returns><see cref="T:System.Boolean"/> - True if if it's possible</returns>
        </member>
        <member name="M:Rainbow.Jingle.CanRemoveLocalSharingFromcall(System.String)">
            <summary>
            Check if local sharing can be removed in the call
            </summary>
            <param name="sid"><see cref="T:System.String"/>ID of the call</param>
            <returns><see cref="T:System.Boolean"/> - True if if it's possible</returns>
        </member>
        <member name="M:Rainbow.Jingle.MuteLocalAudio(System.String,System.Boolean)">
            <summary>
            Check if local audio can be muted/unmuted
            </summary>
            <param name="sid"><see cref="T:System.String"/>ID of the call</param>
            <param name="mute"><see cref="T:System.String"/>True to mute, False to unmute</param>
            <returns><see cref="T:System.Boolean"/> - True if if it's possible</returns>
        </member>
        <member name="M:Rainbow.Jingle.MuteLocalVideo(System.String,System.Boolean)">
            <summary>
            Check if local video can be muted/unmuted
            </summary>
            <param name="sid"><see cref="T:System.String"/>ID of the call</param>
            <param name="mute"><see cref="T:System.String"/>True to mute, False to unmute</param>
            <returns><see cref="T:System.Boolean"/> - True if if it's possible</returns>
        </member>
        <member name="M:Rainbow.Jingle.MuteLocalSharing(System.String,System.Boolean)">
            <summary>
            Check if local sharing can be muted/unmuted
            </summary>
            <param name="sid"><see cref="T:System.String"/>ID of the call</param>
            <param name="mute"><see cref="T:System.String"/>True to mute, False to unmute</param>
            <returns><see cref="T:System.Boolean"/> - True if if it's possible</returns>
        </member>
        <member name="M:Rainbow.Jingle.HangUp(System.String)">
            <summary>
            Send message to remote that the call has been Hang Up
            </summary>
            <param name="sid"><see cref="T:System.String"/>ID of the call</param>
        </member>
        <member name="M:Rainbow.Jingle.Retract(System.String)">
            <summary>
            Send message to the remote that the call has been retracted
            </summary>
            <param name="sid"><see cref="T:System.String"/>ID of the call</param>
        </member>
        <member name="M:Rainbow.Jingle.RejectIncomingCall(System.String)">
            <summary>
            Send message to remote that the incoming call has been rejected
            </summary>
            <param name="sid"><see cref="T:System.String"/>ID of the call</param>
        </member>
        <member name="T:Rainbow.LogFactory">
            <summary>
            Class used to manage LoggerFactory object.
            
            It permits to use any back-ends log provider based on Microsoft Extension Logging (MEL):
            
            <a href="https://github.com/getsentry/sentry-dotnet">Sentry</a> provider for the Sentry service
            
            <a href="https://github.com/serilog/serilog-framework-logging">Serilog</a> provider for the Serilog library
            
            <a href="https://github.com/elmahio/Elmah.Io.Extensions.Logging">elmah.io</a> provider for the elmah.io service
            
            <a href="https://github.com/imobile3/Loggr.Extensions.Logging">Loggr</a> provider for the Loggr service
            
            <a href="https://github.com/NLog/NLog.Extensions.Logging">NLog</a> provider for the NLog service
            
            <a href="https://github.com/mattwcole/gelf-extensions-logging">Graylog</a> provider for the Graylog service
            
            <a href="https://github.com/airbrake/sharpbrake#microsoftextensionslogging-integration">Sharpbrake</a> provider for the Sharpbrake service
            
            <a href="https://github.com/catalingavan/KissLog-net">KissLog.net</a> provider for the KissLog.net service
            
            </summary>
        </member>
        <member name="P:Rainbow.LogFactory.Instance">
            <summary>
            Instance of this static class
            </summary>
        </member>
        <member name="M:Rainbow.LogFactory.CreateWebRTCLogger(System.String)">
            <summary>
            To create / get logger used to log specfic details about WebRTC.
             
            It's the same than using **LogFactory.CreateLogger("WEBRTC")**
            </summary>
            <returns><see cref="T:Microsoft.Extensions.Logging.ILogger"/> - ILogger interface</returns>
        </member>
        <member name="M:Rainbow.LogFactory.CreateLogger(System.String,System.String)">
            <summary>
             To create / get logger using a category name
            </summary>
            <returns><see cref="T:Microsoft.Extensions.Logging.ILogger"/> - ILogger interface</returns>
        </member>
        <member name="M:Rainbow.LogFactory.CreateLogger``1(System.String)">
            <summary>
            To create / get logger using a type. 
             
            Example: **LogFactory.CreateLogger&lt;Administration&gt;**
            </summary>
            <returns><see cref="T:Microsoft.Extensions.Logging.ILogger"/> - ILogger interface</returns>
        </member>
        <member name="M:Rainbow.LogFactory.Set(Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            To set the ILoggerFactory used for logging purpose.
            
            This method must be called before to use the SDK
            </summary>
            <param name="factory"><see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> interface</param>
        </member>
        <member name="M:Rainbow.LogFactory.Get">
            <summary>
            To get the ILoggerFactory used for logging purpose.
            </summary>
        </member>
        <member name="T:Rainbow.Model.ACDStatus">
            <summary>
            Dsecribe ACD Status
            </summary>
        </member>
        <member name="P:Rainbow.Model.ACDStatus.State">
            <summary>
            The current state of the agent, can be one of the following : "Ready", "Null", "Null Preassigned" "Work After Call", "Not Ready", "Busy" or "Unknown".
            </summary>
        </member>
        <member name="P:Rainbow.Model.ACDStatus.AgentId">
            <summary>
            The ACD agent id, if it is not present, the device is not a ACD device.
            </summary>
        </member>
        <member name="P:Rainbow.Model.ACDStatus.CurrentGroupId">
            <summary>
            The last group id the device has been logged in. The client can choose to present it to the user or not, for a Logon action. But when it is not present in the Logon command, the PCG will then use the one it has in memory. Note that the client can also make a Login with a group id being present but empty in the case the ACD agent is only in one group, and then the group id is optional in the Pbx command.
            </summary>
        </member>
        <member name="P:Rainbow.Model.ACDStatus.PasswordPresence">
            <summary>
            If true, the PCG keeps internaly the password and can use it for each CCD action requiring it. So the client does not need to give it in the ACD Logoff or Wrapup command. But if the boolean is false, the client has to give it at the Logon, Logoff or Wrapup action (depending of the ACD state), and then the PCG will keep it in memory. At the start of the PCG, this flag is set to false (independing of the ACD state).
            </summary>
        </member>
        <member name="T:Rainbow.Model.MessageType">
            <summary>
            List of message Types
            </summary>
        </member>
        <member name="F:Rainbow.Model.MessageType.Set">
            <summary>
            To set or replace existing values (so it's used only to SEND a Message)
            </summary>
        </member>
        <member name="F:Rainbow.Model.MessageType.Get">
            <summary>
            To request values (so it's used only to SEND an Message)
            </summary>
        </member>
        <member name="F:Rainbow.Model.MessageType.Result">
            <summary>
            Response to a successful get or set Message (so it's used only to ANSWER to a Message received)
            </summary>
        </member>
        <member name="F:Rainbow.Model.MessageType.Error">
            <summary>
            An error has occurred regarding processing or delivery of a previously-sent get or set. (so it's used only to ANSWER to a Message received)
            </summary>
        </member>
        <member name="T:Rainbow.Model.AckMessage">
            <summary>
            Define an AckMessage
            
            Standard IM message are send to a user (i.e. to all of this devices / resources)
            
            An AckMEssage can be sent to only one resource / device of a user. There is no cache and no history for this messages.
            
            An answer is expected by the sender if the receiver can manage it.
            
            This kind of message are not interpreted / managed by standard Rainbow client (Desktop, Web, iOS, Android)
            
            </summary>
        </member>
        <member name="P:Rainbow.Model.AckMessage.Id">
            <summary>
            Id of the message
            </summary>
        </member>
        <member name="P:Rainbow.Model.AckMessage.Type">
            <summary>
            Message Type
            </summary>
        </member>
        <member name="P:Rainbow.Model.AckMessage.ToJid">
            <summary>
            Jid of the receiver - cannot be null
            </summary>
        </member>
        <member name="P:Rainbow.Model.AckMessage.ToResource">
            <summary>
            Resource of the receiver - cannot be null
            </summary>
        </member>
        <member name="P:Rainbow.Model.AckMessage.FromJid">
            <summary>
            Jid of the sender - cannot be null
            </summary>
        </member>
        <member name="P:Rainbow.Model.AckMessage.FromResource">
            <summary>
            Resource of the sender - cannot be null
            </summary>
        </member>
        <member name="P:Rainbow.Model.AckMessage.Action">
            <summary>
            To describe the purpose of the message
            </summary>
        </member>
        <member name="P:Rainbow.Model.AckMessage.MimeType">
            <summary>
            To know the mime type of the message content
            </summary>
        </member>
        <member name="P:Rainbow.Model.AckMessage.Content">
            <summary>
            The message content (as string)
            
            This property is checked before XmlContent property: if this is null/empty, XmlContent is used.
            </summary>
        </member>
        <member name="P:Rainbow.Model.AckMessage.XmlContent">
            <summary>
            The message content (as Xml)
            
            Checked / Used only if Content property is null.
            </summary>
        </member>
        <member name="T:Rainbow.Model.AdHocCommand">
            <summary>
            Define an AdHocCommand
            
            Standard IM message are send to a user (i.e. to all of this devices / resources)
            
            An AckMEssage can be sent to only one resource / device of a user. There is no cache and no history for this messages.
            
            An answer is expected by the sender if the receiver can manage it.
            
            This kind of message could be not interpreted / managed by standard Rainbow client (Desktop, Web, iOS, Android). For example, in a conference, to ask to start a sharing stream if one is already present.
            
            </summary>
        </member>
        <member name="P:Rainbow.Model.AdHocCommand.Id">
            <summary>
            Id of the message
            </summary>
        </member>
        <member name="P:Rainbow.Model.AdHocCommand.Type">
            <summary>
            Message Type
            </summary>
        </member>
        <member name="P:Rainbow.Model.AdHocCommand.ToJid">
            <summary>
            Jid of the receiver - cannot be null
            </summary>
        </member>
        <member name="P:Rainbow.Model.AdHocCommand.ToResource">
            <summary>
            Resource of the receiver - cannot be null
            </summary>
        </member>
        <member name="P:Rainbow.Model.AdHocCommand.FromJid">
            <summary>
            Jid of the sender - cannot be null
            </summary>
        </member>
        <member name="P:Rainbow.Model.AdHocCommand.FromResource">
            <summary>
            Resource of the sender - cannot be null
            </summary>
        </member>
        <member name="P:Rainbow.Model.AdHocCommand.Node">
            <summary>
            Node value - cannot be null
            </summary>
        </member>
        <member name="P:Rainbow.Model.AdHocCommand.Session">
            <summary>
            Session value - can be null
            </summary>
        </member>
        <member name="P:Rainbow.Model.AdHocCommand.Attributes">
            <summary>
            List of attributes (mut not contain Node or Session atrtibutes) - can be null
            </summary>
        </member>
        <member name="P:Rainbow.Model.AdHocCommand.XmlContent">
            <summary>
            The content of the message (as Xml) - can be null
            </summary>
        </member>
        <member name="T:Rainbow.Model.Alert">
            <summary>
            Define an Alert object.
            
            It's mandatory to specify a TemplateId
            
            CompanyId is optional. If it's not specified, the companyId of the current user is used.
            
            FilterId is optional. In this case, all devices in the specified company will be alerted.
            </summary>
        </member>
        <member name="P:Rainbow.Model.Alert.Id">
            <summary>
            <see cref="T:System.String"/> - Alert Id
            </summary>
        </member>
        <member name="P:Rainbow.Model.Alert.Status">
            <summary>
            <see cref="T:System.String"/> - State of the notification ('active', 'failed', 'completed', 'expired', 'canceled')
            </summary>
        </member>
        <member name="P:Rainbow.Model.Alert.TemplateId">
            <summary>
            <see cref="T:System.String"/> - Template unique identifier orresponding to the message content sent to the devices.
            </summary>
        </member>
        <member name="P:Rainbow.Model.Alert.FilterId">
            <summary>
            <see cref="T:System.String"/> - Notification filter unique identifier. Optional filter allowing to only notify company devices that match the criterion defined in the associated notification filter.
            </summary>
        </member>
        <member name="P:Rainbow.Model.Alert.CompanyId">
            <summary>
            <see cref="T:System.String"/> - Unique identifier of the company to which belongs the alert (Optional). If not provided, it is set to logged in user's companyId.
            </summary>
        </member>
        <member name="P:Rainbow.Model.Alert.StartDate">
            <summary>
            <see cref="T:System.DateTime"/> - Start Date of the notification
            </summary>
        </member>
        <member name="P:Rainbow.Model.Alert.ExpirationDate">
            <summary>
            <see cref="T:System.DateTime"/> - End Date of the notification (optional)
            </summary>
        </member>
        <member name="T:Rainbow.Model.AlertsData">
            <summary>
            Structure used when retrieving severals Alerts from server
            </summary>
        </member>
        <member name="P:Rainbow.Model.AlertsData.Data">
            <summary>
            List of Alerts retrieved
            </summary>
        </member>
        <member name="P:Rainbow.Model.AlertsData.Total">
            <summary>
            Total number of items available
            </summary>
        </member>
        <member name="P:Rainbow.Model.AlertsData.Limit">
            <summary>
            Number of items asked
            </summary>
        </member>
        <member name="P:Rainbow.Model.AlertsData.Offset">
            <summary>
            Offset used
            </summary>
        </member>
        <member name="T:Rainbow.Model.AlertDevice">
            <summary>
            This class represents a Device which can receive Alerts (Notifications)
            </summary>
        </member>
        <member name="P:Rainbow.Model.AlertDevice.Id">
            <summary>
            <see cref="T:System.String"/> - Device Id
            </summary>
        </member>
        <member name="P:Rainbow.Model.AlertDevice.Name">
            <summary>
            <see cref="T:System.String"/> - Device Name
            </summary>
        </member>
        <member name="P:Rainbow.Model.AlertDevice.Type">
            <summary>
            <see cref="T:System.String"/> - Device type (Allowed values: web, desktop, mac, android, ios)
            </summary>
        </member>
        <member name="P:Rainbow.Model.AlertDevice.UserId">
            <summary>
            <see cref="T:System.String"/> - User Id using this device
            </summary>
        </member>
        <member name="P:Rainbow.Model.AlertDevice.CompanyId">
            <summary>
            <see cref="T:System.String"/> - Company to which belongs this device (user's company).
            </summary>
        </member>
        <member name="P:Rainbow.Model.AlertDevice.Jid_im">
            <summary>
            <see cref="T:System.String"/> - User Jabber IM identifier (copied from the associated user)
            </summary>
        </member>
        <member name="P:Rainbow.Model.AlertDevice.Jid_resource">
            <summary>
            <see cref="T:System.String"/> - Resource part of the full jid used by the device to connect to xmpp server. 
            </summary>
        </member>
        <member name="P:Rainbow.Model.AlertDevice.CreationDate">
            <summary>
            <see cref="T:System.DateTime"/> - Device creation date
            </summary>
        </member>
        <member name="P:Rainbow.Model.AlertDevice.IpAddresses">
            <summary>
            <see cref="T:System.Collections.Generic.List`1"/> - Ip Addresses 
            </summary>
        </member>
        <member name="P:Rainbow.Model.AlertDevice.DomainUsername">
            <summary>
            <see cref="T:System.String"/> - Domain\Username of the device. 
            </summary>
        </member>
        <member name="P:Rainbow.Model.AlertDevice.MacAddresses">
            <summary>
            <see cref="T:System.Collections.Generic.List`1"/> - Mac Addresses
            </summary>
        </member>
        <member name="P:Rainbow.Model.AlertDevice.Tags">
            <summary>
            <see cref="T:System.String"/> - An Array of free tags associated to the device. (max 5 tags. Each 64 characters max)
            </summary>
        </member>
        <member name="P:Rainbow.Model.AlertDevice.Geolocation">
            <summary>
            <see cref="P:Rainbow.Model.AlertDevice.Geolocation"/> - Geolocation of the device. (only latitude and longitude (in degrees) are used for the moment)
            </summary>
        </member>
        <member name="T:Rainbow.Model.AlertDevicesData">
            <summary>
            Structure used when retrieving severals AlertDevice from server
            </summary>
        </member>
        <member name="P:Rainbow.Model.AlertDevicesData.Data">
            <summary>
            List of AlertDevice found
            </summary>
        </member>
        <member name="P:Rainbow.Model.AlertDevicesData.Total">
            <summary>
            Total number of items available
            </summary>
        </member>
        <member name="P:Rainbow.Model.AlertDevicesData.Limit">
            <summary>
            Number of items asked
            </summary>
        </member>
        <member name="P:Rainbow.Model.AlertDevicesData.Offset">
            <summary>
            Offset used
            </summary>
        </member>
        <member name="T:Rainbow.Model.AlertFilter">
            <summary>
            Define a filter used when an alert is created to notify only some devices
            </summary>
        </member>
        <member name="P:Rainbow.Model.AlertFilter.Id">
            <summary>
            <see cref="T:System.String"/> - Filter Id
            </summary>
        </member>
        <member name="P:Rainbow.Model.AlertFilter.Name">
            <summary>
            <see cref="T:System.String"/> - Filter Name
            </summary>
        </member>
        <member name="P:Rainbow.Model.AlertFilter.CompanyId">
            <summary>
            <see cref="T:System.String"/> - company identifier that owns this filter
            </summary>
        </member>
        <member name="P:Rainbow.Model.AlertFilter.Tags">
            <summary>
            <see cref="T:System.String"/> - tag's list to apply
            </summary>
        </member>
        <member name="T:Rainbow.Model.AlertFiltersData">
            <summary>
            Structure used to retrieve several AlertFilters objects from server
            </summary>
        </member>
        <member name="P:Rainbow.Model.AlertFiltersData.Data">
            <summary>
            List of <see cref="T:Rainbow.Model.AlertFilter"/> found
            </summary>
        </member>
        <member name="P:Rainbow.Model.AlertFiltersData.Total">
            <summary>
            Total number of items available
            </summary>
        </member>
        <member name="P:Rainbow.Model.AlertFiltersData.Limit">
            <summary>
            Number of items asked
            </summary>
        </member>
        <member name="P:Rainbow.Model.AlertFiltersData.Offset">
            <summary>
            Offset used
            </summary>
        </member>
        <member name="T:Rainbow.Model.AlertMessage">
            <summary>
            Alert Message object describing an Alert message sent or received
            
            Cf: CAP V1.2 - http://docs.oasis-open.org/emergency/cap/v1.2/CAP-v1.2-os.html
            </summary>
        </member>
        <member name="F:Rainbow.Model.AlertMessage.Id">
            <summary>
            <see cref="T:System.String"/> - Xmpp Id of the alert message
            </summary>
        </member>
        <member name="F:Rainbow.Model.AlertMessage.ToJid">
            <summary>
            <see cref="T:System.String"/> - The JID of the recipient of this alert message
            </summary>
        </member>
        <member name="F:Rainbow.Model.AlertMessage.FromJid">
            <summary>
            <see cref="T:System.String"/> - The JID (without the resource) of the user who sent this alert message.
            </summary>
        </member>
        <member name="F:Rainbow.Model.AlertMessage.FromResource">
            <summary>
            <see cref="T:System.String"/> - The resource of the user who sent this message
            </summary>
        </member>
        <member name="F:Rainbow.Model.AlertMessage.Identifier">
            <summary>
            <see cref="T:System.String"/> - Identifier of the alert message (alertId). It's the one to use in <see cref="T:Alerts.SendAlertFeedback(string, string, Action{SdkResult{bool}})"/>
            </summary>
        </member>
        <member name="F:Rainbow.Model.AlertMessage.Sender">
            <summary>
            <see cref="T:System.String"/> - Sender of the alert message
            </summary>
        </member>
        <member name="F:Rainbow.Model.AlertMessage.Sent">
            <summary>
            <see cref="T:System.DateTime"/> - Date time when sent
            </summary>
        </member>
        <member name="F:Rainbow.Model.AlertMessage.Status">
            <summary>
            <see cref="T:System.String"/> - Status ("Actual" or "Test")
            </summary>
        </member>
        <member name="F:Rainbow.Model.AlertMessage.MsgType">
            <summary>
            <see cref="T:System.String"/> - Msg Type ("Alert", "Cancel", "Update")
            </summary>
        </member>
        <member name="F:Rainbow.Model.AlertMessage.References">
            <summary>
            <see cref="T:System.String"/> - The group listing identifying earlier message(s) referenced by the alert message. The extended message identifier(s) (in the form "sender,identifier,sent") 
            </summary>
        </member>
        <member name="F:Rainbow.Model.AlertMessage.Scope">
            <summary>
            <see cref="T:System.String"/> - scope
            </summary>
        </member>
        <member name="F:Rainbow.Model.AlertMessage.Info">
            <summary>
            <see cref="T:Rainbow.Model.AlertMessageInfo"/> - Info
            </summary>
        </member>
        <member name="T:Rainbow.Model.AlertMessageInfo">
            <summary>
            Alert Message Info object describing an Alert message sent or received
            
            Cf: CAP V1.2 - http://docs.oasis-open.org/emergency/cap/v1.2/CAP-v1.2-os.html
            </summary>
        </member>
        <member name="F:Rainbow.Model.AlertMessageInfo.Category">
            <summary>
            <see cref="T:System.String"/> - Category
            </summary>
        </member>
        <member name="F:Rainbow.Model.AlertMessageInfo.Event">
            <summary>
            <see cref="T:System.String"/> - Event
            </summary>
        </member>
        <member name="F:Rainbow.Model.AlertMessageInfo.Urgency">
            <summary>
            <see cref="T:System.String"/> - Urgency
            </summary>
        </member>
        <member name="F:Rainbow.Model.AlertMessageInfo.Certainty">
            <summary>
            <see cref="T:System.String"/> - Certainty
            </summary>
        </member>
        <member name="F:Rainbow.Model.AlertMessageInfo.Expires">
            <summary>
            <see cref="T:System.DateTime"/> - Expires
            </summary>
        </member>
        <member name="F:Rainbow.Model.AlertMessageInfo.SenderName">
            <summary>
            <see cref="T:System.String"/> - SenderName
            </summary>
        </member>
        <member name="F:Rainbow.Model.AlertMessageInfo.Headline">
            <summary>
            <see cref="T:System.String"/> - Headline
            </summary>
        </member>
        <member name="F:Rainbow.Model.AlertMessageInfo.Description">
            <summary>
            <see cref="T:System.String"/> - Description
            </summary>
        </member>
        <member name="F:Rainbow.Model.AlertMessageInfo.DescriptionMimeType">
            <summary>
            <see cref="T:System.String"/> - Description Mime Type
            </summary>
        </member>
        <member name="F:Rainbow.Model.AlertMessageInfo.Instruction">
            <summary>
            <see cref="T:System.String"/> - Instruction
            </summary>
        </member>
        <member name="F:Rainbow.Model.AlertMessageInfo.Contact">
            <summary>
            <see cref="T:System.String"/> - Contact
            </summary>
        </member>
        <member name="T:Rainbow.Model.AlertReportSummary">
            <summary>
            Define an alert report summary
            </summary>
        </member>
        <member name="P:Rainbow.Model.AlertReportSummary.State">
            <summary>
            <see cref="T:System.String"/> - Alert state
            </summary>
        </member>
        <member name="P:Rainbow.Model.AlertReportSummary.EndPointToNotify">
            <summary>
            <see cref="T:System.Double"/> - Nb end points to notify
            </summary>
        </member>
        <member name="P:Rainbow.Model.AlertReportSummary.EndPointReceived">
            <summary>
            <see cref="T:System.Double"/> - Nb end points which have received the alert
            </summary>
        </member>
        <member name="P:Rainbow.Model.AlertReportSummary.EndPointRead">
            <summary>
            <see cref="T:System.Double"/> - Nb end points which have read the alert
            </summary>
        </member>
        <member name="T:Rainbow.Model.AlertReportDetails">
            <summary>
            Define an alert report details
            </summary>
        </member>
        <member name="P:Rainbow.Model.AlertReportDetails.Throughput">
            <summary>
            <see cref="T:System.Double"/> - Nb of messages sent by seconds
            </summary>
        </member>
        <member name="P:Rainbow.Model.AlertReportDetails.FirstTimeSent">
            <summary>
            <see cref="T:System.DateTime"/> - Date when the first notification message was sent
            </summary>
        </member>
        <member name="P:Rainbow.Model.AlertReportDetails.LastTimeSent">
            <summary>
            <see cref="T:System.DateTime"/> - Date when the last notification message was sent
            </summary>
        </member>
        <member name="T:Rainbow.Model.AlertTemplate">
            <summary>
            Describe an alert using CAP (Common Alert Protocol)
            
            In Description, it's possible to use more than "text/plain" format, HTML can be used.
            
            In this case the MimeType must be set to "text/html" AND the Descrition, the HTML code must be encapsulalted in "<![CDATA[< ... >]]>" 
            </summary>
        </member>
        <member name="P:Rainbow.Model.AlertTemplate.Id">
            <summary>
            <see cref="T:System.String"/> - Template Id
            </summary>
        </member>
        <member name="P:Rainbow.Model.AlertTemplate.Name">
            <summary>
            <see cref="T:System.String"/> - Human readable string identifying this template
            </summary>
        </member>
        <member name="P:Rainbow.Model.AlertTemplate.CompanyId">
            <summary>
            <see cref="T:System.String"/> - unique identifier of the company that own this template.  default value user logged in company Id
            </summary>
        </member>
        <member name="P:Rainbow.Model.AlertTemplate.Event">
            <summary>
            <see cref="T:System.String"/> - String denoting the type of the subject event of the alert message (max 255 characters)
            </summary>
        </member>
        <member name="P:Rainbow.Model.AlertTemplate.Description">
            <summary>
            <see cref="T:System.String"/> - String describing the subject event of the alert message (max 8192 characters)
            </summary>
        </member>
        <member name="P:Rainbow.Model.AlertTemplate.MimeType">
            <summary>
            <see cref="T:System.String"/> - Mime Type of description's content (max 255 characters) - Default value: text/plain
            </summary>
        </member>
        <member name="P:Rainbow.Model.AlertTemplate.SenderName">
            <summary>
            <see cref="T:System.String"/> - String naming the originator of the alert message (max 255 characters)
            </summary>
        </member>
        <member name="P:Rainbow.Model.AlertTemplate.Headline">
            <summary>
            <see cref="T:System.String"/> - headline of the alert message (max 255 characters) used for short message devices that may only presents this field (mobile device push)
            </summary>
        </member>
        <member name="P:Rainbow.Model.AlertTemplate.Instruction">
            <summary>
            <see cref="T:System.String"/> - text representing the recommended action (max 4096 characters)
            </summary>
        </member>
        <member name="P:Rainbow.Model.AlertTemplate.Contact">
            <summary>
            <see cref="T:System.String"/> - contact for follow-up or confirmation of the alert message (optional)
            </summary>
        </member>
        <member name="P:Rainbow.Model.AlertTemplate.Type">
            <summary>
            <see cref="T:System.String"/> - templates type only 'cap' is allowed
            </summary>
        </member>
        <member name="P:Rainbow.Model.AlertTemplate.Status">
            <summary>
            <see cref="T:System.String"/> - templates status ( 'Actual', 'Exercise', 'System', 'Test','Draft') - default: Actual
            </summary>
        </member>
        <member name="P:Rainbow.Model.AlertTemplate.Scope">
            <summary>
            <see cref="T:System.String"/> - templates scope ( 'Public', 'Restricted', 'Alert') - Default value: Public
            </summary>
        </member>
        <member name="P:Rainbow.Model.AlertTemplate.Category">
            <summary>
            <see cref="T:System.String"/> - template category ('Geo', 'Met', 'Safety', 'Security', 'Rescue', 'Fire', 'Health', 'Env', 'Transport', 'Infra', 'CBRNE', 'Other') - Default value: Safety
            </summary>
        </member>
        <member name="P:Rainbow.Model.AlertTemplate.Urgency">
            <summary>
            <see cref="T:System.String"/> - template urgency ('Immediate', 'Expected', 'Future', 'Past', 'Unknown') - Default value: Immediate
            </summary>
        </member>
        <member name="P:Rainbow.Model.AlertTemplate.Severity">
            <summary>
            <see cref="T:System.String"/> - template severity ('Extreme', 'Severe', 'Moderate', 'Minor', 'Unknown') - Default value: Severe
            </summary>
        </member>
        <member name="P:Rainbow.Model.AlertTemplate.Certainty">
            <summary>
            <see cref="T:System.String"/> - template certainty ('Observed', 'Likely', 'Possible', 'Unlikely', 'Unknown') - Default value: Observed
            </summary>
        </member>
        <member name="M:Rainbow.Model.AlertTemplate.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Rainbow.Model.AlertTemplatesData">
            <summary>
            Structure used when retrieving severals AlertTemplate from server
            </summary>
        </member>
        <member name="P:Rainbow.Model.AlertTemplatesData.Data">
            <summary>
            List of AlertTemplate found
            </summary>
        </member>
        <member name="P:Rainbow.Model.AlertTemplatesData.Total">
            <summary>
            Total number of items available
            </summary>
        </member>
        <member name="P:Rainbow.Model.AlertTemplatesData.Limit">
            <summary>
            Number of items asked
            </summary>
        </member>
        <member name="P:Rainbow.Model.AlertTemplatesData.Offset">
            <summary>
            Offset used
            </summary>
        </member>
        <member name="T:Rainbow.Model.ApplicationsInfoData">
            <summary>
            Data strcuture provided when asking server the list of Rainbow Application
            </summary>
        </member>
        <member name="P:Rainbow.Model.ApplicationsInfoData.Data">
            <summary>
            <see cref="T:System.Collections.Generic.List`1"/> - List of ApplicationInfo retrieved
            </summary>
        </member>
        <member name="P:Rainbow.Model.ApplicationsInfoData.Total">
            <summary>
            <see cref="T:System.Int32"/> - Total available
            </summary>
        </member>
        <member name="P:Rainbow.Model.ApplicationsInfoData.Limit">
            <summary>
            <see cref="T:System.Int32"/> - Nb  asked
            </summary>
        </member>
        <member name="P:Rainbow.Model.ApplicationsInfoData.Offset">
            <summary>
            <see cref="T:System.Int32"/> - Offset used 
            </summary>
        </member>
        <member name="T:Rainbow.Model.ApplicationInfo">
            <summary>
            Describe an Appllcation which can be used to connect to Rainbow infracstructure.
            </summary>
        </member>
        <member name="P:Rainbow.Model.ApplicationInfo.Id">
            <summary>
            <see cref="T:System.String"/> - Application unique identifier (appId).
            </summary>
        </member>
        <member name="P:Rainbow.Model.ApplicationInfo.AppSecret">
            <summary>
            <see cref="T:System.String"/> - Application secret token.
            </summary>
        </member>
        <member name="P:Rainbow.Model.ApplicationInfo.Origin">
            <summary>
            <see cref="T:System.String"/> - Application origin.
            </summary>
        </member>
        <member name="P:Rainbow.Model.ApplicationInfo.Name">
            <summary>
            <see cref="T:System.String"/> - Application title.
            </summary>
        </member>
        <member name="P:Rainbow.Model.ApplicationInfo.Latin_Name">
            <summary>
            <see cref="T:System.String"/> - Application latin name.
            </summary>
        </member>
        <member name="P:Rainbow.Model.ApplicationInfo.OwnerId">
            <summary>
            <see cref="T:System.String"/> - Unique identifier of the application owner.
            </summary>
        </member>
        <member name="P:Rainbow.Model.ApplicationInfo.DateOfCreation">
            <summary>
            <see cref="T:System.DateTime"/> - Date of creation of the application.
            </summary>
        </member>
        <member name="P:Rainbow.Model.ApplicationInfo.DateOfDeploymentRequest">
            <summary>
            <see cref="T:System.DateTime"/> - Date of deployment request of the application.
            </summary>
        </member>
        <member name="P:Rainbow.Model.ApplicationInfo.DateOfDeployment">
            <summary>
            <see cref="T:System.DateTime"/> - Date of deployment of the application.
            </summary>
        </member>
        <member name="P:Rainbow.Model.ApplicationInfo.ExpirationDate">
            <summary>
            <see cref="T:System.DateTime"/> - Date of expiration of the application.
            </summary>
        </member>
        <member name="P:Rainbow.Model.ApplicationInfo.State">
            <summary>
            <see cref="T:System.String"/> - State of the application. (new, active, blocked, deleted, stopped)
            </summary>
        </member>
        <member name="P:Rainbow.Model.ApplicationInfo.Type">
            <summary>
            <see cref="T:System.String"/> - Application type. (web, mobile, desktop, server, bot, iot, admin)
            </summary>
        </member>
        <member name="P:Rainbow.Model.ApplicationInfo.Activity">
            <summary>
            <see cref="T:System.String"/> - Application activity domain.
            </summary>
        </member>
        <member name="P:Rainbow.Model.ApplicationInfo.Env">
            <summary>
            <see cref="T:System.String"/> - Environment where the application is deploy.(not_deployed, in_deployment, deployed)
            </summary>
        </member>
        <member name="P:Rainbow.Model.ApplicationInfo.SsoAuthenticationRedirectUrl">
            <summary>
            <see cref="T:System.String"/> - URL which can be used by the application as callback URL for authentication using Single Sign On (OIDC, SAML).
            If this setting is not set, by default the SSO authentication methods redirect the obtained JWT on the URL https://web.openrainbow.com/#/?tkn=
            </summary>
        </member>
        <member name="P:Rainbow.Model.ApplicationInfo.OauthRedirectUrisoptionnel">
            <summary>
            <see cref="T:System.String"/> - URI(s) used by the application as callback URL for OAuth 2.0.
            Mandatory parameter to use OAuth 2.0 login method.To ensure the authentication security, Rainbow only sends OAuth authentication tokens to URLs that are set in oauthRedirectUris.
            </summary>
        </member>
        <member name="P:Rainbow.Model.ApplicationInfo.EnableOAuthImplicitGrant">
            <summary>
            <see cref="T:System.String"/> - If set to true, allow the application to use OAuth 2.0 implicit grant.
            This setting is disabled by default, as implicit flow is less secure than authorize code grant.
            </summary>
        </member>
        <member name="P:Rainbow.Model.ApplicationInfo.EnableOAuthRefreshTokenRotationoptionnel">
            <summary>
            <see cref="T:System.String"/> - If set to true, enable the refresh_token rotation for this application.
            When refresh_token rotation is enabled, each time the application uses a refresh_token to retrieve a new access_token, a new refresh_token is also returned and the previous refresh_token is revoked.
            refresh_token rotation reduces the threat if the refresh_token would be compromised, as it will be revoked the next time the application refreshed its access_token.
            This setting is enabled by default, as refresh_token rotation is more secure. It is not recommended to disabled this setting.
            </summary>
        </member>
        <member name="P:Rainbow.Model.ApplicationInfo.TermsOfServiceUrloptionnel">
            <summary>
            <see cref="T:System.String"/> - URL of the application's website explaining the application's terms of services for the end user.
            This URL will be displayed as a link in the OAuth 2.0 consent form presented to the user(the page allowing the user to allow the application to access his data).
            This parameter is optional, if not provided no link will be displayed in the consent form.
            </summary>
        </member>
        <member name="P:Rainbow.Model.ApplicationInfo.PrivacyPoliciesUrloptionnel">
            <summary>
            <see cref="T:System.String"/> - URL of the application's website explaining the application's privacy policy for the end user.
            This URL will be displayed as a link in the OAuth 2.0 consent form presented to the user(the page allowing the user to allow the application to access his data).
            This parameter is optional, if not provided no link will be displayed in the consent form.
            </summary>
        </member>
        <member name="P:Rainbow.Model.ApplicationInfo.AppSuperadminCommentoptionnel">
            <summary>
            <see cref="T:System.String"/> - Comment regarding the application (free data).
            Only returned to users with superadmin/support/app_superadmin/app_support roles.
            </summary>
        </member>
        <member name="P:Rainbow.Model.ApplicationInfo.AppSuperadminStatusoptionnel">
            <summary>
            <see cref="T:System.String"/> - Application status (free data).
            Only returned to users with superadmin/support/app_superadmin/app_support roles.
            </summary>
        </member>
        <member name="T:Rainbow.Model.ApplicationToken">
            <summary>
            Describe the application token used as authentication purpose with the Rainbow Server.
            
            It's possible to renew according "CountRenewed" and "MaxTokenRenew".
            
            It's necessary to renew when "ValidTo" is no more accurate.
            
            </summary>
        </member>
        <member name="P:Rainbow.Model.ApplicationToken.UserId">
            <summary>
            Id of the user using this application token
            </summary>
        </member>
        <member name="P:Rainbow.Model.ApplicationToken.UserJid_im">
            <summary>
            Jid_im of the user using this application token
            </summary>
        </member>
        <member name="P:Rainbow.Model.ApplicationToken.CompanyId">
            <summary>
            CompanyId of the user using this application token
            </summary>
        </member>
        <member name="P:Rainbow.Model.ApplicationToken.CompanyName">
            <summary>
            CompanyName of the user using this application token
            </summary>
        </member>
        <member name="P:Rainbow.Model.ApplicationToken.LoginEmail">
            <summary>
            Login Email of the user using this application token
            </summary>
        </member>
        <member name="P:Rainbow.Model.ApplicationToken.ApplicationId">
            <summary>
            Application Id of the user using this application token
            </summary>
        </member>
        <member name="P:Rainbow.Model.ApplicationToken.ApplicationName">
            <summary>
            Application Name of the user using this application token
            </summary>
        </member>
        <member name="P:Rainbow.Model.ApplicationToken.Token">
            <summary>
            JSON Web Token (JWT)
            </summary>
        </member>
        <member name="P:Rainbow.Model.ApplicationToken.CountRenewed">
            <summary>
            Count ot token renewed
            </summary>
        </member>
        <member name="P:Rainbow.Model.ApplicationToken.MaxTokenRenew">
            <summary>
            Max possible renew
            </summary>
        </member>
        <member name="P:Rainbow.Model.ApplicationToken.ValidTo">
            <summary>
            Validity date of the token
            </summary>
        </member>
        <member name="T:Rainbow.Model.AuthenticationSSOUrl">
            <summary>
            Define an authentication SSO Url object
            </summary>
        </member>
        <member name="P:Rainbow.Model.AuthenticationSSOUrl.LoginUrl">
            <summary>
            <see cref="T:System.String"/> - URL to use to perform a login. Not returned if authentication type is OIDC with OnlyUseImplicitFlow = True
            </summary>
        </member>
        <member name="P:Rainbow.Model.AuthenticationSSOUrl.LogoutUrl">
            <summary>
            <see cref="T:System.String"/> - URL to use to perform a logout
            </summary>
        </member>
        <member name="P:Rainbow.Model.AuthenticationSSOUrl.Type">
            <summary>
            <see cref="T:System.String"/> - Authentication type. Allowed values: RAINBOW, SAML, OIDC
            </summary>
        </member>
        <member name="P:Rainbow.Model.AuthenticationSSOUrl.OnlyUseImplicitFlow">
            <summary>
            <see cref="T:System.Boolean"/> - Indicates if configuration allows to use only OIDC implicit flow. Only set if type is OIDC.
            </summary>
        </member>
        <member name="P:Rainbow.Model.AuthenticationSSOUrl.ClientId">
            <summary>
            <see cref="T:System.String"/> - ClientId used for Rainbow application in OIDC provider. Only set if type is OIDC.
            </summary>
        </member>
        <member name="P:Rainbow.Model.AuthenticationSSOUrl.DiscoveryUrl">
            <summary>
            <see cref="T:System.String"/> - OIDC provider's Discovery Url. Only set if type is OIDC.
            </summary>
        </member>
        <member name="P:Rainbow.Model.AuthenticationSSOUrl.Issuer">
            <summary>
            <see cref="T:System.String"/> - OIDC provider's Issuer Identifier. Only set if type is OIDC.
            </summary>
        </member>
        <member name="P:Rainbow.Model.AuthenticationSSOUrl.AuthorizationEndpoint">
            <summary>
            <see cref="T:System.String"/> - OIDC provider's authorization endpoint. Only set if type is OIDC.
            </summary>
        </member>
        <member name="P:Rainbow.Model.AuthenticationSSOUrl.JwksUri">
            <summary>
            <see cref="T:System.String"/> - OIDC provider's jwks_uri. This setting is used to retrieve the OIDC provider's signing key(s) in order to validate the id_token's signature. Only set if type is OIDC.
            </summary>
        </member>
        <member name="M:Rainbow.Model.AuthenticationSSOUrl.ToString">
            <summary>
            Serialize this object to String
            </summary>
            <returns><see cref="T:System.String"/> as serialization result</returns>
        </member>
        <member name="T:Rainbow.Model.Bot">
            <summary>
            Bot object describing a bot like 'Emily'
            </summary>
        </member>
        <member name="P:Rainbow.Model.Bot.Id">
            <summary>
            <see cref="T:System.String"/> - Bot Id
            </summary>
        </member>
        <member name="P:Rainbow.Model.Bot.AvatarId">
            <summary>
            <see cref="T:System.String"/> - Bot Avatarr Id (to use when
            </summary>
        </member>
        <member name="P:Rainbow.Model.Bot.Jid">
            <summary>
            <see cref="T:System.String"/> - Bot Jid
            </summary>
        </member>
        <member name="P:Rainbow.Model.Bot.Name">
            <summary>
            <see cref="T:System.String"/> - Name
            </summary>
        </member>
        <member name="P:Rainbow.Model.Bot.Capabilities">
            <summary>
            <see cref="T:System.String"/> - List of capabilities tags
            </summary>
        </member>
        <member name="P:Rainbow.Model.Bot.LastAvatarUpdateDate">
            <summary>
            <see cref="T:System.DateTime"/> - Date of last bot avatar create/update  in **UTC format**, **If there is no avatar, this field is equal to DateTime.MinValue**
            </summary>
        </member>
        <member name="P:Rainbow.Model.Bot.CreatedByUserId">
            <summary>
            <see cref="T:System.String"/> - User Id of the bot's creator
            </summary>
        </member>
        <member name="P:Rainbow.Model.Bot.CreatedByLoginEmail">
            <summary>
            <see cref="T:System.String"/> - Login email of the bot's creator
            </summary>
        </member>
        <member name="P:Rainbow.Model.Bot.IsRainbowSupportBot">
            <summary>
            <see cref="T:System.String"/> - True if this bot is the Rainbow support bot
            </summary>
        </member>
        <member name="M:Rainbow.Model.Bot.ToString">
            <summary>
            Serialize this object to String
            </summary>
            <returns><see cref="T:System.String"/> as serialization result</returns>
        </member>
        <member name="T:Rainbow.Model.BotsResult">
            <summary>
            To store Bots result
            </summary>
        </member>
        <member name="P:Rainbow.Model.BotsResult.Data">
            <summary>
            Store list of Bots
            </summary>
        </member>
        <member name="P:Rainbow.Model.BotsResult.Total">
            <summary>
            To know the total number of Bots available
            </summary>
        </member>
        <member name="P:Rainbow.Model.BotsResult.Limit">
            <summary>
            The limit used to get this result
            </summary>
        </member>
        <member name="P:Rainbow.Model.BotsResult.Offset">
            <summary>
            The offset used to get this result
            </summary>
        </member>
        <member name="T:Rainbow.Model.Bubble">
            <summary>
            This class represents a bubble
            
            A bubble is an interaction between several participants based on IM media.A bubble is described by a name and a description.
            
            Like for P2P conversation, A conversation within a bubble never ends and all interactions done can be retrieved.
            
            The contacts list is limited to the first one hundred. A specific call is necessary to retrieve all other members
            </summary>
        </member>
        <member name="P:Rainbow.Model.Bubble.Name">
            <summary>
            <see cref="T:System.String"/> - Bubble name
            </summary>
        </member>
        <member name="P:Rainbow.Model.Bubble.Id">
            <summary>
            <see cref="T:System.String"/> - Bubble unique identifier
            </summary>
        </member>
        <member name="P:Rainbow.Model.Bubble.Visibility">
            <summary>
            <see cref="T:System.String"/> - Public/private visibility for search - see <see cref="T:Rainbow.Model.Bubble.BubbleVisibility"/> for possible values
            </summary>
        </member>
        <member name="P:Rainbow.Model.Bubble.Topic">
            <summary>
            <see cref="T:System.String"/> - Bubble topic
            </summary>
        </member>
        <member name="P:Rainbow.Model.Bubble.Jid">
            <summary>
            <see cref="T:System.String"/> - Buble Jid
            </summary>
        </member>
        <member name="P:Rainbow.Model.Bubble.CreationDate">
            <summary>
            <see cref="T:System.DateTime"/> - Creation date of the bubble (read only, set automatically during bubble creation)
            </summary>
        </member>
        <member name="P:Rainbow.Model.Bubble.LastAvatarUpdateDate">
            <summary>
            <see cref="T:System.DateTime"/> - Date of last bubble avatar create/update  in **UTC format**, **If there is no avatar, this field is equal to DateTime.MinValue**
            </summary>
        </member>
        <member name="P:Rainbow.Model.Bubble.Creator">
            <summary>
            <see cref="T:System.String"/> - Contact ID of the creator
            </summary>
        </member>
        <member name="P:Rainbow.Model.Bubble.CustomData">
            <summary>
            <see cref="T:System.Collections.Generic.Dictionary`2"/> - Custom data. Key/value format - Max 10 keys allowed, Max key length 64, Max key value length 512
            </summary>
        </member>
        <member name="P:Rainbow.Model.Bubble.IsAlertNotificationEnabled">
            <summary>
            <see cref="T:System.Boolean"/> - When set to true, allows participants in the room to send message with UrgencyType = UrgencyType.High
            </summary>
        </member>
        <member name="P:Rainbow.Model.Bubble.Users">
            <summary>
            List of <see cref="T:Rainbow.Model.Bubble.Member"/> objects
            </summary>
        </member>
        <member name="P:Rainbow.Model.Bubble.Conference">
            <summary>
            When the buuble hosts or has hosted a meeting o a Webinar, this is a set of data usefull to display list of meetings
            
            List of <see cref="T:Rainbow.Model.Bubble.ConferenceObject"/> object
            </summary>
        </member>
        <member name="P:Rainbow.Model.Bubble.GuestEmails">
            <summary>
            List of <see cref="T:System.String"/> - Array of non rainbow users email. 
            </summary>
        </member>
        <member name="P:Rainbow.Model.Bubble.DisableNotifications">
            <summary>
            <see cref="T:System.Boolean"/> - When set to true, there is no more notifications to be sent by a room in all cases with text body (user join/leave, conference start/end)
            </summary>
        </member>
        <member name="P:Rainbow.Model.Bubble.ActiveUsersCounter">
            <summary>
             <see cref="T:System.Int32"/> - The number of users with the status 'accepted' or 'invited'.
            </summary>
        </member>
        <member name="P:Rainbow.Model.Bubble.IsActive">
            <summary>
            <see cref="T:System.Boolean"/> - When set to true all bubble users are invited to share their presence. Else they have to wait an event from XMPP server.
            This flag is reset when the room is inactive for a while (basically 60 days), and set when the first user share his presence. 
            This flag is read-only.
            </summary>
        </member>
        <member name="M:Rainbow.Model.Bubble.ToString">
            <summary>
            Serialize this object to String
            </summary>
            <returns><see cref="T:System.String"/> as serialization result</returns>
        </member>
        <member name="T:Rainbow.Model.Bubble.Webinar">
            <summary>
            Describe a Webinar
            </summary>
        </member>
        <member name="P:Rainbow.Model.Bubble.Webinar.Id">
            <summary>
            Webinar ID
            </summary>
        </member>
        <member name="P:Rainbow.Model.Bubble.Webinar.CompanyId">
            <summary>
            Company Id
            </summary>
        </member>
        <member name="P:Rainbow.Model.Bubble.Webinar.ProfileId">
            <summary>
            Profile ID
            </summary>
        </member>
        <member name="T:Rainbow.Model.Bubble.ConferenceObject">
            <summary>
            When the room hosts or has hosted a meeting, this is a set of data usefull to display list of meetings
            </summary>
        </member>
        <member name="P:Rainbow.Model.Bubble.ConferenceObject.Scheduled">
            <summary>
            <see cref="T:System.Boolean"/> - Kind of meeting (false: Personal meeting, true: scheduled meeting - no more exist )
            </summary>
        </member>
        <member name="P:Rainbow.Model.Bubble.ConferenceObject.ScheduledStartDate">
            <summary>
            <see cref="T:System.DateTime"/> - Scheduled meeting start date (or <see cref="T:System.DateTime"/> is set as **MinValue** if not specified)
            </summary>
        </member>
        <member name="P:Rainbow.Model.Bubble.ConferenceObject.ScheduledEndDate">
            <summary>
            <see cref="T:System.DateTime"/> - Scheduled meeting end date (or <see cref="T:System.DateTime"/> is set as **MinValue** if not specified)
            </summary>
        </member>
        <member name="P:Rainbow.Model.Bubble.ConferenceObject.ScheduledDuration">
            <summary>
            <see cref="T:System.Int32"/> - Scheduled meeting duration
            </summary>
        </member>
        <member name="P:Rainbow.Model.Bubble.ConferenceObject.MediaType">
            <summary>
            <see cref="T:System.String"/> - Conference type - see <see cref="P:Rainbow.Model.Bubble.ConferenceObject.MediaType"/> for possible values
            </summary>
        </member>
        <member name="P:Rainbow.Model.Bubble.ConferenceObject.LastUpdateDate">
            <summary>
            <see cref="T:System.DateTime"/> - Scheduled meeting creation or update date (or <see cref="T:System.DateTime"/> is set as **MinValue** if not specified)
            </summary>
        </member>
        <member name="P:Rainbow.Model.Bubble.ConferenceObject.MuteUponEntry">
            <summary>
            To mute automatically (or not) participants when they join the personal conference.
            </summary>
        </member>
        <member name="P:Rainbow.Model.Bubble.ConferenceObject.PlayEntryTone">
            <summary>
            To play (or not) entry tone when a particpant joins the personal conference.
            </summary>
        </member>
        <member name="P:Rainbow.Model.Bubble.ConferenceObject.Webinar">
            <summary>
            Objet not null if this conference is a Webinar
            </summary>
        </member>
        <member name="M:Rainbow.Model.Bubble.ConferenceObject.ToString">
            <summary>
            Serialize this object to String
            </summary>
            <returns><see cref="T:System.String"/> as serialization result</returns>
        </member>
        <member name="T:Rainbow.Model.Bubble.Member">
            <summary>
            Define a member (not a guest) of a bubble
            </summary>
        </member>
        <member name="P:Rainbow.Model.Bubble.Member.UserId">
            <summary>
            <see cref="T:System.String"/> - Contact Id of the member
            </summary>
        </member>
        <member name="P:Rainbow.Model.Bubble.Member.AdditionDate">
            <summary>
            <see cref="T:System.DateTime"/> of the addition of this member in this bubble
            </summary>
        </member>
        <member name="P:Rainbow.Model.Bubble.Member.Privilege">
            <summary>
            <see cref="T:Rainbow.Model.Bubble.MemberPrivilege"/> - Privilege of this member in this bubble - see <see cref="T:Rainbow.Model.Bubble.MemberPrivilege"/> for possible values
            </summary>
        </member>
        <member name="P:Rainbow.Model.Bubble.Member.Status">
            <summary>
            <see cref="T:Rainbow.Model.Bubble.MemberStatus"/> - The member's status about this bubble - see <see cref="T:Rainbow.Model.Bubble.MemberStatus"/> for possible values
            </summary>
        </member>
        <member name="M:Rainbow.Model.Bubble.Member.ToString">
            <summary>
            Serialize this object to String
            </summary>
            <returns><see cref="T:System.String"/> as serialization result</returns>
        </member>
        <member name="T:Rainbow.Model.Bubble.MemberPrivilege">
            <summary>
            Member's Privilege in a bubble
            </summary>
        </member>
        <member name="F:Rainbow.Model.Bubble.MemberPrivilege.Guest">
            <summary>
            <see cref="T:System.String"/> - Guest: the member is a guest in this bubble
            </summary>
        </member>
        <member name="F:Rainbow.Model.Bubble.MemberPrivilege.User">
            <summary>
            <see cref="T:System.String"/> - User: the member is a simple user in this bubble
            </summary>
        </member>
        <member name="F:Rainbow.Model.Bubble.MemberPrivilege.Moderator">
            <summary>
            <see cref="T:System.String"/> - Moderator: the member is a moderator in this bubble
            </summary>
        </member>
        <member name="F:Rainbow.Model.Bubble.MemberPrivilege.Owner">
            <summary>
            <see cref="T:System.String"/> - Owner: the member is the owner of this bubble
            </summary>
        </member>
        <member name="T:Rainbow.Model.Bubble.MemberStatus">
            <summary>
            The member's status about this bubble 
            </summary>
        </member>
        <member name="F:Rainbow.Model.Bubble.MemberStatus.Invited">
            <summary>
            <see cref="T:System.String"/> - Invited: user has been invited but has not accepted yet
            </summary>
        </member>
        <member name="F:Rainbow.Model.Bubble.MemberStatus.Accepted">
            <summary>
            <see cref="T:System.String"/> - accepted: user has been invited and has accepted
            </summary>
        </member>
        <member name="F:Rainbow.Model.Bubble.MemberStatus.Unsubscribed">
            <summary>
            <see cref="T:System.String"/> - unsubscribed: user has been invited and has unsubscribed
            </summary>
        </member>
        <member name="F:Rainbow.Model.Bubble.MemberStatus.Deleted">
            <summary>
            <see cref="T:System.String"/> - deleted: the user account has been deleted from Rainbow
            </summary>
        </member>
        <member name="T:Rainbow.Model.Bubble.BubbleVisibility">
            <summary>
            Bubble Public/private visibility for search
            </summary>
        </member>
        <member name="F:Rainbow.Model.Bubble.BubbleVisibility.AsPrivate">
            <summary>
            <see cref="T:System.String"/> - AsPrivate: cannot be found by search
            </summary>
        </member>
        <member name="F:Rainbow.Model.Bubble.BubbleVisibility.AsPublic">
            <summary>
            <see cref="T:System.String"/> - AsPublic: can be found by search
            </summary>
        </member>
        <member name="T:Rainbow.Model.Bubble.MediaType">
            <summary>
            To store list possible values of Conference type
            </summary>
        </member>
        <member name="F:Rainbow.Model.Bubble.MediaType.Webrtc">
            <summary>
            <see cref="T:System.String"/> - Web RTC conference
            </summary>
        </member>
        <member name="F:Rainbow.Model.Bubble.MediaType.PstnAudio">
            <summary>
            <see cref="T:System.String"/> - PSTN conference
            </summary>
        </member>
        <member name="F:Rainbow.Model.Bubble.MediaType.WebrtcSharingOnly">
            <summary>
            <see cref="T:System.String"/> - Web RTC with sharing Only
            </summary>
        </member>
        <member name="T:Rainbow.Model.CalendarStateResult">
            <summary>
            Store result of Calendar State
            </summary>
        </member>
        <member name="F:Rainbow.Model.CalendarStateResult.Calendars">
            <summary>
            Dictionary of CalendarState objects
            </summary>
        </member>
        <member name="T:Rainbow.Model.CalendarOutOfOfficeState">
            <summary>
            Define the calendar out of office state of a contact
            </summary>
        </member>
        <member name="P:Rainbow.Model.CalendarOutOfOfficeState.Enabled">
            <summary>
            To know if "out of Office" is enabled
            </summary>
        </member>
        <member name="P:Rainbow.Model.CalendarOutOfOfficeState.Start">
            <summary>
            The "out of office" start date
            </summary>
        </member>
        <member name="P:Rainbow.Model.CalendarOutOfOfficeState.End">
            <summary>
            The "out of office" end date
            </summary>
        </member>
        <member name="P:Rainbow.Model.CalendarOutOfOfficeState.Message_text">
            <summary>
            The "out of office" message as plain text
            </summary>
        </member>
        <member name="P:Rainbow.Model.CalendarOutOfOfficeState.Message_html">
            <summary>
            The "out of office" message as HTML (if any)
            </summary>
        </member>
        <member name="M:Rainbow.Model.CalendarOutOfOfficeState.ToString">
            <summary>
            Serialize this object to String
            </summary>
            <returns><see cref="T:System.String"/> as serialization result</returns>
        </member>
        <member name="T:Rainbow.Model.CalendarState">
            <summary>
            Define the calendar state of a contact
            </summary>
        </member>
        <member name="P:Rainbow.Model.CalendarState.Status">
            <summary>
            The calendar status - See <see cref="T:Rainbow.Model.CalendarState.CalendarStatus"/> for possible values
            </summary>
        </member>
        <member name="P:Rainbow.Model.CalendarState.Busy">
            <summary>
            To know is contact is busy or not
            </summary>
        </member>
        <member name="P:Rainbow.Model.CalendarState.Subject">
            <summary>
            The meeting subject
            </summary>
        </member>
        <member name="P:Rainbow.Model.CalendarState.Since">
            <summary>
            The meeting since date
            </summary>
        </member>
        <member name="P:Rainbow.Model.CalendarState.Until">
            <summary>
            The meeting until date
            </summary>
        </member>
        <member name="P:Rainbow.Model.CalendarState.Provider">
            <summary>
            Calendar provider: office365, google
            </summary>
        </member>
        <member name="P:Rainbow.Model.CalendarState.IsEnabled">
            <summary>
            True if calendar status sharing is enabled or not
            </summary>
        </member>
        <member name="M:Rainbow.Model.CalendarState.ToString">
            <summary>
            Serialize this object to String
            </summary>
            <returns><see cref="T:System.String"/> as serialization result</returns>
        </member>
        <member name="T:Rainbow.Model.CalendarState.CalendarStatus">
            <summary>
            Status of the calendar status
            </summary>
        </member>
        <member name="F:Rainbow.Model.CalendarState.CalendarStatus.NONE">
            <summary>
            <see cref="T:System.String"/> - NONE - calendar sharing is not defined
            </summary>
        </member>
        <member name="F:Rainbow.Model.CalendarState.CalendarStatus.CONSENT_REQUIRED">
            <summary>
            <see cref="T:System.String"/> - CONSENT_REQUIRED - calendar sharing with bad access credentials, new user consent is required
            </summary>  
        </member>
        <member name="F:Rainbow.Model.CalendarState.CalendarStatus.DISABLED">
            <summary>
            <see cref="T:System.String"/> - DISABLED - calendar sharing is disabled
            </summary>  
        </member>
        <member name="F:Rainbow.Model.CalendarState.CalendarStatus.FREE">
            <summary>
            <see cref="T:System.String"/> - FREE - calendar sharing (enabled) with contact in 'free' status
            </summary>  
        </member>
        <member name="F:Rainbow.Model.CalendarState.CalendarStatus.OUT_OF_OFFICE">
            <summary>
            <see cref="T:System.String"/> - OUT_OF_OFFICE - calendar sharing (enabled) with contact in 'out_of_office' status
            </summary>  
        </member>
        <member name="F:Rainbow.Model.CalendarState.CalendarStatus.BUSY">
            <summary>
            <see cref="T:System.String"/> - BUSY - calendar sharing (enabled) with contact in 'busy' status
            </summary>  
        </member>
        <member name="T:Rainbow.Model.Call">
            <summary>
            This class represents a call.
            
            A call is a "short" interaction between the user and one or several contacts(Rainbow users or not) that uses either a WebRTC media(audio, video or screen sharing) or a Telephony media(PBX phone).
            
            No Rainbow users such as external users can only be engaged into a Telephony call.
            
            A call is always attached to a conversation.
            </summary>
        </member>
        <member name="T:Rainbow.Model.Call.Media">
            <summary>
            <see cref="T:System.Enum"/> - List af available media in a call
            </summary>
        </member>
        <member name="F:Rainbow.Model.Call.Media.NONE">
            <summary>
            None 
            </summary>
        </member>
        <member name="F:Rainbow.Model.Call.Media.AUDIO">
            <summary>
            Audio 
            </summary>
        </member>
        <member name="F:Rainbow.Model.Call.Media.VIDEO">
            <summary>
            Video
            </summary>
        </member>
        <member name="F:Rainbow.Model.Call.Media.SHARING">
            <summary>
            Sharing
            </summary>
        </member>
        <member name="T:Rainbow.Model.Call.Status">
            <summary>
            <see cref="T:System.Enum"/> - List af available call status
            </summary>
        </member>
        <member name="F:Rainbow.Model.Call.Status.UNKNOWN">
            <summary>
            Call cleared
            </summary>
        </member>
        <member name="F:Rainbow.Model.Call.Status.DIALING">
            <summary>
            In DIALING
            </summary>
        </member>
        <member name="F:Rainbow.Model.Call.Status.QUEUED_INCOMING">
            <summary>
            In queue (user side)
            </summary>
        </member>
        <member name="F:Rainbow.Model.Call.Status.QUEUED_OUTGOING">
            <summary>
            In queue (recipient side)
            </summary>
        </member>
        <member name="F:Rainbow.Model.Call.Status.RINGING_INCOMING">
            <summary>
            Call in ringing (user side)
            </summary>
        </member>
        <member name="F:Rainbow.Model.Call.Status.RINGING_OUTGOING">
            <summary>
            Call in ringing (recipient side)
            </summary>
        </member>
        <member name="F:Rainbow.Model.Call.Status.ACTIVE">
            <summary>
            Active call
            </summary>
        </member>
        <member name="F:Rainbow.Model.Call.Status.HOLD">
            <summary>
            Call in hold
            </summary>
        </member>
        <member name="F:Rainbow.Model.Call.Status.PUT_ON_HOLD">
            <summary>
            Call put on hold
            </summary>
        </member>
        <member name="F:Rainbow.Model.Call.Status.RELEASING">
            <summary>
            Call in clearing
            </summary>
        </member>
        <member name="F:Rainbow.Model.Call.Status.ANSWERING">
            <summary>
            Call is answering
            </summary>
        </member>
        <member name="F:Rainbow.Model.Call.Status.CONNECTING">
            <summary>
            Trying to reconnect
            </summary>
        </member>
        <member name="F:Rainbow.Model.Call.Status.ERROR">
            <summary>
            Call in error answering
            </summary>
        </member>
        <member name="T:Rainbow.Model.Call.Type">
            <summary>
            <see cref="T:System.Enum"/> - List af available call type
            </summary>
        </member>
        <member name="F:Rainbow.Model.Call.Type.WEBRTC_P2P">
            <summary>
            P2P WebRTC call
            </summary>
        </member>
        <member name="F:Rainbow.Model.Call.Type.PHONE">
            <summary>
            Telephony call (from Pbx)
            </summary>
        </member>
        <member name="F:Rainbow.Model.Call.Type.WEBRTC_CONFERENCE">
            <summary>
            WebRTC Conference call
            </summary>
        </member>
        <member name="P:Rainbow.Model.Call.Id">
            <summary>
            <see cref="T:System.String"/> - Id of the call
            </summary>
        </member>
        <member name="P:Rainbow.Model.Call.PeerId">
            <summary>
            The Id of the Peer in P2P, null if it's a Conference
            </summary>
        </member>
        <member name="P:Rainbow.Model.Call.PeerJid">
            <summary>
            The Jid of the Peer in P2P, null if it's a Conference
            </summary>
        </member>
        <member name="P:Rainbow.Model.Call.Resource">
            <summary>
            Resource used to manage the call
            </summary>
        </member>
        <member name="P:Rainbow.Model.Call.GlobalCallId">
            <summary>
            <see cref="T:System.String"/> - GlobalCallId of the call
            </summary>
        </member>
        <member name="P:Rainbow.Model.Call.CallStatus">
            <summary>
            <see cref="T:Rainbow.Model.Call.Status"/> - Status of the call
            </summary>
        </member>
        <member name="P:Rainbow.Model.Call.ConversationId">
            <summary>
            <see cref="T:System.String"/> - Id of the conversation related to this call
            </summary>
        </member>
        <member name="P:Rainbow.Model.Call.CallType">
            <summary>
            <see cref="T:Rainbow.Model.Call.Type"/> - Type of the call
            </summary>
        </member>
        <member name="P:Rainbow.Model.Call.LocalMedias">
            <summary>
            <see cref="T:Rainbow.Model.Call.Media"/> - Local medias involved in this call. Several medias can be used in same time
            </summary>
        </member>
        <member name="P:Rainbow.Model.Call.RemoteMedias">
            <summary>
            <see cref="T:Rainbow.Model.Call.Media"/> - Remote medias involved in this call. Several medias can be used in same time
            </summary>
        </member>
        <member name="P:Rainbow.Model.Call.StartDate">
            <summary>
            <see cref="T:System.DateTime"/> - The date when the call has been started
            </summary>
        </member>
        <member name="P:Rainbow.Model.Call.Participants">
            <summary>
            List of <see cref="T:Rainbow.Model.CallParticipant"/> in the call
            </summary>
        </member>
        <member name="P:Rainbow.Model.Call.IsConference">
            <summary>
            <see cref="T:System.Boolean"/> - True if the call is a conference call
            </summary>
        </member>
        <member name="P:Rainbow.Model.Call.ConferenceId">
            <summary>
            <see cref="T:System.String"/> - Id of the conference (if any)
            </summary>
        </member>
        <member name="P:Rainbow.Model.Call.ConferenceJid">
            <summary>
            <see cref="T:System.String"/> - Jid of the conference (if any)
            </summary>
        </member>
        <member name="P:Rainbow.Model.Call.IsEscalated">
            <summary>
            <see cref="T:System.Boolean"/> - True if the call has been escalated to sharing or video (only relevant for WebRTC calls)
            </summary>
        </member>
        <member name="P:Rainbow.Model.Call.IsInitiator">
            <summary>
            <see cref="T:System.Boolean"/> - True if the user is the caller in P2P context or True if the user is the creator of the Conference
            </summary>
        </member>
        <member name="P:Rainbow.Model.Call.IsLocalVideoMuted">
            <summary>
            <see cref="T:System.Boolean"/> - True if the local video has been muted (only relevant for WebRTC calls)
            </summary>
        </member>
        <member name="P:Rainbow.Model.Call.IsLocalAudioMuted">
            <summary>
            <see cref="T:System.Boolean"/> - True if the local audio has been muted (only relevant for WebRTC calls)
            </summary>
        </member>
        <member name="P:Rainbow.Model.Call.IsLocalSharingMuted">
            <summary>
            <see cref="T:System.Boolean"/> - True if the local sharing has been muted (only relevant for WebRTC calls)
            </summary>
        </member>
        <member name="P:Rainbow.Model.Call.DeviceType">
            <summary>
            <see cref="T:System.String"/> - "MAIN" or "SECONDARY" - Used only for PBX calls
            </summary>
        </member>
        <member name="P:Rainbow.Model.Call.Subject">
            <summary>
            <see cref="T:System.String"/> - Subject of the call
            </summary>
        </member>
        <member name="M:Rainbow.Model.Call.#ctor">
            <summary>
            Default constructor - set all properties to default values
            </summary>
        </member>
        <member name="M:Rainbow.Model.Call.ToString">
            <summary>
            Serialize this object to string
            </summary>
            <returns><see cref="T:System.String"/> as serialization result</returns>
        </member>
        <member name="M:Rainbow.Model.Call.IsActive">
            <summary>
            To know if the call is Active - Mmedia can be added/removed only on an active call.
            </summary>
            <returns><see cref="T:System.Boolean"/> - True if the call is active</returns>
        </member>
        <member name="M:Rainbow.Model.Call.IsConnected">
            <summary>
            To know if the call is connected (i.e. IsInProgress() &amp;&amp; (!IsConnecting()) &amp;&amp; (!IsRinging()) )
            </summary>
            <returns><see cref="T:System.Boolean"/> - True if the call is in progress after connection and ringing state</returns>
        </member>
        <member name="M:Rainbow.Model.Call.IsInProgress">
            <summary>
            To know if the call is in progress (i.e. not in status UNKNOWN or ERROR)
            </summary>
            <returns><see cref="T:System.Boolean"/> - True if the call is in progress</returns>
        </member>
        <member name="M:Rainbow.Model.Call.IsConnecting">
            <summary>
            To know if the call is connecting (i.e. in status DIALING or CONNECTING)
            </summary>
            <returns><see cref="T:System.Boolean"/> - True if the call is in progress</returns>
        </member>
        <member name="M:Rainbow.Model.Call.IsRinging">
            <summary>
            To know if the call is ringing (i.e. in status RINGING_INCOMING or RINGING_OUTGOING)
            </summary>
            <returns><see cref="T:System.Boolean"/> - True if the call is ringing</returns>
        </member>
        <member name="M:Rainbow.Model.Call.IsQueued">
            <summary>
            To know if the call is queued (i.e. in status QUEUED_INCOMING or QUEUED_OUTGOING)
            </summary>
            <returns><see cref="T:System.Boolean"/> - True if the call is queued</returns>
        </member>
        <member name="M:Rainbow.Model.Call.WebRtcCall(System.Boolean,System.String)">
            <summary>
            Create a Call taggued as WebRTC
            </summary>
            <param name="isConference"><see cref="T:System.Boolean"/>To indicate if it's WebRTC Conference Call or not (i.e. P2P)</param>
            <param name="id"><see cref="T:System.String"/>(Optional)ID of the WebRTC Call</param>
            <returns><see cref="T:Rainbow.Model.Call"/> - Call object</returns>
        </member>
        <member name="M:Rainbow.Model.Call.PbxCall(System.String)">
            <summary>
            Create a Call with default values describing a PBX Call
            </summary>
            <param name="id"><see cref="T:System.String"/>ID of the PBX Call</param>
            <returns><see cref="T:Rainbow.Model.Call"/> - Call object</returns>
        </member>
        <member name="M:Rainbow.Model.Call.FromCall(Rainbow.Model.Call)">
            <summary>
            Create a copy of the specified Call object
            </summary>
            <param name="call"><see cref="T:Rainbow.Model.Call"/>Call object to copy</param>
            <returns><see cref="T:Rainbow.Model.Call"/> - A copy of the call object specified</returns>
        </member>
        <member name="T:Rainbow.Model.CallParticipant">
            <summary>
            Define a participant in a call
            </summary>
        </member>
        <member name="P:Rainbow.Model.CallParticipant.UserId">
            <summary>
            <see cref="T:System.String"/> - Rainbow User Id of the particpant - can be null or empty for external or unknown user
            </summary>
        </member>
        <member name="P:Rainbow.Model.CallParticipant.UserJid">
            <summary>
            <see cref="T:System.String"/> - Rainbow User Jid of the particpant - can be null or empty for external or unknown user
            </summary>
        </member>
        <member name="P:Rainbow.Model.CallParticipant.FirstName">
            <summary>
            <see cref="T:System.String"/> - First name of the particpant - can be null or empty for external or unknown user
            </summary>
        </member>
        <member name="P:Rainbow.Model.CallParticipant.LastName">
            <summary>
            <see cref="T:System.String"/> - Last name of the particpant - can be null or empty for external or unknown user
            </summary>
        </member>
        <member name="P:Rainbow.Model.CallParticipant.DisplayName">
            <summary>
            <see cref="T:System.String"/> - Display name of the particpant - can be null or empty for external or unknown user
            </summary>
        </member>
        <member name="P:Rainbow.Model.CallParticipant.PhoneNumber">
            <summary>
            <see cref="T:System.String"/> - Phone number - can be null or empty in WebRTC context
            </summary>
        </member>
        <member name="M:Rainbow.Model.CallParticipant.ToString">
            <summary>
            Serialize this object to string
            </summary>
            <returns><see cref="T:System.String"/> as serialization result</returns>
        </member>
        <member name="M:Rainbow.Model.CallParticipant.FromContact(Rainbow.Model.Contact,System.Nullable{System.Boolean},System.String)">
            <summary>
            Create CallParticipant from Contact
            </summary>
            <param name="contact"><see cref="T:Rainbow.Model.Contact"/></param>
            <param name="firstNameFirst"><see cref="T:Rainbow.Model.Contact"/>(can be null)</param>
            <param name="phoneNumber"><see cref="T:System.String"/>(can be null)</param>
            <returns></returns>
        </member>
        <member name="T:Rainbow.Model.CallForwardStatus">
            <summary>
            Define the current call foward status of the user phone
            </summary>
        </member>
        <member name="P:Rainbow.Model.CallForwardStatus.Available">
            <summary>
            <see cref="T:System.Boolean"/> - True if the call forward feature is available
            </summary>
        </member>
        <member name="P:Rainbow.Model.CallForwardStatus.Activated">
            <summary>
            <see cref="T:System.Boolean"/> - True if the call forward is activated - On voice mail OR on a phone number
            </summary>
        </member>
        <member name="P:Rainbow.Model.CallForwardStatus.VoiceMail">
            <summary>
            <see cref="T:System.Boolean"/> - True if the call foward is set on the voice mail
            </summary>
        </member>
        <member name="P:Rainbow.Model.CallForwardStatus.PhoneNumber">
            <summary>
            <see cref="T:System.String"/> - Not null/empty if call forward is set on a phone number
            </summary>
        </member>
        <member name="M:Rainbow.Model.CallForwardStatus.ToString">
            <summary>
            Serialize this object to String
            </summary>
            <returns><see cref="T:System.String"/> as serialization result</returns>
        </member>
        <member name="M:Rainbow.Model.CallForwardStatus.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Rainbow.Model.CallForwardStatus.Clear">
            <summary>
            Set object to default values
            </summary>
        </member>
        <member name="T:Rainbow.Model.CallLog">
            <summary>
            To define a call log
            </summary>
        </member>
        <member name="T:Rainbow.Model.CallLog.LogState">
            <summary>
            <see cref="T:System.Enum"/> - To define the state of the call log
            </summary>
        </member>
        <member name="F:Rainbow.Model.CallLog.LogState.MISSED">
            <summary>
            Missed call
            </summary>
        </member>
        <member name="F:Rainbow.Model.CallLog.LogState.ANSWERED">
            <summary>
            Answered call
            </summary>
        </member>
        <member name="F:Rainbow.Model.CallLog.LogState.FAILED">
            <summary>
            Failed call
            </summary>
        </member>
        <member name="T:Rainbow.Model.CallLog.LogOrder">
            <summary>
            <see cref="T:System.Enum"/> - Use to know how call log must be ordered
            </summary>
        </member>
        <member name="F:Rainbow.Model.CallLog.LogOrder.BY_DATE">
            <summary>
            Ordered by date
            </summary>
        </member>
        <member name="F:Rainbow.Model.CallLog.LogOrder.BY_CONTACT_THEN_BY_DATE">
            <summary>
            Ordered by contact first then by date
            </summary>
        </member>
        <member name="P:Rainbow.Model.CallLog.Id">
            <summary>
             <see cref="T:System.String"/> - Id of the call log item
            </summary>
        </member>
        <member name="P:Rainbow.Model.CallLog.CallId">
            <summary>
             <see cref="T:System.String"/> - Id of the call
            </summary>
        </member>
        <member name="P:Rainbow.Model.CallLog.Type">
            <summary>
            <see cref="T:Rainbow.Model.Call.Type"/> - Type of the call
            </summary>
        </member>
        <member name="P:Rainbow.Model.CallLog.State">
            <summary>
            <see cref="T:Rainbow.Model.CallLog.LogState"/> - State of the call
            </summary>
        </member>
        <member name="P:Rainbow.Model.CallLog.Contact">
            <summary>
            <see cref="T:System.String"/> - Jid of the contact involved in this call if RB user or a phone number
            </summary>
        </member>
        <member name="P:Rainbow.Model.CallLog.Outgoing">
            <summary>
            <see cref="T:System.Boolean"/> - True if it's a outgoing call - False it's a incoming call
            </summary>
        </member>
        <member name="P:Rainbow.Model.CallLog.Duration">
            <summary>
            <see cref="T:System.Int32"/> - Duration of the call
            </summary>
        </member>
        <member name="P:Rainbow.Model.CallLog.Read">
            <summary>
            <see cref="T:System.Boolean"/> - True is call og is marked as Read
            </summary>
        </member>
        <member name="P:Rainbow.Model.CallLog.TimeStamp">
            <summary>
            <see cref="T:System.DateTime"/> - The time at which the call was originally started.
            </summary>
        </member>
        <member name="T:Rainbow.Model.Channel">
            <summary>
            This class represents a Channel.
            
            **NOTE**: 
            
            - MaxItems and MaxPayloadSize properties can only been retrieved using **Channels.GetChannel** method
            - MaxItems can not be greater than 100
            - MaxPayloadSize can not be greater than 60000 bytes
            </summary>
        </member>
        <member name="T:Rainbow.Model.Channel.Appreciation">
            <summary>
            To store all Type of Appreciations to set on a item
            </summary>
        </member>
        <member name="F:Rainbow.Model.Channel.Appreciation.Applause">
            <summary>
            <see cref="T:System.String"/> - Applause
            </summary>
        </member>
        <member name="F:Rainbow.Model.Channel.Appreciation.Doubt">
            <summary>
            <see cref="T:System.String"/> - Doubt
            </summary>
        </member>
        <member name="F:Rainbow.Model.Channel.Appreciation.Fantastic">
            <summary>
            <see cref="T:System.String"/> - Fantastic
            </summary>
        </member>
        <member name="F:Rainbow.Model.Channel.Appreciation.Happy">
            <summary>
            <see cref="T:System.String"/> - Happy
            </summary>
        </member>
        <member name="F:Rainbow.Model.Channel.Appreciation.Like">
            <summary>
            <see cref="T:System.String"/> - Like
            </summary>
        </member>
        <member name="F:Rainbow.Model.Channel.Appreciation.None">
            <summary>
            <see cref="T:System.String"/> - None (no appreciation)
            </summary>
        </member>
        <member name="T:Rainbow.Model.Channel.UserAppreciation">
            <summary>
            To know the user who gives an appreciation and which one
            </summary>
        </member>
        <member name="P:Rainbow.Model.Channel.UserAppreciation.Appreciation">
            <summary>
            <see cref="T:System.String"/> - Appreciation given  - list of possible values in <see cref="T:Rainbow.Model.Channel.Appreciation"/> object
            </summary>
        </member>
        <member name="P:Rainbow.Model.Channel.UserAppreciation.UserId">
            <summary>
            <see cref="T:System.String"/> - Id of the user who gives this appreciation
            </summary>
        </member>
        <member name="T:Rainbow.Model.Channel.Appreciations">
            <summary>
            Number of  appreciations for an item - list of possible values in <see cref="T:Rainbow.Model.Channel.Appreciation"/> object
            </summary>
        </member>
        <member name="P:Rainbow.Model.Channel.Appreciations.Applause">
            <summary>
            <see cref="T:System.Int32"/> - Number of "Applause" appreciation
            </summary>
        </member>
        <member name="P:Rainbow.Model.Channel.Appreciations.Doubt">
            <summary>
            <see cref="T:System.Int32"/> - Number of "Doubt" appreciation
            </summary>
        </member>
        <member name="P:Rainbow.Model.Channel.Appreciations.Fantastic">
            <summary>
            <see cref="T:System.Int32"/> - Number of "Fantastic" appreciation
            </summary>
        </member>
        <member name="P:Rainbow.Model.Channel.Appreciations.Happy">
            <summary>
            <see cref="T:System.Int32"/> - Number of "Happy" appreciation
            </summary>
        </member>
        <member name="P:Rainbow.Model.Channel.Appreciations.Like">
            <summary>
            <see cref="T:System.Int32"/> - Number of "Like" appreciation
            </summary>
        </member>
        <member name="M:Rainbow.Model.Channel.Appreciations.ToString">
            <summary>
            Serialize this object to string
            </summary>
            <returns><see cref="T:System.String"/> as serialization result</returns>
        </member>
        <member name="T:Rainbow.Model.Channel.ChannelMode">
            <summary>
            List Channel's modes supported
            </summary>
        </member>
        <member name="F:Rainbow.Model.Channel.ChannelMode.COMPANY_PUBLIC">
            <summary>
            <see cref="T:System.String"/> - Users are free to subscribe to a public channel. Public channels can be found when searching for channels. The visibility of a channel is limited to my company.
            </summary>
        </member>
        <member name="F:Rainbow.Model.Channel.ChannelMode.COMPANY_PRIVATE">
            <summary>
            <see cref="T:System.String"/> -  Private channels can't be found when searching for channels. Consequently, users can't subscribe on their own to private channel but they can unsubscribe to it.
            </summary>
        </member>
        <member name="F:Rainbow.Model.Channel.ChannelMode.COMPANY_CLOSED">
            <summary>
            <see cref="T:System.String"/> -  Only Owner can add or remove users in a closed channels. Closed channels can't be found when searching for channels. Consequently, users can't subscribe on their own to closed channel. 
            </summary>
        </member>
        <member name="T:Rainbow.Model.Channel.MemberType">
            <summary>
            List member's roles supported
            </summary>
        </member>
        <member name="F:Rainbow.Model.Channel.MemberType.OWNER">
            <summary>
            <see cref="T:System.String"/> - Owner of the channel
            </summary>
        </member>
        <member name="F:Rainbow.Model.Channel.MemberType.PUBLISHER">
            <summary>
            <see cref="T:System.String"/> - Publisher of the channel (can add item in the channel)
            </summary>
        </member>
        <member name="F:Rainbow.Model.Channel.MemberType.MEMBER">
            <summary>
            <see cref="T:System.String"/> - Member of the channel (can on ly read item for the channel)
            </summary>
        </member>
        <member name="F:Rainbow.Model.Channel.MemberType.NONE">
            <summary>
            <see cref="T:System.String"/> - No more member of this channel
            </summary>
        </member>
        <member name="T:Rainbow.Model.Channel.Member">
            <summary>
            Define a member in a channel
            </summary>
        </member>
        <member name="P:Rainbow.Model.Channel.Member.Id">
            <summary>
            <see cref="T:System.String"/> - Id of the contact
            </summary>
        </member>
        <member name="P:Rainbow.Model.Channel.Member.Type">
            <summary>
            <see cref="T:System.String"/> - Role/Type of this contact (see <see cref="T:Rainbow.Model.Channel.MemberType"/> for all possible values)
            </summary>
        </member>
        <member name="P:Rainbow.Model.Channel.Member.Invited">
            <summary>
            <see cref="T:System.Boolean"/> - To know if the user has been already invited or not. If True, it means the user has still not accepted the invitation.
            </summary>
        </member>
        <member name="P:Rainbow.Model.Channel.Member.Subscribed">
            <summary>
            <see cref="T:System.Boolean"/> - To know if member has subscribed to the channel
            </summary>²
        </member>
        <member name="M:Rainbow.Model.Channel.Member.ToString">
            <summary>
            Serialize this object to string
            </summary>
            <returns><see cref="T:System.String"/> as serialization result</returns>
        </member>
        <member name="P:Rainbow.Model.Channel.Id">
            <summary>
            <see cref="T:System.String"/> - Id of the Channel
            </summary>
        </member>
        <member name="P:Rainbow.Model.Channel.Name">
            <summary>
            <see cref="T:System.String"/> - Name of the Channel
            </summary>
        </member>
        <member name="P:Rainbow.Model.Channel.Topic">
            <summary>
            <see cref="T:System.String"/> - Topic of the Channel
            </summary>
        </member>
        <member name="P:Rainbow.Model.Channel.Category">
            <summary>
            <see cref="T:System.String"/> - Category of the Channel. It's allow to set any string as category but by default some are already available: global, design, innovation, social, science, culture, business, hitech, marketing and travel
            </summary>
        </member>
        <member name="P:Rainbow.Model.Channel.CompanyId">
            <summary>
            <see cref="T:System.String"/> - The channel creator rainbow company id
            </summary>
        </member>
        <member name="P:Rainbow.Model.Channel.CreatorId">
            <summary>
            <see cref="T:System.String"/> - The channel creator rainbow user id
            </summary>
        </member>
        <member name="P:Rainbow.Model.Channel.CreationDate">
            <summary>
            <see cref="T:System.DateTime"/> - The channel creation date
            </summary>
        </member>
        <member name="P:Rainbow.Model.Channel.LastAvatarUpdateDate">
            <summary>
            <see cref="T:System.DateTime"/> - Date of the last avatar update
            </summary>
        </member>
        <member name="P:Rainbow.Model.Channel.SubscribersCount">
            <summary>
            <see cref="T:System.String"/> - Number of channel subscribers
            </summary>
        </member>
        <member name="P:Rainbow.Model.Channel.UsersCount">
            <summary>
            <see cref="T:System.String"/> - Number of channel users
            </summary>
        </member>
        <member name="P:Rainbow.Model.Channel.Mode">
            <summary>
            <see cref="T:System.String"/> - The channel policy/behavior - See <see cref="T:Rainbow.Model.Channel.ChannelMode"/> for Allowed values.
            </summary>
        </member>
        <member name="P:Rainbow.Model.Channel.Subscribed">
            <summary>
            <see cref="T:System.Boolean"/> - The channel subscription state of the requesting user
            </summary>
        </member>
        <member name="P:Rainbow.Model.Channel.Invited">
            <summary>
            <see cref="T:System.Boolean"/> - The channel invitation state of the requesting user
            </summary>
        </member>
        <member name="P:Rainbow.Model.Channel.Mute">
            <summary>
            <see cref="T:System.Boolean"/> - The channel mute state
            </summary>
        </member>
        <member name="P:Rainbow.Model.Channel.MaxItems">
            <summary>
            <see cref="T:System.Int32"/> - The maximum number of items in this channel (info available only when using **GetChannel**) (Max value: 100)
            </summary>
        </member>
        <member name="P:Rainbow.Model.Channel.MaxPayloadSize">
            <summary>
            <see cref="T:System.Double"/> - The maximum payload size in bytes (info available only when using **GetChannel**) (Max value: 60000 bytes)
            </summary>
        </member>
        <member name="P:Rainbow.Model.Channel.Members">
            <summary>
            List of <see cref="T:Rainbow.Model.Channel.Member"/> objects
            </summary>
        </member>
        <member name="M:Rainbow.Model.Channel.ToString">
            <summary>
            Serialize this object to string
            </summary>
            <returns><see cref="T:System.String"/> as serialization result</returns>
        </member>
        <member name="T:Rainbow.Model.SearchChannelsResult">
            <summary>
            Object used as result when searching channels
            </summary>
        </member>
        <member name="P:Rainbow.Model.SearchChannelsResult.Data">
            <summary>
            <see cref="T:System.Collections.Generic.List`1"/> List found
            </summary>
        </member>
        <member name="P:Rainbow.Model.SearchChannelsResult.Total">
            <summary>
            <see cref="T:System.Int32"/>Total or results possible
            </summary>
        </member>
        <member name="P:Rainbow.Model.SearchChannelsResult.Limit">
            <summary>
            <see cref="T:System.Int32"/>Limit used in search
            </summary>
        </member>
        <member name="P:Rainbow.Model.SearchChannelsResult.Offset">
            <summary>
            <see cref="T:System.Int32"/>Offset used in search
            </summary>
        </member>
        <member name="T:Rainbow.Model.ChannelItem">
            <summary>
            This class represents an item published in a Channel
            </summary>
        </member>
        <member name="T:Rainbow.Model.ChannelItem.ItemType">
            <summary>
            Enumeration to list all different types of items
            </summary>
        </member>
        <member name="F:Rainbow.Model.ChannelItem.ItemType.BASIC">
            <summary>
            Basic Item: the messge of this item is a basic text (no MARKDOWN or HTML code used)
            </summary>
        </member>
        <member name="F:Rainbow.Model.ChannelItem.ItemType.MARKDOWN">
            <summary>
            Markdown Item: the message of this item use MARDOWN grammar
            </summary>
        </member>
        <member name="F:Rainbow.Model.ChannelItem.ItemType.HTML">
            <summary>
            Html Item: the message of this item use HTML grammar
            </summary>
        </member>
        <member name="F:Rainbow.Model.ChannelItem.ItemType.DATA">
            <summary>
            Data Item: the message of this item is unknoww - this type of item IS NOT USED by standard RB application. It can be used for specific SDK purpose to exchange specific data
            </summary>
        </member>
        <member name="P:Rainbow.Model.ChannelItem.Id">
            <summary>
            <see cref="T:System.String"/> - Id of the item
            </summary>
        </member>
        <member name="P:Rainbow.Model.ChannelItem.From">
            <summary>
            <see cref="T:System.String"/> - Jid of the contact which has created this item
            </summary>
        </member>
        <member name="P:Rainbow.Model.ChannelItem.Timestamp">
            <summary>
            <see cref="T:System.DateTime"/> - Last update date of the item
            </summary>
        </member>
        <member name="P:Rainbow.Model.ChannelItem.Creation">
            <summary>
            <see cref="T:System.DateTime"/> - Creation date of the item 
            </summary>
        </member>
        <member name="P:Rainbow.Model.ChannelItem.Type">
            <summary>
            <see cref="T:Rainbow.Model.ChannelItem.ItemType"/> - Type of the item (basic, markdown, html or data)
            </summary>
        </member>
        <member name="P:Rainbow.Model.ChannelItem.Title">
            <summary>
            <see cref="T:System.String"/> - Title of the item (if any)
            </summary>
        </member>
        <member name="P:Rainbow.Model.ChannelItem.Message">
            <summary>
            <see cref="T:System.String"/> - Messages of the item (if any)
            </summary>
        </member>
        <member name="P:Rainbow.Model.ChannelItem.Url">
            <summary>
            <see cref="T:System.String"/> - Url associated to this item (if any)
            </summary>
        </member>
        <member name="P:Rainbow.Model.ChannelItem.Images">
            <summary>
            <see cref="T:List{String}"/> - List of image file (if any) associated to this item. File Descriptor ID are used to get access to these files (cf. <see cref="T:Rainbow.FileStorage"/> object to get them)
            </summary>
        </member>
        <member name="P:Rainbow.Model.ChannelItem.Attachments">
            <summary>
            <see cref="T:List{String}"/> - List of file attachement (if any) associated to this item. File Descriptor ID are used to get access to these files (cf. <see cref="T:Rainbow.FileStorage"/> object to get them)
            </summary>
        </member>
        <member name="F:Rainbow.Model.ChannelItem.Appreciations">
            <summary>
            Number of applause, doubt, fantastic, happy and like appreciations for this item
            </summary>
        </member>
        <member name="F:Rainbow.Model.ChannelItem.MyAppreciation">
            <summary>
            The appreacitation set by the current use . Possible values are listed in <see cref="T:Rainbow.Model.Channel.Appreciation" /> object.
            </summary>
        </member>
        <member name="M:Rainbow.Model.ChannelItem.ToString">
            <summary>
            Serialize this object to string
            </summary>
            <returns><see cref="T:System.String"/> as serialization result</returns>
        </member>
        <member name="T:Rainbow.Model.CompaniesResult">
            <summary>
            To store Companies result
            </summary>
        </member>
        <member name="P:Rainbow.Model.CompaniesResult.Data">
            <summary>
            Store list of companies
            </summary>
        </member>
        <member name="P:Rainbow.Model.CompaniesResult.Total">
            <summary>
            To know the total number of contacts available
            </summary>
        </member>
        <member name="P:Rainbow.Model.CompaniesResult.Limit">
            <summary>
            The limit used to get this result
            </summary>
        </member>
        <member name="P:Rainbow.Model.CompaniesResult.Offset">
            <summary>
            The offset used to get this result
            </summary>
        </member>
        <member name="T:Rainbow.Model.JoinCompanyLinksResult">
            <summary>
            To store Companies result
            </summary>
        </member>
        <member name="P:Rainbow.Model.JoinCompanyLinksResult.Data">
            <summary>
            Store list of JoinCompanyLink objects
            </summary>
        </member>
        <member name="P:Rainbow.Model.JoinCompanyLinksResult.Total">
            <summary>
            To know the total number of JoinCompanyLink objects available
            </summary>
        </member>
        <member name="P:Rainbow.Model.JoinCompanyLinksResult.Limit">
            <summary>
            The limit used to get this result
            </summary>
        </member>
        <member name="P:Rainbow.Model.JoinCompanyLinksResult.Offset">
            <summary>
            The offset used to get this result
            </summary>
        </member>
        <member name="T:Rainbow.Model.JoinCompanyLink">
            <summary>
            JoinCompanyLink object
            </summary>
        </member>
        <member name="P:Rainbow.Model.JoinCompanyLink.Id">
            <summary>
            <see cref="T:System.String"/> - Link ID
            </summary>
        </member>
        <member name="P:Rainbow.Model.JoinCompanyLink.CompanyId">
            <summary>
            <see cref="T:System.String"/> - Company Id
            </summary>
        </member>
        <member name="P:Rainbow.Model.JoinCompanyLink.CreatedByAdminId">
            <summary>
            <see cref="T:System.String"/> - Unique Id of the admin who created the join company link
            </summary>
        </member>
        <member name="P:Rainbow.Model.JoinCompanyLink.IsEnabled">
            <summary>
            <see cref="T:System.Boolean"/> - Is Enabled
            </summary>
        </member>
        <member name="P:Rainbow.Model.JoinCompanyLink.NbUsersRegistered">
            <summary>
            <see cref="T:System.Int32"/> - Number of users that used this join company link to register in the company.
            </summary>
        </member>
        <member name="P:Rainbow.Model.JoinCompanyLink.CreationDate">
            <summary>
            <see cref="T:System.String"/> - Creation date of the join company link
            </summary>
        </member>
        <member name="P:Rainbow.Model.JoinCompanyLink.ExpirationDate">
            <summary>
            <see cref="T:System.String"/> - Date of expiration of the Join company link  (optional)
            </summary>
        </member>
        <member name="P:Rainbow.Model.JoinCompanyLink.Description">
            <summary>
            <see cref="T:System.String"/> - Description (optional)
            </summary>
        </member>
        <member name="P:Rainbow.Model.JoinCompanyLink.MaxNumberUsers">
            <summary>
            <see cref="T:System.Int32"/> - Max Number Of Users (optional) - Maximum number of users allowed to register in the company using this join company link.
            </summary>
        </member>
        <member name="M:Rainbow.Model.JoinCompanyLink.ToString">
            <summary>
            Serialize this object to String
            </summary>
            <returns><see cref="T:System.String"/> as serialization result</returns>
        </member>
        <member name="T:Rainbow.Model.Company">
            <summary>
            Company object
            </summary>
        </member>
        <member name="P:Rainbow.Model.Company.Id">
            <summary>
            <see cref="T:System.String"/> - Company ID
            </summary>
        </member>
        <member name="P:Rainbow.Model.Company.NumberUsers">
            <summary>
            <see cref="T:System.String"/> - Number of Rainbow users being associated to the company
            </summary>
        </member>
        <member name="P:Rainbow.Model.Company.CreationDate">
            <summary>
            <see cref="T:System.DateTime"/> - Company creation date
            </summary>
        </member>
        <member name="P:Rainbow.Model.Company.Name">
            <summary>
            <see cref="T:System.String"/> - Company name
            </summary>
        </member>
        <member name="P:Rainbow.Model.Company.Location">
            <summary>
            <see cref="T:System.String"/> - Company Location of the zone where the company data are stored. Should usually be the country name (English) where the zone is located.
            </summary>
        </member>
        <member name="P:Rainbow.Model.Company.Country">
            <summary>
            <see cref="T:System.String"/> - Country (ISO 3166-1 alpha3 format) of the zone where the company data are stored
            </summary>
        </member>
        <member name="P:Rainbow.Model.Company.Street">
            <summary>
            <see cref="T:System.String"/> - Country street 
            </summary>
        </member>
        <member name="P:Rainbow.Model.Company.City">
            <summary>
            <see cref="T:System.String"/> - Country city  
            </summary>
        </member>
        <member name="P:Rainbow.Model.Company.State">
            <summary>
            <see cref="T:System.String"/> - Stae. When country is 'USA' or 'CAN', a state must be defined. Else it is not managed.  
            </summary>
        </member>
        <member name="P:Rainbow.Model.Company.PostalCode">
            <summary>
            <see cref="T:System.String"/> - Postal code 
            </summary>
        </member>
        <member name="P:Rainbow.Model.Company.Currency">
            <summary>
            <see cref="T:System.String"/> - Currency - Company currency, for payment of premium offers (ISO 4217 format). For now, only USD, EUR and CNY are supported
            </summary>
        </member>
        <member name="P:Rainbow.Model.Company.Status">
            <summary>
            <see cref="T:System.String"/> - Status - Allowed values: initializing, active, alerting, hold, terminated
            </summary>
        </member>
        <member name="P:Rainbow.Model.Company.AdminEmail">
            <summary>
            <see cref="T:System.String"/> - Company contact person email
            </summary>
        </member>
        <member name="P:Rainbow.Model.Company.SupportEmail">
            <summary>
            <see cref="T:System.String"/> - Company support email
            </summary>
        </member>
        <member name="P:Rainbow.Model.Company.CompanyContactId">
            <summary>
            <see cref="T:System.String"/> - User Id of a Rainbow user which is the contact for this company
            </summary>
        </member>
        <member name="P:Rainbow.Model.Company.UserSelfRegisterEnabled">
            <summary>
            <see cref="T:System.Boolean"/> - Allow users with email domain matching 'UserSelfRegisterAllowedDomains' to join the company by self-register process
            </summary>
        </member>
        <member name="P:Rainbow.Model.Company.UserSelfRegisterAllowedDomains">
            <summary>
            <see cref="T:System.Collections.Generic.List`1"/> - Allow users with email domain matching one of the values of this array to join the company by self-register process (if UserSelfRegisterEnabled is true)
            </summary>
        </member>
        <member name="P:Rainbow.Model.Company.Slogan">
            <summary>
            <see cref="T:System.String"/> - A free string corresponding to the slogan of the company (255 char length)
            </summary>
        </member>
        <member name="P:Rainbow.Model.Company.Description">
            <summary>
            <see cref="T:System.String"/> - A free string that describes the company (2000 char length)
            </summary>
        </member>
        <member name="P:Rainbow.Model.Company.Size">
             <summary>
             <see cref="T:System.String"/> - An overview of the number of employees
            
             Allowed values: "self-employed", "1-10 employees", "11-50 employees", "51-200 employees", "201-500 employees", "501-1000 employees", "1001-5000 employees", "5001-10,000 employees", "10,001+ employees" 
             </summary>
        </member>
        <member name="P:Rainbow.Model.Company.GiphyEnabled">
            <summary>
            <see cref="T:System.Boolean"/> - Whether or not giphy feature is enabled for users belonging to this company (possibility to use animated gifs in conversations)
            </summary>
        </member>
        <member name="P:Rainbow.Model.Company.Website">
            <summary>
            <see cref="T:System.String"/> - Company website URL
            </summary>
        </member>
        <member name="P:Rainbow.Model.Company.OrganisationId">
            <summary>
            <see cref="T:System.String"/> - Optional identifier to indicate the company belongs to an organisation
            </summary>
        </member>
        <member name="P:Rainbow.Model.Company.CatalogId">
            <summary>
            <see cref="T:System.String"/> - Id of the catalog of Rainbow offers to which the company is linked. The catalog corresponds to the list of offers the company can subscribe.
            </summary>
        </member>
        <member name="P:Rainbow.Model.Company.BpId">
            <summary>
            <see cref="T:System.String"/> - Optional identifier which links the company to the corresponding Business partner company
            </summary>
        </member>
        <member name="P:Rainbow.Model.Company.IsBP">
            <summary>
            <see cref="T:System.Boolean"/> - Indicates if the company is a Business partner company
            </summary>
        </member>
        <member name="P:Rainbow.Model.Company.OfferType">
            <summary>
            <see cref="T:System.String"/> - Allowed company offer types. Allowed values: freemium, premium
            </summary>
        </member>
        <member name="P:Rainbow.Model.Company.Visibility">
            <summary>
            <see cref="T:System.String"/> - Company visibility (define if users being in this company can be searched by users being in other companies and if the user can search users being in other companies).
            
            Allowed values: public, private, organisation, closed, isolated
            </summary>
        </member>
        <member name="P:Rainbow.Model.Company.AllowUsersSelectTheme">
            <summary>
            <see cref="T:System.Boolean"/> - Allow users of this company to select a theme among the ones available (owned or visible by the company).
            </summary>
        </member>
        <member name="P:Rainbow.Model.Company.AllowUsersSelectPublicTheme">
            <summary>
            <see cref="T:System.Boolean"/> - Allow users of this company to select a public theme.
            </summary>
        </member>
        <member name="P:Rainbow.Model.Company.SelectedTheme">
            <summary>
            <see cref="T:System.String"/> - Set the selected theme for users of the company.
            </summary>
        </member>
        <member name="P:Rainbow.Model.Company.FileSharingCustomisation">
            <summary>
            <see cref="T:System.String"/> - Activate/Deactivate file sharing capability for users per company. Allowed values: enabled, disabled
            </summary>
        </member>
        <member name="P:Rainbow.Model.Company.UserTitleNameCustomisation">
            <summary>
            <see cref="T:System.String"/> - Activate/Deactivate the capability for users to modify his profile (title, firstName, lastName) per company. Allowed values: enabled, disabled 
            </summary>
        </member>
        <member name="P:Rainbow.Model.Company.TryNewUiCustomisation">
            <summary>
            <see cref="T:System.String"/> - Activate/Deactivate the capability for users to try the new User Interface per company. Allowed values: enabled, disabled 
            </summary>
        </member>
        <member name="P:Rainbow.Model.Company.SoftphoneOnlyCustomisation">
            <summary>
            <see cref="T:System.String"/> - Activate/Deactivate the capability for an UCaas application not to offer all Rainbow services but to focus to telephony services. Allowed values: enabled, disabled 
            </summary>
        </member>
        <member name="P:Rainbow.Model.Company.UseRoomCustomisation">
            <summary>
            <see cref="T:System.String"/> - Activate/Deactivate the capability for user to use bubbles by company. Allowed values: enabled, disabled 
            </summary>
        </member>
        <member name="P:Rainbow.Model.Company.PhoneMeetingCustomisation">
            <summary>
            <see cref="T:System.String"/> - Activate/Deactivate the capability for users to use phone meetings (PSTN conference) by company. Allowed values: enabled, disabled 
            </summary>
        </member>
        <member name="P:Rainbow.Model.Company.UseChannelCustomisation">
            <summary>
            <see cref="T:System.String"/> - Activate/Deactivate the capability for users to use a channel by company. Allowed values: enabled, disabled 
            </summary>
        </member>
        <member name="P:Rainbow.Model.Company.UseWebRTCVideoCustomisation">
            <summary>
            <see cref="T:System.String"/> - Activate/Deactivate the capability for users to switch to a Web RTC video conversation by company. Allowed values: enabled, disabled 
            </summary>
        </member>
        <member name="P:Rainbow.Model.Company.UseWebRTCAudioCustomisation">
            <summary>
            <see cref="T:System.String"/> - Activate/Deactivate the capability for users to switch to a Web RTC audio conversation by company. Allowed values: enabled, disabled 
            </summary>
        </member>
        <member name="P:Rainbow.Model.Company.CustomData">
            <summary>
            <see cref="T:System.Collections.Generic.Dictionary`2"/> - Custom data. Key/value format - Max 10 keys allowed, Max key length 64, Max key value length 512
            </summary>
        </member>
        <member name="T:Rainbow.Model.ConferenceSharingTranfertStatus">
            <summary>
            Define all status possible for Sharing Transfer
            </summary>
        </member>
        <member name="F:Rainbow.Model.ConferenceSharingTranfertStatus.REQUEST">
            <summary>
            To request a sharing transfert: if current user wants to start sharing but a peer has already started one.
            </summary>
        </member>
        <member name="F:Rainbow.Model.ConferenceSharingTranfertStatus.REFUSE">
            <summary>
            To refuse a sharing transfert: a peer wants to start sharing but current user has already started one. Current user wants to continue its sharing.
            </summary>
        </member>
        <member name="F:Rainbow.Model.ConferenceSharingTranfertStatus.ACCEPT">
            <summary>
            To accept a sharing transfert: a peer wants to start sharing but current user has already started one. Current user accepts to stop its sharing.
            </summary>
        </member>
        <member name="T:Rainbow.Model.Conference">
            <summary>
            To describe a Conference in progress in a Bubble
            </summary>
        </member>
        <member name="P:Rainbow.Model.Conference.Id">
            <summary>
            <see cref="T:System.String"/> - Id of the conference
            </summary>
        </member>
        <member name="P:Rainbow.Model.Conference.Active">
            <summary>
            <see cref="T:System.Boolean"/> - To know if the conference is active
            </summary>
        </member>
        <member name="P:Rainbow.Model.Conference.Muted">
            <summary>
            <see cref="T:System.Boolean"/> - To know if the conference is muted. Guest can not be heard if muted.
            </summary>
        </member>
        <member name="P:Rainbow.Model.Conference.Locked">
            <summary>
            <see cref="T:System.Boolean"/> - To know if the conference is locked. No new participant can join the conference if locked.
            </summary>
        </member>
        <member name="P:Rainbow.Model.Conference.RecordStatus">
            <summary>
            <see cref="T:System.Boolean"/> - To know if the conference is recorded - status possible are off/on/pause
            </summary>
        </member>
        <member name="P:Rainbow.Model.Conference.MediaType">
            <summary>
            <see cref="T:System.String"/> - Media type used in this conference. See <see cref="T:Rainbow.Model.Bubble.MediaType"/> for possible values.
            </summary>
        </member>
        <member name="M:Rainbow.Model.Conference.ToString">
            <summary>
            Serialize this object to String
            </summary>
            <returns><see cref="T:System.String"/> as serialization result</returns>
        </member>
        <member name="T:Rainbow.Model.Conference.SubStreamLevel">
            <summary>
            Define Sub stream Level
            </summary>
        </member>
        <member name="F:Rainbow.Model.Conference.SubStreamLevel.NONE">
            <summary>
            To not subscribe
            </summary>
        </member>
        <member name="F:Rainbow.Model.Conference.SubStreamLevel.LOW">
            <summary>
            Low level
            </summary>
        </member>
        <member name="F:Rainbow.Model.Conference.SubStreamLevel.MIDDLE">
            <summary>
            normal level
            </summary>
        </member>
        <member name="F:Rainbow.Model.Conference.SubStreamLevel.HIGH">
            <summary>
            high level
            </summary>
        </member>
        <member name="T:Rainbow.Model.Conference.Talker">
            <summary>
            Define a base class to describe a Talker. 
            
            The Id of the particpant is NOT AT ALL related to the Id of a <see cref="T:Rainbow.Model.Contact"/>
            
            The Jid_im of the participant can be compared to the Jid_im of a <see cref="T:Rainbow.Model.Contact"/>
            
            </summary>
        </member>
        <member name="P:Rainbow.Model.Conference.Talker.Id">
            <summary>
            <see cref="T:System.String"/> - Id of the participant. CANNNOT BE COMPARED to Id of a <see cref="T:Rainbow.Model.Contact"/>
            </summary>
        </member>
        <member name="P:Rainbow.Model.Conference.Talker.Jid_im">
            <summary>
            <see cref="T:System.String"/> - Jid of the participant. Can be compared to Jid_im of a <see cref="T:Rainbow.Model.Contact"/>
            </summary>
        </member>
        <member name="P:Rainbow.Model.Conference.Talker.PhoneNumber">
            <summary>
            <see cref="T:System.String"/> - Phone number of the participant use to join the conference (if any)
            </summary>
        </member>
        <member name="P:Rainbow.Model.Conference.Talker.TalkingTime">
            <summary>
            <see cref="T:System.DateTime"/> - Talking time in seconds
            </summary>
        </member>
        <member name="M:Rainbow.Model.Conference.Talker.ToString">
            <summary>
            Serialize this object to String
            </summary>
            <returns><see cref="T:System.String"/> as serialization result</returns>
        </member>
        <member name="T:Rainbow.Model.Conference.Participant">
            <summary>
            Define a base class to describe a Participant in a Conference.
            
            The Id of the particpant is related to the Id of a <see cref="T:Rainbow.Model.Contact"/>.
            
            The Jid_im of the participant can be compared to the Jid_im of a <see cref="T:Rainbow.Model.Contact"/>
            
            </summary>
        </member>
        <member name="P:Rainbow.Model.Conference.Participant.Id">
            <summary>
            <see cref="T:System.String"/> - Id of the participant. CANNNOT BE COMPARED to Id of a <see cref="T:Rainbow.Model.Contact"/>
            </summary>
        </member>
        <member name="P:Rainbow.Model.Conference.Participant.Jid_im">
            <summary>
            <see cref="T:System.String"/> - Jid of the participant. Can be compared to Jid_im of a <see cref="T:Rainbow.Model.Contact"/>
            </summary>
        </member>
        <member name="P:Rainbow.Model.Conference.Participant.Muted">
            <summary>
            <see cref="T:System.Boolean"/> - To know if the participant is muted
            </summary>
        </member>
        <member name="P:Rainbow.Model.Conference.Participant.Privilege">
            <summary>
            /// <see cref="T:Rainbow.Model.Bubble.MemberPrivilege"/> - Privilege of this member  - see <see cref="T:Rainbow.Model.Bubble.MemberPrivilege"/> for possible values
            </summary>
        </member>
        <member name="P:Rainbow.Model.Conference.Participant.PhoneNumber">
            <summary>
            <see cref="T:System.String"/> - Phone number of the participant to join the conference (if any)
            </summary>
        </member>
        <member name="P:Rainbow.Model.Conference.Participant.Hold">
            <summary>
            <see cref="T:System.Boolean"/> - To know if the participant is hold
            </summary>
        </member>
        <member name="M:Rainbow.Model.Conference.Participant.ToString">
            <summary>
            Serialize this object to String
            </summary>
            <returns><see cref="T:System.String"/> as serialization result</returns>
        </member>
        <member name="T:Rainbow.Model.Conference.ConferenceTalkingTime">
            <summary>
            Structure used when retrieving conference talking time info
            </summary>
        </member>
        <member name="P:Rainbow.Model.Conference.ConferenceTalkingTime.Active">
            <summary>
            To know if the conference is currently active or not
            </summary>
        </member>
        <member name="P:Rainbow.Model.Conference.ConferenceTalkingTime.Participants">
            <summary>
            To have list of participants and tlaking time info
            </summary>
        </member>
        <member name="P:Rainbow.Model.Conference.ConferenceTalkingTime.Total">
            <summary>
            Total number of items available
            </summary>
        </member>
        <member name="P:Rainbow.Model.Conference.ConferenceTalkingTime.Limit">
            <summary>
            Number of items asked
            </summary>
        </member>
        <member name="P:Rainbow.Model.Conference.ConferenceTalkingTime.Offset">
            <summary>
            Offset used
            </summary>
        </member>
        <member name="T:Rainbow.Model.Conference.TalkerParticipant">
            <summary>
            Define a base class to describe a Talker. Used in this method <see cref="M:Rainbow.Conferences.ConferenceTalkingTime(System.String,System.Int32,System.Int32,System.Action{Rainbow.SdkResult{Rainbow.Model.Conference.ConferenceTalkingTime}})"/>
            </summary>
        </member>
        <member name="P:Rainbow.Model.Conference.TalkerParticipant.UserId">
            <summary>
            <see cref="T:System.String"/> - Can be compared to an Id of a <see cref="T:Rainbow.Model.Contact"/>
            </summary>
        </member>
        <member name="P:Rainbow.Model.Conference.TalkerParticipant.PhoneNumber">
            <summary>
            <see cref="T:System.String"/> - PSTN Phone number of a particpant (if any)
            </summary>
        </member>
        <member name="P:Rainbow.Model.Conference.TalkerParticipant.TalkingTime">
            <summary>
            <see cref="T:System.DateTime"/> - Talking time in seconds
            </summary>
        </member>
        <member name="M:Rainbow.Model.Conference.TalkerParticipant.ToString">
            <summary>
            Serialize this object to String
            </summary>
            <returns><see cref="T:System.String"/> as serialization result</returns>
        </member>
        <member name="T:Rainbow.Model.ConferencePassCodes">
            <summary>
            To store pass codes of a meeting
            </summary>
        </member>
        <member name="P:Rainbow.Model.ConferencePassCodes.ModeratorPassCode">
            <summary>
            <see cref="T:System.String"/> - Pass code of the moderator - available if the end-user is the moderator
            </summary>
        </member>
        <member name="P:Rainbow.Model.ConferencePassCodes.ParticipantPassCode">
            <summary>
            <see cref="T:System.String"/> - Pass code of the particpant
            </summary>
        </member>
        <member name="M:Rainbow.Model.ConferencePassCodes.ToString">
            <summary>
            Serialize this object to String
            </summary>
            <returns><see cref="T:System.String"/> as serialization result</returns>
        </member>
        <member name="T:Rainbow.Model.ConferencePhoneNumber">
            <summary>
            Describe a phone number used to reach an audio Meeting
            </summary>
        </member>
        <member name="P:Rainbow.Model.ConferencePhoneNumber.Location">
            <summary>
            <see cref="T:System.String"/> - Name of the location (Country name and City name). The language of the end-user is used
            
            Example of result: France, Paris
            </summary>
        </member>
        <member name="P:Rainbow.Model.ConferencePhoneNumber.Locationcode">
            <summary>
            <see cref="T:System.String"/> - Country Alpha-3 code (ISO 3166 - cf. https://www.iban.com/country-codes)
            </summary>
        </member>
        <member name="P:Rainbow.Model.ConferencePhoneNumber.Number">
            <summary>
            <see cref="T:System.String"/> - The international phone number 
            </summary>
        </member>
        <member name="P:Rainbow.Model.ConferencePhoneNumber.NeedLanguageSelection">
            <summary>
            <see cref="T:System.Boolean"/> - true means non-English bridges.
            
            For English bridges: The mobile can dial : bridge number + accesscode #
            
            For non-English bridges: The mobile can dial : bridge number + 1# + code #
            
            The 1# may be replaced by 2# if the country of the called number is not the country of the user.
            
            '+' is 'pause',
            </summary>
        </member>
        <member name="P:Rainbow.Model.ConferencePhoneNumber.NumberType">
            <summary>
            <see cref="T:System.String"/> - Number free of charge or not, one of **local**, **lo-call**, **tollFree**, **other**
            </summary>
        </member>
        <member name="M:Rainbow.Model.ConferencePhoneNumber.ToString">
            <summary>
            Serialize this object to String
            </summary>
            <returns><see cref="T:System.String"/> as serialization result</returns>
        </member>
        <member name="T:Rainbow.Model.ConnectionState">
            <summary>
            To store all connection state possible
            </summary>
        </member>
        <member name="F:Rainbow.Model.ConnectionState.Disconnected">
            <summary>
            <see cref="T:System.String"/> - The contact is not connected
            </summary>
        </member>
        <member name="F:Rainbow.Model.ConnectionState.Connected">
            <summary>
            <see cref="T:System.String"/> - The contact is connected
            </summary>
        </member>
        <member name="F:Rainbow.Model.ConnectionState.Connecting">
            <summary>
            <see cref="T:System.String"/> - The contact is connecting
            </summary>
        </member>
        <member name="T:Rainbow.Model.ContactsResult">
            <summary>
            To store Contacts result
            </summary>
        </member>
        <member name="P:Rainbow.Model.ContactsResult.Data">
            <summary>
            Store list of contacts
            </summary>
        </member>
        <member name="P:Rainbow.Model.ContactsResult.Total">
            <summary>
            To know the total number of contacts available
            </summary>
        </member>
        <member name="P:Rainbow.Model.ContactsResult.Limit">
            <summary>
            The limit used to get this result
            </summary>
        </member>
        <member name="P:Rainbow.Model.ContactsResult.Offset">
            <summary>
            The offset used to get this result
            </summary>
        </member>
        <member name="T:Rainbow.Model.Contact">
            <summary>
            Contact object describing a contact in your roster, a contact found after a search or a contact as a member in a company
            </summary>
        </member>
        <member name="T:Rainbow.Model.Contact.Capability">
            <summary>
            To store all capabilitiesy for a user. For the moment, capabilities are known only for the current user.
            
            To know if acCapability is available use, from <see cref="T:Rainbow.Application"/> object, the method **isCapabilityAvailable()**
                
            In future release, others capabilities could be added.
            </summary>
        </member>
        <member name="F:Rainbow.Model.Contact.Capability.ReadReceipt">
            <summary>
            <see cref="T:System.String"/> - ReadReceipt: To know if the user can see Read Receipt (only set on company level)
            </summary>
        </member>
        <member name="F:Rainbow.Model.Contact.Capability.UseGif">
            <summary>
            <see cref="T:System.String"/> - UseGif: To know if the user can send GIF
            </summary>
        </member>
        <member name="F:Rainbow.Model.Contact.Capability.FileStorage">
            <summary>
            <see cref="T:System.String"/> - FileStorage: To know if the user can use the File Storage. File download is always possible event if this capability is set to FALSE
            
            If it's set to FALSE, this capability is also set to FALSE: FileSharing
            </summary>
        </member>
        <member name="F:Rainbow.Model.Contact.Capability.FileSharing">
            <summary>
            <see cref="T:System.String"/> - FileSharing: To know if the user in a Conversation can Upload, Save, Fwd or Share files. This capability can not be TRUE if FileStorage is set to FALSE 
            </summary>
        </member>
        <member name="F:Rainbow.Model.Contact.Capability.SoftPhoneOnly">
            <summary>
            <see cref="T:System.String"/> - SoftPhoneOnly: To know if the user can ONLY use a SoftPhone. 
            
            If it's set to TRUE, this capabilities are all set to FALSE: WebRTCAudio, WebRTCVideo, WebRTCLocalSharing, Channel, InstantMessaging, Bubble, FileStorage and FileSharing
            </summary>
        </member>
        <member name="F:Rainbow.Model.Contact.Capability.WebRTCVideo">
            <summary>
            <see cref="T:System.String"/> - WebRTCVideo: To know if the user can use Video in WebRTC (Peer to Peer context or in a conference)
            </summary>
        </member>
        <member name="F:Rainbow.Model.Contact.Capability.WebRTCAudio">
            <summary>
            <see cref="T:System.String"/> - WebRTCAudio: To know if the user can use Audio in WebRTC (Peer to Peer context or in a conference)
            </summary>
        </member>
        <member name="F:Rainbow.Model.Contact.Capability.WebRTCLocalSharing">
            <summary>
            <see cref="T:System.String"/> - WebRTCSharing: To know if the user can share its own screen
            </summary>
        </member>
        <member name="F:Rainbow.Model.Contact.Capability.RecordingConversation">
            <summary>
            <see cref="T:System.String"/> - RecordingConversation: To know if the user can record a conversation. 
            </summary>
        </member>
        <member name="F:Rainbow.Model.Contact.Capability.Channel">
            <summary>
            <see cref="T:System.String"/> - Channel: To know if the user can use channel (create or update channel, receive or publish items in channel)
            </summary>
        </member>
        <member name="F:Rainbow.Model.Contact.Capability.InstantMessaging">
            <summary>
            <see cref="T:System.String"/> - InstantMessaging: To know if the user can use IM (receive / send IM)
            </summary>
        </member>
        <member name="F:Rainbow.Model.Contact.Capability.PhoneMeeting">
            <summary>
            <see cref="T:System.String"/> - PhoneMeeting: To know if the user can join a Phone Meeting (PSTN Conference)
            </summary>
        </member>
        <member name="F:Rainbow.Model.Contact.Capability.Bubble">
            <summary>
            <see cref="T:System.String"/> - Bubble: To know if the user can use bubbles
            </summary>
        </member>
        <member name="F:Rainbow.Model.Contact.Capability.UserNameUpdate">
            <summary>
            <see cref="T:System.String"/> - UserNameUpdate: To know if the user can update his last name, first name and title
            </summary>
        </member>
        <member name="T:Rainbow.Model.Contact.DeviceType">
            <summary>
            To store all Device Type of phones
            </summary>
        </member>
        <member name="F:Rainbow.Model.Contact.DeviceType.Landline">
            <summary>
            <see cref="T:System.String"/> - Landline
            </summary>
        </member>
        <member name="F:Rainbow.Model.Contact.DeviceType.Mobile">
            <summary>
            <see cref="T:System.String"/> - Mobile
            </summary>
        </member>
        <member name="F:Rainbow.Model.Contact.DeviceType.Fax">
            <summary>
            <see cref="T:System.String"/> - Fax
            </summary>
        </member>
        <member name="F:Rainbow.Model.Contact.DeviceType.Other">
            <summary>
            <see cref="T:System.String"/> - Other
            </summary>
        </member>
        <member name="T:Rainbow.Model.Contact.Type">
            <summary>
            To store all Type of phones or email
            </summary>
        </member>
        <member name="F:Rainbow.Model.Contact.Type.Home">
            <summary>
            <see cref="T:System.String"/> - Home
            </summary>
        </member>
        <member name="F:Rainbow.Model.Contact.Type.Work">
            <summary>
            <see cref="T:System.String"/> - Work
            </summary>
        </member>
        <member name="F:Rainbow.Model.Contact.Type.Other">
            <summary>
            <see cref="T:System.String"/> - Other
            </summary>
        </member>
        <member name="F:Rainbow.Model.Contact.Type.Rainbow">
            <summary>
            <see cref="T:System.String"/> - Rainbow
            </summary>
        </member>
        <member name="T:Rainbow.Model.Contact.Details">
            <summary>
            To store options about Contacts info details
            </summary>
        </member>
        <member name="F:Rainbow.Model.Contact.Details.Small">
            <summary>
            'Small' details
            </summary>
        </member>
        <member name="F:Rainbow.Model.Contact.Details.Medium">
            <summary>
            'Medium' details
            </summary>
        </member>
        <member name="F:Rainbow.Model.Contact.Details.Full">
            <summary>
            'Full' details
            </summary>
        </member>
        <member name="P:Rainbow.Model.Contact.Id">
            <summary>
            <see cref="T:System.String"/> - Contact ID
            </summary>
        </member>
        <member name="P:Rainbow.Model.Contact.Jid_im">
            <summary>
            <see cref="T:System.String"/> - Contact JID
            </summary>
        </member>
        <member name="P:Rainbow.Model.Contact.Jid_password">
            <summary>
            <see cref="T:System.String"/> - Contact JID Password
            </summary>
        </member>
        <member name="P:Rainbow.Model.Contact.Jid_tel">
            <summary>
            <see cref="T:System.String"/> - Telephony Contact JID
            </summary>
        </member>
        <member name="P:Rainbow.Model.Contact.LoginEmail">
            <summary>
            <see cref="T:System.String"/> - LoginEmail
            </summary>
        </member>
        <member name="P:Rainbow.Model.Contact.FirstName">
            <summary>
            <see cref="T:System.String"/> - First Name
            </summary>
        </member>
        <member name="P:Rainbow.Model.Contact.LastName">
            <summary>
            <see cref="T:System.String"/> - Last Name
            </summary>
        </member>
        <member name="P:Rainbow.Model.Contact.DisplayName">
            <summary>
            <see cref="T:System.String"/> - Display name
            </summary>
        </member>
        <member name="P:Rainbow.Model.Contact.NickName">
            <summary>
            <see cref="T:System.String"/> - Nick name
            </summary>
        </member>
        <member name="P:Rainbow.Model.Contact.InRoster">
            <summary>
            <see cref="T:System.Boolean"/> - True is this contact is in the roster
            </summary>
        </member>
        <member name="P:Rainbow.Model.Contact.IsTv">
            <summary>
            <see cref="T:System.Boolean"/> - Indicates if the user corresponds to a TV or not
            </summary>
        </member>
        <member name="P:Rainbow.Model.Contact.Title">
            <summary>
            <see cref="T:System.String"/> - Title
            </summary>
        </member>
        <member name="P:Rainbow.Model.Contact.JobTitle">
            <summary>
            <see cref="T:System.String"/> - Job title
            </summary>
        </member>
        <member name="P:Rainbow.Model.Contact.Country">
            <summary>
            <see cref="T:System.String"/> - Country - ISO 3166-1 alpha3 format
            </summary>
        </member>
        <member name="P:Rainbow.Model.Contact.State">
            <summary>
            <see cref="T:System.String"/> - State - Usefull only if country is USA
            </summary>
        </member>
        <member name="P:Rainbow.Model.Contact.Language">
            <summary>
            <see cref="T:System.String"/> - State - ISO 639-1 code format, with possibility of regional variation.Ex: both 'en' and 'en-US' are supported
            </summary>
        </member>
        <member name="P:Rainbow.Model.Contact.Timezone">
            <summary>
            <see cref="T:System.String"/> - Time zone
            </summary>
        </member>
        <member name="P:Rainbow.Model.Contact.CompanyId">
            <summary>
            <see cref="T:System.String"/> - Company ID
            </summary>
        </member>
        <member name="P:Rainbow.Model.Contact.CompanyName">
            <summary>
            <see cref="T:System.String"/> - Company Name
            </summary>
        </member>
        <member name="P:Rainbow.Model.Contact.ShowPresence">
            <summary>
            <see cref="T:System.Boolean"/> - Show presence
            </summary>
        </member>
        <member name="P:Rainbow.Model.Contact.IsTerminated">
            <summary>
            <see cref="T:System.Boolean"/> - Indicates if the Rainbow account of this contact has been deleted
            </summary>
        </member>
        <member name="P:Rainbow.Model.Contact.GuestMode">
            <summary>
            <see cref="T:System.Boolean"/> - Indicated a contact embedded in a chat or conference room, as guest, with limited rights until he finalizes his registration.
            </summary>
        </member>
        <member name="P:Rainbow.Model.Contact.IsInDefaultCompany">
            <summary>
            <see cref="T:System.Boolean"/> - Is contact in default company 
            </summary>
        </member>
        <member name="P:Rainbow.Model.Contact.IsADSearchAvailable">
            <summary>
            <see cref="T:System.Boolean"/> - Is ActiveDirectory (Office365) search available for this contact
            </summary>
        </member>
        <member name="P:Rainbow.Model.Contact.IsAlertNotificationEnabled">
            <summary>
            <see cref="T:System.Boolean"/> - Is user subscribed to "Rainbow Alert Offer". Only returned if retrieved user data corresponds to logged in user or if logged in user is in the same company than the retrieved user.
            </summary>
        </member>
        <member name="P:Rainbow.Model.Contact.LastUpdateDate">
            <summary>
            <see cref="T:System.DateTime"/> - Date of last contact update (whatever the field updated) in **UTC format**
            </summary>
        </member>
        <member name="P:Rainbow.Model.Contact.LastAvatarUpdateDate">
            <summary>
            <see cref="T:System.DateTime"/> - Date of last contact avatar create/update  in **UTC format**, **If there is no avatar, this field is equal to DateTime.MinValue**
            </summary>
        </member>
        <member name="P:Rainbow.Model.Contact.LastOfflineMailReceivedDate">
            <summary>
            <see cref="T:System.DateTime"/> - The last time the contact has received a message to connect to Rainbow from the logged in contact
            </summary>
        </member>
        <member name="P:Rainbow.Model.Contact.Tags">
            <summary>
            An Array of free tags associated to the user. A maximum of 5 tags is allowed, each tag can have a maximum length of 64 characters.
            Tags can only be set by users who have administrator rights on the user.The user can't modify the tags.
            The tags are only visible by the user and all users belonging to his organisation/company.
            </summary>
        </member>
        <member name="P:Rainbow.Model.Contact.Emails">
            <summary>
            List of <see cref="T:Rainbow.Model.Contact.EmailObject" /> objects 
            </summary>
        </member>
        <member name="P:Rainbow.Model.Contact.PhoneNumbers">
            <summary>
            List of <see cref="T:Rainbow.Model.Contact.PhoneNumber" /> objects 
            </summary>
        </member>
        <member name="P:Rainbow.Model.Contact.Calendars">
            <summary>
            List of associated <see cref="T:Rainbow.Model.Contact.Calendar" /> objects from external providers configured by the contact (office365, google calendar, ...) 
            </summary>
        </member>
        <member name="T:Rainbow.Model.Contact.Calendar">
            <summary>
            To store external providers configured by the contact (office365, google calendar, ...)
            </summary>
        </member>
        <member name="M:Rainbow.Model.Contact.Calendar.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Rainbow.Model.Contact.Calendar.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor with 2 parameters
            </summary>
            <param name="email"><see cref="T:System.String"/>The full email string (for example 'myName@myDomai.com')</param>
            <param name="enabled"><see cref="T:System.Boolean"/>To indicate if the calendar synchronisation from external provider to Rainbow is enabled </param>
        </member>
        <member name="P:Rainbow.Model.Contact.Calendar.Email">
            <summary>
            <see cref="T:System.String"/> - Get / Set Email value (for example 'myName@myDomai.com')
            </summary>
        </member>
        <member name="P:Rainbow.Model.Contact.Calendar.Enabled">
            <summary>
            <see cref="T:System.Boolean"/> - To indicate if the calendar synchronisation from external provider to Rainbow is enabled
            </summary>
        </member>
        <member name="T:Rainbow.Model.Contact.EmailObject">
            <summary>
            Define an email object
            </summary>
        </member>
        <member name="M:Rainbow.Model.Contact.EmailObject.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Rainbow.Model.Contact.EmailObject.#ctor(System.String,System.String)">
            <summary>
            Constructor with 2 parameters
            </summary>
            <param name="email"><see cref="T:System.String"/> The full email string (for example 'myName@myDomai.com')</param>
            <param name="type"><see cref="T:System.String"/> The type of email - see <see cref="T:Rainbow.Model.Contact.Type" /> for all valid values</param>
        </member>
        <member name="P:Rainbow.Model.Contact.EmailObject.Email">
            <summary>
            <see cref="T:System.Boolean"/> - Get / Set Email value (for example 'myName@myDomai.com')
            </summary>
        </member>
        <member name="P:Rainbow.Model.Contact.EmailObject.Type">
            <summary>
            <see cref="T:Rainbow.Model.Contact.Type"/> - Get / Set Type value
            </summary>
        </member>
        <member name="T:Rainbow.Model.Contact.PhoneNumber">
            <summary>
            Phone number objects can:
             - be created by contact(information filled by contact)
             - come from association with a system(pbx) device(association is done by admin).
            </summary>
        </member>
        <member name="M:Rainbow.Model.Contact.PhoneNumber.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Rainbow.Model.Contact.PhoneNumber.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Constructor with number, cournty, type and device type
            </summary>
            <param name="number"><see cref="T:System.String"/>Contact phone number</param>
            <param name="country"><see cref="T:System.String"/>Phone number country (ISO 3166-1 alpha3 format). Used to compute numberE164 field from number field.</param>
            <param name="type"><see cref="T:System.String"/>Phone number type - see <see cref="T:Rainbow.Model.Contact.Type" /> for all valid values</param>
            <param name="deviceType"><see cref="T:System.String"/>Phone number device type - see <see cref="T:Rainbow.Model.Contact.DeviceType" /> for all valid values</param>
        </member>
        <member name="P:Rainbow.Model.Contact.PhoneNumber.PhoneNumberId">
            <summary>
            <see cref="T:System.String"/> - Phone number unique id in directory collection.
            </summary>
        </member>
        <member name="P:Rainbow.Model.Contact.PhoneNumber.Number">
            <summary>
            <see cref="T:System.String"/> - Contact phone number (as entered by contact)
            </summary>
        </member>
        <member name="P:Rainbow.Model.Contact.PhoneNumber.NumberE164">
            <summary>
            <see cref="T:System.String"/> - Contact E.164 phone number, computed by server from number and country fields
            </summary>
        </member>
        <member name="P:Rainbow.Model.Contact.PhoneNumber.Country">
            <summary>
            <see cref="T:System.String"/> - Phone number country (ISO 3166-1 alpha3 format). Used to compute numberE164 field from number field.
            </summary>
        </member>
        <member name="P:Rainbow.Model.Contact.PhoneNumber.IsFromSystem">
            <summary>
            <see cref="T:System.Boolean"/> - To indicate if phone is linked to a system (pbx).
            </summary>
        </member>
        <member name="P:Rainbow.Model.Contact.PhoneNumber.IsVisibleByOthers">
            <summary>
            <see cref="T:System.Boolean"/> - Allow user to choose if the phone number is visible by other users or not.
            </summary>
        </member>
        <member name="P:Rainbow.Model.Contact.PhoneNumber.ShortNumber">
            <summary>
            <see cref="T:System.String"/> - Only for phone numbers linked to a system (pbx)
            
            If phone is linked to a system(pbx), short phone number(corresponds to the number monitored by PCG).
            
            Only usable within the same PBX.Only PCG can set this field.
            </summary>
        </member>
        <member name="P:Rainbow.Model.Contact.PhoneNumber.InternalNumber">
            <summary>
            <see cref="T:System.String"/> - Only for phone numbers linked to a system (pbx)
            
            If phone is linked to a system(pbx), internal phone number.
            
            Usable within a PBX group. Admins and contacts can modify this internalNumber field.
            </summary>
        </member>
        <member name="P:Rainbow.Model.Contact.PhoneNumber.SystemId">
            <summary>
            <see cref="T:System.String"/> - Only for phone numbers linked to a system (pbx)
            
            If phone is linked to a system(pbx), unique identifier of that system in Rainbow database.
            </summary>
        </member>
        <member name="P:Rainbow.Model.Contact.PhoneNumber.PbxId">
            <summary>
            <see cref="T:System.String"/> - Only for phone numbers linked to a system (pbx)
            
            If phone is linked to a system(pbx), unique identifier of that pbx.
            </summary>
        </member>
        <member name="P:Rainbow.Model.Contact.PhoneNumber.DeviceName">
            <summary>
            <see cref="T:System.String"/> - Only for phone numbers linked to a system (pbx)
            
            If phone is linked to a system(pbx), the name of the device
            </summary>
        </member>
        <member name="P:Rainbow.Model.Contact.PhoneNumber.VoiceMailNumber">
            <summary>
            <see cref="T:System.String"/> - Only for phone numbers linked to a system (pbx)
            
            If phone is linked to a system(pbx), the number of the voice mail (if any)
            </summary>
        </member>
        <member name="P:Rainbow.Model.Contact.PhoneNumber.Type">
            <summary>
            <see cref="T:Rainbow.Model.Contact.Type"/> - Phone number type
            </summary>
        </member>
        <member name="P:Rainbow.Model.Contact.PhoneNumber.DeviceType">
            <summary>
            <see cref="T:Rainbow.Model.Contact.DeviceType"/> - Phone number device type
            </summary>
        </member>
        <member name="T:Rainbow.Model.Phonebook">
            <summary>
            Phonebook item. Used as result object when trying to search users - see <see cref="M:Rainbow.Contacts.SearchContactsByDisplayName(System.String,System.Int32,System.Action{Rainbow.SdkResult{Rainbow.Model.SearchContactsResult}},System.String)"/> or <see cref="M:Rainbow.Contacts.SearchContactByPhoneNumber(System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.SearchContactsResult}},System.String)"/> from <see cref="T:Rainbow.Contacts"/> object
            </summary>
        </member>
        <member name="P:Rainbow.Model.Phonebook.Id">
            <summary>
            <see cref="T:System.String"/> - Phone book id
            </summary>
        </member>
        <member name="P:Rainbow.Model.Phonebook.FirstName">
            <summary>
            <see cref="T:System.String"/> - First name stored in the phone book
            </summary>
        </member>
        <member name="P:Rainbow.Model.Phonebook.LastName">
            <summary>
            <see cref="T:System.String"/> - Last name stored in the phone book
            </summary>
        </member>
        <member name="P:Rainbow.Model.Phonebook.Number">
            <summary>
            <see cref="T:System.String"/> - Phone number stored in the phone book
            </summary>
        </member>
        <member name="T:Rainbow.Model.O365AdContact">
            <summary>
            Office 365 Active directory item. Used as result object when trying to search users - see <see cref="M:Rainbow.Contacts.SearchContactsByDisplayName(System.String,System.Int32,System.Action{Rainbow.SdkResult{Rainbow.Model.SearchContactsResult}},System.String)"/> or <see cref="M:Rainbow.Contacts.SearchContactByPhoneNumber(System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.SearchContactsResult}},System.String)"/> from <see cref="T:Rainbow.Contacts"/> object
            </summary>
        </member>
        <member name="P:Rainbow.Model.O365AdContact.Oid">
            <summary>
            <see cref="T:System.String"/> - Office 365 Active Directory Id
            </summary>
        </member>
        <member name="P:Rainbow.Model.O365AdContact.MobilePhonesE164">
            <summary>
            List of <see cref="T:System.String"/> - Mobiles phones in E164 format
            </summary>
        </member>
        <member name="P:Rainbow.Model.O365AdContact.BusinessPhonesE164">
            <summary>
            List of <see cref="T:System.String"/> - Business phones in E164 format
            </summary>
        </member>
        <member name="P:Rainbow.Model.O365AdContact.Number">
            <summary>
            <see cref="T:System.String"/> - Phone number stored in the phone book
            </summary>
        </member>
        <member name="P:Rainbow.Model.O365AdContact.FirstName">
            <summary>
            <see cref="T:System.String"/> - First name
            </summary>
        </member>
        <member name="P:Rainbow.Model.O365AdContact.LastName">
            <summary>
            <see cref="T:System.String"/> - Last name
            </summary>
        </member>
        <member name="P:Rainbow.Model.O365AdContact.JobTitle">
            <summary>
            <see cref="T:System.String"/> - JobTitle
            </summary>
        </member>
        <member name="P:Rainbow.Model.O365AdContact.Mail">
            <summary>
            <see cref="T:System.String"/> - Mail
            </summary>
        </member>
        <member name="T:Rainbow.Model.DirectoryContact">
            <summary>
            Contact Item from Company directory. Used as result object when trying to search users - see <see cref="M:Rainbow.Contacts.SearchContactsByDisplayName(System.String,System.Int32,System.Action{Rainbow.SdkResult{Rainbow.Model.SearchContactsResult}},System.String)"/> or <see cref="M:Rainbow.Contacts.SearchContactByPhoneNumber(System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.SearchContactsResult}},System.String)"/> from <see cref="T:Rainbow.Contacts"/> object
            </summary>
        </member>
        <member name="P:Rainbow.Model.DirectoryContact.Id">
            <summary>
            <see cref="T:System.String"/> - Directory entry identifier
            </summary>
        </member>
        <member name="P:Rainbow.Model.DirectoryContact.CompanyId">
            <summary>
            <see cref="T:System.String"/> - Company Id of the contact
            </summary>
        </member>
        <member name="P:Rainbow.Model.DirectoryContact.UserId">
            <summary>
            <see cref="T:System.String"/> - Id of the user
            </summary>
        </member>
        <member name="P:Rainbow.Model.DirectoryContact.Type">
            <summary>
            <see cref="T:System.String"/> - Type of the directory entry: "user" or "company"
            </summary>
        </member>
        <member name="P:Rainbow.Model.DirectoryContact.FirstName">
            <summary>
            <see cref="T:System.String"/> - First name (max 255 caracters)
            </summary>
        </member>
        <member name="P:Rainbow.Model.DirectoryContact.LastName">
            <summary>
            <see cref="T:System.String"/> - Last name (max 255 caracters)
            </summary>
        </member>
        <member name="P:Rainbow.Model.DirectoryContact.CompanyName">
            <summary>
            <see cref="T:System.String"/> - Company name (max 255 caracters)
            </summary>
        </member>
        <member name="P:Rainbow.Model.DirectoryContact.Department">
            <summary>
            <see cref="T:System.String"/> - Department (max 255 caracters)
            </summary>
        </member>
        <member name="P:Rainbow.Model.DirectoryContact.Street">
            <summary>
            <see cref="T:System.String"/> - Street (max 255 caracters)
            </summary>
        </member>
        <member name="P:Rainbow.Model.DirectoryContact.City">
            <summary>
            <see cref="T:System.String"/> - City (max 255 caracters)
            </summary>
        </member>
        <member name="P:Rainbow.Model.DirectoryContact.State">
            <summary>
            <see cref="T:System.String"/> - State (When country is 'USA' or 'CAN', a state should be defined. Else it is not managed. Allowed values: "AK", "AL", "....", "NY", "WY")
            </summary>
        </member>
        <member name="P:Rainbow.Model.DirectoryContact.PostalCode">
            <summary>
            <see cref="T:System.String"/> - PostalCode (max 64 caracters)
            </summary>
        </member>
        <member name="P:Rainbow.Model.DirectoryContact.Country">
            <summary>
            <see cref="T:System.String"/> - Country (ISO 3166-1 alpha3 format)
            </summary>
        </member>
        <member name="P:Rainbow.Model.DirectoryContact.MobilePhoneNumbers">
            <summary>
            List of <see cref="T:System.String"/> - Mobiles phones in E164 format (max 32 caracters)
            </summary>
        </member>
        <member name="P:Rainbow.Model.DirectoryContact.WorkPhoneNumbers">
            <summary>
            List of <see cref="T:System.String"/> - Work phone numbers (E164 format) (max 32 caracters)
            </summary>
        </member>
        <member name="P:Rainbow.Model.DirectoryContact.OtherPhoneNumbers">
            <summary>
            List of <see cref="T:System.String"/> - Other phone numbers (E164 format) (max 32 caracters)
            </summary>
        </member>
        <member name="P:Rainbow.Model.DirectoryContact.JobTitle">
            <summary>
            <see cref="T:System.String"/> - JobTitle (max 255 caracters)
            </summary>
        </member>
        <member name="P:Rainbow.Model.DirectoryContact.EMail">
            <summary>
            <see cref="T:System.String"/> - Mail (max 255 caracters)
            </summary>
        </member>
        <member name="P:Rainbow.Model.DirectoryContact.Tags">
            <summary>
            List of <see cref="T:System.Collections.Generic.List`1"/> - Tags(max 64 caracters)
            </summary>
        </member>
        <member name="P:Rainbow.Model.DirectoryContact.Custom1">
            <summary>
            <see cref="T:System.String"/> - Custom field 1 (max 255 caracters)
            </summary>
        </member>
        <member name="P:Rainbow.Model.DirectoryContact.Custom2">
            <summary>
            <see cref="T:System.String"/> - Custom field 2 (max 255 caracters)
            </summary>
        </member>
        <member name="T:Rainbow.Model.DirectoryContactsListData">
            <summary>
            Strucute use to retrieve list of <see cref="T:Rainbow.Model.DirectoryContact"/>
            </summary>
        </member>
        <member name="P:Rainbow.Model.DirectoryContactsListData.Data">
            <summary>
            <see cref="T:System.Collections.Generic.List`1"/> - List of DirectoryContact retrieved
            </summary>
        </member>
        <member name="P:Rainbow.Model.DirectoryContactsListData.Total">
            <summary>
            <see cref="T:System.Int32"/> - Total of themes available
            </summary>
        </member>
        <member name="P:Rainbow.Model.DirectoryContactsListData.Limit">
            <summary>
            <see cref="T:System.Int32"/> - Nb of Themes asked
            </summary>
        </member>
        <member name="P:Rainbow.Model.DirectoryContactsListData.Offset">
            <summary>
            <see cref="T:System.Int32"/> - Offset used to retrieves Themes
            </summary>
        </member>
        <member name="T:Rainbow.Model.SearchContactsResult">
            <summary>
            Centralize different soruces result whe a search by display name is used - see <see cref="M:Rainbow.Contacts.SearchContactsByDisplayName(System.String,System.Int32,System.Action{Rainbow.SdkResult{Rainbow.Model.SearchContactsResult}},System.String)"/> or <see cref="M:Rainbow.Contacts.SearchContactByPhoneNumber(System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.SearchContactsResult}},System.String)"/> from <see cref="T:Rainbow.Contacts"/> object
            </summary>
        </member>
        <member name="F:Rainbow.Model.SearchContactsResult.ContactsList">
            <summary>
            List of <see cref="T:Rainbow.Model.Contact"/> - Results from Rainbow public users and users being in companies visible by logged in user's company. 
            </summary>
        </member>
        <member name="F:Rainbow.Model.SearchContactsResult.PhonebooksList">
            <summary>
            List of <see cref="T:Rainbow.Model.Phonebook"/> - Results from the phonebook  of the user's company (if user has the permission)
            </summary>
        </member>
        <member name="F:Rainbow.Model.SearchContactsResult.O365AdContactsList">
            <summary>
            List of <see cref="T:Rainbow.Model.O365AdContact"/> - Results of the Office 365 Active Directory of the user's company (if user has the permission)
            </summary>
        </member>
        <member name="F:Rainbow.Model.SearchContactsResult.DirectoryContactsList">
            <summary>
            List of <see cref="T:Rainbow.Model.DirectoryContact"/> - Results of the Company Directory of the user (if user has the permission)
            </summary>
        </member>
        <member name="M:Rainbow.Model.SearchContactsResult.#ctor(System.Collections.Generic.List{Rainbow.Model.Contact},System.Collections.Generic.List{Rainbow.Model.Phonebook},System.Collections.Generic.List{Rainbow.Model.O365AdContact},System.Collections.Generic.List{Rainbow.Model.DirectoryContact})">
            <summary>
            Default constructor
            </summary>
            <param name="ContactsList"><see cref="T:System.Collections.Generic.List`1"/>List Rainbow users</param>
            <param name="PhonebooksList"><see cref="T:System.Collections.Generic.List`1"/>List of <see cref="T:Rainbow.Model.Phonebook"/></param>
            <param name="O365AdContactsList"><see cref="T:System.Collections.Generic.List`1"/>List of <see cref="T:Rainbow.Model.O365AdContact"/></param>
            <param name="DirectoryContactsList"><see cref="T:System.Collections.Generic.List`1"/>List of <see cref="T:Rainbow.Model.DirectoryContact"/></param>
        </member>
        <member name="T:Rainbow.Model.Conversation">
            <summary>
            This class represents a conversation
            
            A conversation is a "long" interaction(aka the "long tail") between the user and one or several contacts(Rainbow users or not) based on the IM media if the recipients are Rainbow users.
            
            A conversation never ends and all interactions done can be retrieved.
            </summary>
        </member>
        <member name="T:Rainbow.Model.Conversation.ConversationType">
            <summary>
            To know all possible type of conversation
            </summary>
        </member>
        <member name="F:Rainbow.Model.Conversation.ConversationType.User">
            <summary>
            <see cref="T:System.String"/> - User to User conversation type
            </summary>
        </member>
        <member name="F:Rainbow.Model.Conversation.ConversationType.Room">
            <summary>
            <see cref="T:System.String"/> - User to Room conversation type
            </summary>
        </member>
        <member name="F:Rainbow.Model.Conversation.ConversationType.Bot">
            <summary>
            <see cref="T:System.String"/> - User to Bot conversation type
            </summary>
        </member>
        <member name="F:Rainbow.Model.Conversation.ConversationType.Channel">
            <summary>
            <see cref="T:System.String"/> - Channel
            </summary>
        </member>
        <member name="T:Rainbow.Model.Conversation.CallInfo">
            <summary>
            Call log information
            </summary>
        </member>
        <member name="P:Rainbow.Model.Conversation.CallInfo.State">
            <summary>
            <see cref="T:Rainbow.Model.Conversation.CallState"/> - Call state
            </summary>
        </member>
        <member name="P:Rainbow.Model.Conversation.CallInfo.Duration">
            <summary>
            <see cref="T:System.Int64"/> - if call answered, call duration (in milliseconds) 
            </summary>
        </member>
        <member name="M:Rainbow.Model.Conversation.CallInfo.ToString">
            <summary>
            Serialize this object to String
            </summary>
            <returns><see cref="T:System.String"/> as serialization result</returns>
        </member>
        <member name="T:Rainbow.Model.Conversation.CallState">
            <summary>
            To know all possible type of call state
            </summary>
        </member>
        <member name="F:Rainbow.Model.Conversation.CallState.Missed">
            <summary>
            <see cref="T:System.String"/> - Call missed
            </summary>
        </member>
        <member name="F:Rainbow.Model.Conversation.CallState.Answered">
            <summary>
            <see cref="T:System.String"/> - Call answered
            </summary>
        </member>
        <member name="P:Rainbow.Model.Conversation.Id">
            <summary>
            <see cref="T:System.String"/> - Conversation unique identifier.
            </summary>
        </member>
        <member name="P:Rainbow.Model.Conversation.CreationDate">
            <summary>
            <see cref="T:System.DateTime"/> - Conversation creation date.
            </summary>
        </member>
        <member name="P:Rainbow.Model.Conversation.PeerId">
            <summary>
            <see cref="T:System.String"/> - userId or roomId of the peer involved in the conversation.
            </summary>
        </member>
        <member name="P:Rainbow.Model.Conversation.Mute">
            <summary>
            <see cref="T:System.Boolean"/> - True if conversation is muted, false otherwise (false by default)
            </summary>
        </member>
        <member name="P:Rainbow.Model.Conversation.Type">
            <summary>
            <see cref="T:Rainbow.Model.Conversation.ConversationType"/> - Type of the conversation peer
            </summary>
        </member>
        <member name="P:Rainbow.Model.Conversation.SubType">
            <summary>
            Equals "webinar" to indicate if the purpose of this conversation is to host a webinar. <see cref="P:Rainbow.Model.Conversation.Type"/> is then equal to <see cref="F:Rainbow.Model.Conversation.ConversationType.Room"/>. Null/Empty in other case.
            </summary>
        </member>
        <member name="P:Rainbow.Model.Conversation.Jid_im">
            <summary>
            <see cref="T:System.String"/> - User, Room or Bot Jabber IM identifier
            </summary>
        </member>
        <member name="P:Rainbow.Model.Conversation.LastAvatarUpdateDate">
            <summary>
            <see cref="T:System.DateTime"/> - Last Avatar update date
            </summary>
        </member>
        <member name="P:Rainbow.Model.Conversation.Name">
            <summary>
            <see cref="T:System.String"/> - If conversation type is room or bot, name of the peer room/bot
            </summary>
        </member>
        <member name="P:Rainbow.Model.Conversation.Topic">
            <summary>
            <see cref="T:System.String"/> - If conversation type is bot, topic of the peer room
            </summary>
        </member>
        <member name="P:Rainbow.Model.Conversation.LastMessageText">
            <summary>
            <see cref="T:System.String"/> - If available text of the last message for this conversation. Otherwise an empty string.
            </summary>
        </member>
        <member name="P:Rainbow.Model.Conversation.LastMessageDate">
            <summary>
            <see cref="T:System.DateTime"/> - If available (i.e. <see cref="T:System.DateTime"/> not equal to **MinValue**, date of the last message for this conversation.
            </summary>
        </member>
        <member name="P:Rainbow.Model.Conversation.UnreceivedMessageNumber">
            <summary>
            <see cref="T:System.Int64"/> - If available, number of unreceived messages for this conversation (otherwise 0).
            </summary>
        </member>
        <member name="P:Rainbow.Model.Conversation.UnreadMessageNumber">
            <summary>
            <see cref="T:System.Int64"/> - If available, number of unread messages for this conversation (otherwise 0)
            </summary>
        </member>
        <member name="P:Rainbow.Model.Conversation.Call">
            <summary>
            <see cref="T:Rainbow.Model.Conversation.CallInfo"/> - If available and if last message corresponds to a call log (otherwise null)
            </summary>
        </member>
        <member name="M:Rainbow.Model.Conversation.ToString">
            <summary>
            Serialize this object to String
            </summary>
            <returns><see cref="T:System.String"/> as serialization result</returns>
        </member>
        <member name="T:Rainbow.Model.FavoriteType">
            <summary>
            Type of favorite
            </summary>
        </member>
        <member name="T:Rainbow.Model.Favorite">
            <summary>
            Favorite object describing a favorite with a Peer Id
            </summary>
        </member>
        <member name="P:Rainbow.Model.Favorite.Id">
            <summary>
            <see cref="T:System.String"/> - ID of this favorite
            </summary>
        </member>
        <member name="P:Rainbow.Model.Favorite.Type">
            <summary>
            <see cref="T:Rainbow.Model.FavoriteType"/> - Type of favortie
            </summary>
        </member>
        <member name="P:Rainbow.Model.Favorite.PeerId">
            <summary>
            <see cref="T:System.String"/> - Peer Id 
            </summary>
        </member>
        <member name="P:Rainbow.Model.Favorite.Position">
            <summary>
            <see cref="T:System.Int32"/> - Position of this favorite - to order them by end-user preference
            </summary>
        </member>
        <member name="T:Rainbow.Model.FileDescriptor">
             <summary>
             This class describes a file stored on Rainbow server
             
             For the moment there is 4 types of different files
             * Image: a image file - it's possible to know its original size
             * Voice Message or Conversation Recording: it's possible to know its specific ID and its duration
             * Other: any other file 
             
             According its type some object / properties are null
            
             </summary>
        </member>
        <member name="P:Rainbow.Model.FileDescriptor.Id">
            <summary>
            <see cref="T:System.String"/> - Id of the file
            </summary>
        </member>
        <member name="P:Rainbow.Model.FileDescriptor.Name">
            <summary>
            <see cref="T:System.String"/> - Name of the file
            </summary>
        </member>
        <member name="P:Rainbow.Model.FileDescriptor.Type">
            <summary>
            <see cref="T:System.String"/> - See <see cref="T:Rainbow.Model.FileType"/> for different values possible
            </summary>
        </member>
        <member name="P:Rainbow.Model.FileDescriptor.OwnerId">
            <summary>
            <see cref="T:System.String"/> - Id of the file owner
            </summary>
        </member>
        <member name="P:Rainbow.Model.FileDescriptor.MD5">
            <summary>
            <see cref="T:System.String"/> - MD5 value of the file
            </summary>
        </member>
        <member name="P:Rainbow.Model.FileDescriptor.Extension">
            <summary>
            <see cref="T:System.String"/> - Extension of the file
            </summary>
        </member>
        <member name="P:Rainbow.Model.FileDescriptor.MimeType">
            <summary>
            <see cref="T:System.String"/> - Mime type of the file
            </summary>
        </member>
        <member name="P:Rainbow.Model.FileDescriptor.Size">
            <summary>
            <see cref="T:System.Int64"/> - Size of the file in bytes
            </summary>
        </member>
        <member name="P:Rainbow.Model.FileDescriptor.ThumbnailAvailable">
            <summary>
            <see cref="T:System.Boolean"/> - To know if this file has a thumbnail available (200 or 300 px max in one of the dimension)
            </summary>
        </member>
        <member name="P:Rainbow.Model.FileDescriptor.ThumbnailSize">
            <summary>
            <see cref="T:System.Int64"/> - To know the size of the thumbnail in bytes
            </summary>
        </member>
        <member name="P:Rainbow.Model.FileDescriptor.IsUploaded">
            <summary>
            <see cref="T:System.Boolean"/> - To know if this file has been already downloaded once
            </summary>
        </member>
        <member name="P:Rainbow.Model.FileDescriptor.UploadedDate">
            <summary>
            <see cref="T:System.Boolean"/> - Last time when this file has been uploaded
            </summary>
        </member>
        <member name="P:Rainbow.Model.FileDescriptor.AvReport">
            <summary>
            <see cref="T:System.String"/> - Null/Empty when the file is not yet scanned or the anti-virus report
            </summary>
        </member>
        <member name="P:Rainbow.Model.FileDescriptor.IsClean">
            <summary>
            <see cref="T:System.Boolean"/> - True when the file has been scanned and it's not a virus
            </summary>
        </member>
        <member name="P:Rainbow.Model.FileDescriptor.Image">
            <summary>
            <see cref="T:Rainbow.Model.ImageFile"/> - If the file is an **Image** type (see <see cref="T:Rainbow.Model.FileType"/>) this object is not null.
            </summary>
        </member>
        <member name="P:Rainbow.Model.FileDescriptor.VoiceFile">
            <summary>
            <see cref="T:Rainbow.Model.VoiceFile"/> -If the file is an **VoiceMessage** type or a **ConversationRecording** (see <see cref="T:Rainbow.Model.FileType"/>) this object is not null
            </summary>
        </member>
        <member name="F:Rainbow.Model.FileDescriptor.Viewers">
            <summary>
            List of <see cref="T:Rainbow.Model.FileViewer"/> - List of users / bubbles / channel which can access to this file (except the current user)
            </summary>
        </member>
        <member name="M:Rainbow.Model.FileDescriptor.ToString">
            <summary>
            Serialize this object to String
            </summary>
            <returns><see cref="T:System.String"/> as serialization result</returns>
        </member>
        <member name="T:Rainbow.Model.FileViewer">
            <summary>
            Describe user / bubble / channel which can access to a file described in a <see cref="T:Rainbow.Model.FileDescriptor"/> 
            </summary>
        </member>
        <member name="P:Rainbow.Model.FileViewer.Id">
            <summary>
            <see cref="T:System.String"/> - Id of the viewer (user id, bubble id)
            </summary>
        </member>
        <member name="P:Rainbow.Model.FileViewer.Type">
            <summary>
            <see cref="T:System.String"/> - Type of the viewer "user" / "room" / "channel"
            </summary>
        </member>
        <member name="M:Rainbow.Model.FileViewer.ToString">
            <summary>
            Serialize this object to String
            </summary>
            <returns><see cref="T:System.String"/> as serialization result</returns>
        </member>
        <member name="T:Rainbow.Model.VoiceFile">
            <summary>
            If the file describe in a <see cref="T:Rainbow.Model.FileDescriptor"/> is an **VoiceMessage** type or a **ConversationRecording** (see <see cref="T:Rainbow.Model.FileType"/>) this object is used to have more information
            </summary>
        </member>
        <member name="P:Rainbow.Model.VoiceFile.Id">
            <summary>
            <see cref="T:System.String"/> - Id of the **VoiceMessage** or **ConversationRecording**
            </summary>
        </member>
        <member name="P:Rainbow.Model.VoiceFile.Duration">
            <summary>
            <see cref="T:System.Double"/> - Duration of the **VoiceMessage** or **ConversationRecording**
            </summary>
        </member>
        <member name="M:Rainbow.Model.VoiceFile.ToString">
            <summary>
            Serialize this object to String
            </summary>
            <returns><see cref="T:System.String"/> as serialization result</returns>
        </member>
        <member name="T:Rainbow.Model.ImageFile">
            <summary>
            If the file describe in a <see cref="T:Rainbow.Model.FileDescriptor"/> is an **Image** type (see <see cref="T:Rainbow.Model.FileType"/>) this object is used to have more information
            </summary>
        </member>
        <member name="P:Rainbow.Model.ImageFile.Width">
            <summary>
            <see cref="T:System.Int64"/> - Width of the original image
            </summary>
        </member>
        <member name="P:Rainbow.Model.ImageFile.Height">
            <summary>
            <see cref="T:System.Int64"/> - Height of the original image
            </summary>
        </member>
        <member name="T:Rainbow.Model.FileType">
            <summary>
            Define 4 types of files
            </summary>
        </member>
        <member name="F:Rainbow.Model.FileType.Image">
            <summary>
            <see cref="T:System.String"/> - Image file
            </summary>
        </member>
        <member name="F:Rainbow.Model.FileType.VoiceMessage">
            <summary>
            <see cref="T:System.String"/> - Voice Message
            </summary>
        </member>
        <member name="F:Rainbow.Model.FileType.ConversationRecording">
            <summary>
            <see cref="T:System.String"/> - Conversation Recording
            </summary>
        </member>
        <member name="F:Rainbow.Model.FileType.Other">
            <summary>
            <see cref="T:System.String"/> - Other - Not an **Image**, a **VoiceMessage** or a **ConversationRecording**
            </summary>
        </member>
        <member name="T:Rainbow.Model.Geolocation">
            <summary>
            To define the geolocation - can be specified in message
            </summary>
        </member>
        <member name="P:Rainbow.Model.Geolocation.Datum">
            <summary>
            <see cref="T:System.String"/> - Datum (WGS84 by default)
            </summary>
        </member>
        <member name="P:Rainbow.Model.Geolocation.Altitude">
            <summary>
            <see cref="T:System.Double"/> - Altitude
            </summary>
        </member>
        <member name="P:Rainbow.Model.Geolocation.Longitude">
            <summary>
            <see cref="T:System.Double"/> - Longitude
            </summary>
        </member>
        <member name="P:Rainbow.Model.Geolocation.Latitude">
            <summary>
            <see cref="T:System.Double"/> - Latitude
            </summary>
        </member>
        <member name="M:Rainbow.Model.Geolocation.ToString">
            <summary>
            Serialize this object to String
            </summary>
            <returns><see cref="T:System.String"/> as serialization result</returns>
        </member>
        <member name="M:Rainbow.Model.Geolocation.#ctor(System.String,System.Double,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="datum"><see cref="T:System.String"/>Datum (WGS84 by default</param>
            <param name="altitude"><see cref="T:System.Double"/>Altitude</param>
            <param name="latitude"><see cref="T:System.Double"/>Latitude</param>
            <param name="longitude"><see cref="T:System.Double"/>Longitude</param>
        </member>
        <member name="M:Rainbow.Model.Geolocation.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="altitude"><see cref="T:System.Double"/>Altitude</param>
            <param name="latitude"><see cref="T:System.Double"/>Latitude</param>
            <param name="longitude"><see cref="T:System.Double"/>Longitude</param>
        </member>
        <member name="M:Rainbow.Model.Geolocation.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Rainbow.Model.Group">
            <summary>
            Object to define a group of several users
            </summary>
        </member>
        <member name="P:Rainbow.Model.Group.Id">
            <summary>
            <see cref="T:System.String"/> - Group ID
            </summary>
        </member>
        <member name="P:Rainbow.Model.Group.Name">
            <summary>
            <see cref="T:System.String"/> - Group Name
            </summary>
        </member>
        <member name="P:Rainbow.Model.Group.Comment">
            <summary>
            <see cref="T:System.String"/> - Group Comment
            </summary>
        </member>
        <member name="P:Rainbow.Model.Group.IsFavorite">
            <summary>
            <see cref="T:System.Boolean"/> - Is group flagged as favorite.
            </summary>
        </member>
        <member name="F:Rainbow.Model.Group.Users">
            <summary>
            <see cref="T:List{String}"/> - List of users Id in the group
            </summary>
        </member>
        <member name="M:Rainbow.Model.Group.ToString">
            <summary>
            Serialize this object to String
            </summary>
            <returns><see cref="T:System.String"/> as serialization result</returns>
        </member>
        <member name="T:Rainbow.Model.Invitation">
            <summary>
            When an invitation is send to **a contact from the same company**, the invitation is **'auto-accepted'** - the contact is added in the roster without he needs to accept it.
            
            When an invitation is send to **a contact not from the same company**, **he must accept it** first to have it in its roster. 
            
            It's not possible to know if the invitation is specifically declined by another contact - it's seen as 'pending' in this case.
            
            <see cref="T:Rainbow.Model.Invitation.InvitationStatus"/> store all possible status of an invitation
            
            <see cref="T:Rainbow.Model.Invitation.InvitationType"/> store all possible type of an invitation
            
            </summary>
        </member>
        <member name="P:Rainbow.Model.Invitation.Id">
            <summary>
            <see cref="T:System.String"/> - The invitation ID
            </summary>
        </member>
        <member name="P:Rainbow.Model.Invitation.InvitedUserId">
            <summary>
            <see cref="T:System.String"/> - The contact ID of the invited contact
            </summary>
        </member>
        <member name="P:Rainbow.Model.Invitation.InvitedPhoneNumber">
            <summary>
            <see cref="T:System.String"/> - The phone number of the invited contact
            </summary>
        </member>
        <member name="P:Rainbow.Model.Invitation.InvitedUserEmail">
            <summary>
            <see cref="T:System.String"/> - The email of the invited contact
            </summary>
        </member>
        <member name="P:Rainbow.Model.Invitation.InvitingUserId">
            <summary>
            <see cref="T:System.String"/> - The contact ID of the inviting contact
            </summary>
        </member>
        <member name="P:Rainbow.Model.Invitation.InvitingUserEmail">
            <summary>
            <see cref="T:System.String"/> - he email of the inviting contact
            </summary>
        </member>
        <member name="P:Rainbow.Model.Invitation.RequestedNotificationLanguage">
            <summary>
            <see cref="T:System.String"/> - Requested notification language t(used to re-send email request in that language)
            </summary>
        </member>
        <member name="P:Rainbow.Model.Invitation.InvitingDate">
            <summary>
            <see cref="T:System.DateTime"/> - Date the invitation was created
            </summary>
        </member>
        <member name="P:Rainbow.Model.Invitation.LastNotificationDate">
            <summary>
            <see cref="T:System.DateTime"/> - Date when the last invitation was sent
            </summary>
        </member>
        <member name="P:Rainbow.Model.Invitation.AuthorizedReSendInvitationDate">
            <summary>
            <see cref="T:System.DateTime"/> - Date when the inviting contact will be allowed to resend again the invitation to the invited contact. It'is only set if invitation still have the status pending.
            </summary>
        </member>
        <member name="P:Rainbow.Model.Invitation.Status">
            <summary>
            <see cref="T:Rainbow.Model.Invitation.InvitationStatus"/> store all possible values of the invitation status (Pending, Accepted, AutoAccepted, Declined, Canceled or Failed).
            </summary>
        </member>
        <member name="P:Rainbow.Model.Invitation.Type">
            <summary>
            <see cref="T:Rainbow.Model.Invitation.InvitationType"/> store all possible values of the invitation type (Visibility or Registration )
            </summary>
        </member>
        <member name="T:Rainbow.Model.Invitation.InvitationStatus">
            <summary>
            Object to store all possible invitation status
            </summary>
        </member>
        <member name="F:Rainbow.Model.Invitation.InvitationStatus.Pending">
            <summary>
            <see cref="T:System.String"/> - Invitation has been sent by inviting contact and not yet accepted by invited contact
            </summary>
        </member>
        <member name="F:Rainbow.Model.Invitation.InvitationStatus.Accepted">
            <summary>
            <see cref="T:System.String"/> - Invitation has been accepted by invited contact
            </summary>
        </member>
        <member name="F:Rainbow.Model.Invitation.InvitationStatus.AutoAccepted">
            <summary>
            <see cref="T:System.String"/> - Invitation has been auto-accepted (case of contacts in same company)
            </summary>
        </member>
        <member name="F:Rainbow.Model.Invitation.InvitationStatus.Declined">
            <summary>
            <see cref="T:System.String"/> - Invitation has been declined by invited contact. Only invited contact can see that he has declined an invitation. Inviting contact still see the invitation as Pending
            </summary>
        </member>
        <member name="F:Rainbow.Model.Invitation.InvitationStatus.Canceled">
            <summary>
            <see cref="T:System.String"/> - Invitation has been canceled by inviting contact. If invited contact does not have an account in Rainbow, he can still use this invitationId received by email to create his Rainbow account, but he will not be added to inviting contact roster.
            </summary>
        </member>
        <member name="F:Rainbow.Model.Invitation.InvitationStatus.Failed">
            <summary>
            <see cref="T:System.String"/> - Invitation email failed to be sent to invited contact (determined by parsing SMTP server logs). It can be the case if the provided invited email address does not exists.
            </summary>
        </member>
        <member name="T:Rainbow.Model.Invitation.InvitationType">
            <summary>
            Object to store all possible invitation type
            </summary>
        </member>
        <member name="F:Rainbow.Model.Invitation.InvitationType.Visibility">
            <summary>
            <see cref="T:System.String"/> - Invited contact exists in Rainbow
            </summary>
        </member>
        <member name="F:Rainbow.Model.Invitation.InvitationType.Registration">
            <summary>
            <see cref="T:System.String"/> - Invited contact did not exist in Rainbow when invitation was sent
            </summary>
        </member>
        <member name="T:Rainbow.Model.Invitation.InvitationMode">
            <summary>
            Object to store all possible invitation mode
            </summary>
        </member>
        <member name="F:Rainbow.Model.Invitation.InvitationMode.Email">
            <summary>
            <see cref="T:System.String"/> - Email mode
            </summary>
        </member>
        <member name="F:Rainbow.Model.Invitation.InvitationMode.RainbowUserId">
            <summary>
            <see cref="T:System.String"/> - Contact ID mode
            </summary>
        </member>
        <member name="F:Rainbow.Model.Invitation.InvitationMode.PhoneNumber">
            <summary>
            <see cref="T:System.String"/> - Contact phone number mode
            </summary>
        </member>
        <member name="T:Rainbow.Model.Jingle.IceCandidate">
            <summary>
            Describe a IceCanditate
            </summary>
        </member>
        <member name="P:Rainbow.Model.Jingle.IceCandidate.Component">
            <summary>
            Component
            </summary>
        </member>
        <member name="P:Rainbow.Model.Jingle.IceCandidate.Foundation">
            <summary>
            Foundation
            </summary>
        </member>
        <member name="P:Rainbow.Model.Jingle.IceCandidate.Generation">
            <summary>
            Generation
            </summary>
        </member>
        <member name="P:Rainbow.Model.Jingle.IceCandidate.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Rainbow.Model.Jingle.IceCandidate.Ip">
            <summary>
            Ip
            </summary>
        </member>
        <member name="P:Rainbow.Model.Jingle.IceCandidate.Port">
            <summary>
            Port
            </summary>
        </member>
        <member name="P:Rainbow.Model.Jingle.IceCandidate.Priority">
            <summary>
            Priority
            </summary>
        </member>
        <member name="P:Rainbow.Model.Jingle.IceCandidate.Protocol">
            <summary>
            Protocol
            </summary>
        </member>
        <member name="P:Rainbow.Model.Jingle.IceCandidate.Type">
            <summary>
            Type
            </summary>
        </member>
        <member name="P:Rainbow.Model.Jingle.IceCandidate.RelAddr">
            <summary>
            RelAddr
            </summary>
        </member>
        <member name="P:Rainbow.Model.Jingle.IceCandidate.RelPort">
            <summary>
            RelPort
            </summary>
        </member>
        <member name="P:Rainbow.Model.Jingle.IceCandidate.TcpType">
            <summary>
            TcpType
            </summary>
        </member>
        <member name="P:Rainbow.Model.Jingle.IceCandidate.NetworkCost">
            <summary>
            NetworkCost
            </summary>
        </member>
        <member name="P:Rainbow.Model.Jingle.IceCandidate.NetworkId">
            <summary>
            NetworkId
            </summary>
        </member>
        <member name="P:Rainbow.Model.Jingle.IceCandidate.SdpMLineIndex">
            <summary>
            SdpMLineIndex
            </summary>
        </member>
        <member name="P:Rainbow.Model.Jingle.IceCandidate.SdpMid">
            <summary>
            SdpMid
            </summary>
        </member>
        <member name="P:Rainbow.Model.Jingle.IceCandidate.UFrag">
            <summary>
            UFrag
            </summary>
        </member>
        <member name="P:Rainbow.Model.Jingle.IceCandidate.Candidate">
            <summary>
            Candidate
            </summary>
        </member>
        <member name="T:Rainbow.Model.Jingle.JingleSession">
            <summary>
            Represent a Jingle session
            </summary>
        </member>
        <member name="F:Rainbow.Model.Jingle.JingleSession.sid">
            <summary>
            ID of session
            </summary>
        </member>
        <member name="F:Rainbow.Model.Jingle.JingleSession.state">
            <summary>
            State of the call
            </summary>
        </member>
        <member name="F:Rainbow.Model.Jingle.JingleSession.peerBareJid">
            <summary>
            Jid bare of the peer
            </summary>
        </member>
        <member name="M:Rainbow.Model.Jingle.JingleSession.GetLocalMedias">
            <summary>
            To get medias list used locally
            </summary>
            <returns><see cref="T:Rainbow.Model.Call.Media"/> for media values</returns>
        </member>
        <member name="M:Rainbow.Model.Jingle.JingleSession.GetDisplayName">
            <summary>
            To get display name of the peer in this jingle session
            </summary>
            <returns><see cref="T:System.String"/> - The display name of the peer (if any)</returns>
        </member>
        <member name="M:Rainbow.Model.Jingle.JingleSession.GetSubject">
            <summary>
            To get the subject of the call in this jingle session
            </summary>
            <returns><see cref="T:System.String"/> - The subject of the call (if any)</returns>
        </member>
        <member name="M:Rainbow.Model.Jingle.JingleSession.GetRemoteMedias">
            <summary>
            To get medias list used by the remote
            </summary>
            <returns><see cref="T:Rainbow.Model.Call.Media"/> for media values</returns>
        </member>
        <member name="M:Rainbow.Model.Jingle.SDPUtil.SearchNodes(System.Xml.XmlElement,System.String,System.Boolean)">
            <summary>
            Example: to find "content" nodes as child of "group" nodes with name space "urn:xmpp:jingle:apps:grouping:0"
            group[urn:xmpp:jingle:apps:grouping:0]/content
            
            </summary>
            <param name="xmlElement"></param>
            <param name="nodeSyntax">"/" is used as separator for sub nodes. [is used to specify the namsapce]</param>
            <param name="directSubNode"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Model.Jingle.SDPUtil.SearchNode(System.Xml.XmlElement,System.String,System.Boolean)">
            <summary>
            Retrun first node find using **SearchNodes** methods
            </summary>
            <param name="xmlElement"></param>
            <param name="nodeSyntax"></param>
            <param name="directSubNode"></param>
            <returns></returns>
        </member>
        <member name="T:Rainbow.Model.MediaPillarInfo">
            <summary>
            Centralize Media Pillar info
            </summary>
        </member>
        <member name="P:Rainbow.Model.MediaPillarInfo.RainbowPhoneNumber">
            <summary>
            Rainbow phone number
            </summary>
        </member>
        <member name="P:Rainbow.Model.MediaPillarInfo.RemoteExtension">
            <summary>
            Remote Extension
            </summary>
        </member>
        <member name="P:Rainbow.Model.MediaPillarInfo.Prefix">
            <summary>
            Media Pillar Prefix
            </summary>
        </member>
        <member name="P:Rainbow.Model.MediaPillarInfo.Jid">
            <summary>
            Media Pillar Jid
            </summary>
        </member>
        <member name="M:Rainbow.Model.MediaPillarInfo.ToString">
            <summary>
            Serialize this object to String
            </summary>
            <returns><see cref="T:System.String"/> as serialization result</returns>
        </member>
        <member name="M:Rainbow.Model.MediaPillarInfo.Clear">
            <summary>
            Set object to default values
            </summary>
        </member>
        <member name="M:Rainbow.Model.MediaPillarInfo.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Rainbow.Model.MediaPublication">
            <summary>
            Describe a Media publication in a Call (Audio, Video or Sharing) i.e. a media stream created by a peer
            
            There is only one Audio Media Publication (in Conference on in P2P)
            
            In P2P:
             - there is zero or one Video Media Publication
             - there is zero or one Sharing Media Publication
             
            In Conferene:
             - there is zero or several Video Media Publication
             - there is zero or one Sharing Media Publication
            
            </summary>
        </member>
        <member name="P:Rainbow.Model.MediaPublication.CallId">
            <summary>
            <see cref="T:System.String"/> - Id of the Call
            </summary>
        </member>
        <member name="P:Rainbow.Model.MediaPublication.PublisherId">
            <summary>
            <see cref="T:System.String"/> - Id of the publisher (i.e. a Contact.Id)
            </summary>
        </member>
        <member name="P:Rainbow.Model.MediaPublication.PublisherJid_im">
            <summary>
            <see cref="T:System.String"/> - Jid_im of the publisher (i.e. a <see cref="P:Rainbow.Model.Contact.Jid_im"/> Contact.Jid_im)
            </summary>
        </member>
        <member name="P:Rainbow.Model.MediaPublication.Media">
            <summary>
            <see cref="T:System.Int32"/> - Media used in the publication: <see cref="T:Rainbow.Model.Call.Media"/> for possibles values
            </summary>
        </member>
        <member name="P:Rainbow.Model.MediaPublication.Simulcast">
            <summary>
            To indicate if this media is sent using simulcast
            </summary>
        </member>
        <member name="M:Rainbow.Model.MediaPublication.#ctor(System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="callId"><see cref="T:System.String"/>Id of the call</param>
            <param name="publisherId"><see cref="T:System.String"/>Id of the publisher (i.e. a Contact.Id)</param>
            <param name="publisherJid"><see cref="T:System.String"/>Jid_im of the publisher (i.e. a Contact.Jid_im)</param>
            <param name="media"><see cref="T:Rainbow.Model.Call.Media"/>Media used in the publication</param>
            <param name="simulcast"><see cref="T:System.Boolean"/>To indicate if this media is sent using simulcast</param>
        </member>
        <member name="M:Rainbow.Model.MediaPublication.ToString">
            <summary>
            To serialize this object
            </summary>
            <returns><see cref="T:System.String"/> - Serialization of this object</returns>
        </member>
        <member name="T:Rainbow.Model.MediaPublicationStatus">
            <summary>
            Describe the status of a Media Publication
            </summary>
        </member>
        <member name="F:Rainbow.Model.MediaPublicationStatus.PEER_STARTED">
            <summary>
            A peer has started a Media Publication (In a Conference or in P2P call)
            </summary>
        </member>
        <member name="F:Rainbow.Model.MediaPublicationStatus.PEER_STOPPED">
            <summary>
            A peer has stopped a Media Publication (In a Conference or in P2P call)
            </summary>
        </member>
        <member name="F:Rainbow.Model.MediaPublicationStatus.CURRENT_USER_SUBSCRIBED">
            <summary>
            The current user has subscribed to a Media Publication from a Peer (In a Conference or in P2P call)
            </summary>
        </member>
        <member name="F:Rainbow.Model.MediaPublicationStatus.CURRENT_USER_UNSUBSCRIBED">
            <summary>
            The current user has unsubscribed to a Media Publication from a Peer (In a Conference or in P2P call)
            </summary>
        </member>
        <member name="F:Rainbow.Model.MediaPublicationStatus.CURRENT_USER_NOT_ACCEPTED_SUBSCRIPTION">
            <summary>
            The current user has not accepted a Media Publication from a Peer (In a Conference or in P2P call)
            </summary>
        </member>
        <member name="T:Rainbow.Model.UrgencyType">
            <summary>
            <see cref="T:System.Enum"/> - Type of urgency
            </summary>
        </member>
        <member name="F:Rainbow.Model.UrgencyType.Std">
            <summary>
            Standard (classique message)
            </summary>
        </member>
        <member name="F:Rainbow.Model.UrgencyType.Low">
            <summary>
            Low (Information message)
            </summary>
        </member>
        <member name="F:Rainbow.Model.UrgencyType.Middle">
            <summary>
            Middle (Important message)
            </summary>
        </member>
        <member name="F:Rainbow.Model.UrgencyType.High">
            <summary>
            High (Urgent message)
            </summary>
        </member>
        <member name="T:Rainbow.Model.ReceiptType">
            <summary>
            <see cref="T:System.Enum"/> - Type of receipt
            </summary>
        </member>
        <member name="F:Rainbow.Model.ReceiptType.ServerReceived">
            <summary>
            The server has received the message
            </summary>
        </member>
        <member name="F:Rainbow.Model.ReceiptType.ClientReceived">
            <summary>
            The client has received the message
            </summary>
        </member>
        <member name="F:Rainbow.Model.ReceiptType.ClientRead">
            <summary>
            The client has received and read the message
            </summary>
        </member>
        <member name="F:Rainbow.Model.ReceiptType.None">
            <summary>
            No receipt received
            </summary>
        </member>
        <member name="T:Rainbow.Model.Message">
            <summary>
            Message object describing a message sent or received in a <see cref="T:Rainbow.Model.Conversation"/>
            </summary>
        </member>
        <member name="F:Rainbow.Model.Message.Id">
            <summary>
            <see cref="T:System.String"/> - Id of the message
            </summary>
        </member>
        <member name="F:Rainbow.Model.Message.ToJid">
            <summary>
            <see cref="T:System.String"/> - The JID of the recipient of this message
            </summary>
        </member>
        <member name="F:Rainbow.Model.Message.FromJid">
            <summary>
            <see cref="T:System.String"/> - The JID (without the resource) of the user who sent this Message. Can be the identity of a user or a user inside a Bubble
            </summary>
        </member>
        <member name="F:Rainbow.Model.Message.FromResource">
            <summary>
            <see cref="T:System.String"/> - The resource of the user who sent this message
            </summary>
        </member>
        <member name="F:Rainbow.Model.Message.FromBubbleJid">
            <summary>
            <see cref="T:System.String"/> - The JID of the bubble that received the message. (Only for groupchat message)
            </summary>
        </member>
        <member name="F:Rainbow.Model.Message.Geolocation">
            <summary>
            <see cref="F:Rainbow.Model.Message.Geolocation"/> - Geolocation: A geodetic datum and a set of reference points.
            </summary>
        </member>
        <member name="F:Rainbow.Model.Message.Date">
            <summary>
            <see cref="T:System.String"/> - The creation date of the message
            </summary>
        </member>
        <member name="F:Rainbow.Model.Message.Lang">
            <summary>
            <see cref="T:System.String"/> - The language of the content for this Message (if specified) - ISO 2 language codes
            </summary>
        </member>
        <member name="F:Rainbow.Model.Message.Content">
            <summary>
            <see cref="T:System.String"/> - The content of this message (text)
            </summary>
        </member>
        <member name="F:Rainbow.Model.Message.Subject">
            <summary>
            <see cref="T:System.String"/> - The subject of this message (if specified)
            </summary>
        </member>
        <member name="F:Rainbow.Model.Message.ReplyMessage">
            <summary>
            <see cref="F:Rainbow.Model.Message.ReplyMessage"/> - If not null, this message is a reply to a previous message. This object permits to know which one
            </summary>
        </member>
        <member name="F:Rainbow.Model.Message.ReplaceId">
            <summary>
            <see cref="T:System.String"/> - If not null, this message replace a previous message (called original). 
            
            In this case, Id attribute is the Id of the original message and Replace Id is the Id of the message edited/replaced
            </summary>
        </member>
        <member name="F:Rainbow.Model.Message.Modified">
            <summary>
            <see cref="T:System.Boolean"/> - True if this message has been modified (i.e. it's not the original message)
            </summary>
        </member>
        <member name="F:Rainbow.Model.Message.Deleted">
            <summary>
            <see cref="T:System.Boolean"/> - True if this message has been deleted
            </summary>
        </member>
        <member name="F:Rainbow.Model.Message.BubbleEvent">
            <summary>
            <see cref="T:System.String"/> - If not null, this message describes a bubbleEvent : "conferenceStarted", "conferenceEnded", "conferenceDelegate"
            To know which user is concerned or which user is the initiator, the property "FromJid" must be used
            </summary>
        </member>
        <member name="F:Rainbow.Model.Message.BubbleEventProperties">
            <summary>
            If we have a buble event, store properties and values related
            </summary>
        </member>
        <member name="F:Rainbow.Model.Message.Attention">
            <summary>
            True is the current contact must take attention to this message: he has been mentionned by the message sender
            </summary>
        </member>
        <member name="F:Rainbow.Model.Message.Mentions">
            <summary>
            <see cref="T:System.Collections.Generic.List`1"/> List of User Jid mentionned by the message sender
            </summary>
        </member>
        <member name="F:Rainbow.Model.Message.Urgency">
            <summary>
            <see cref="T:Rainbow.Model.UrgencyType"/> Urgency of the message (UrgencyType.Std is default)
            </summary>
        </member>
        <member name="F:Rainbow.Model.Message.IsForwarded">
            <summary>
            To know is this message has been forwarded
            </summary>
        </member>
        <member name="F:Rainbow.Model.Message.FileAttachment">
            <summary>
            <see cref="F:Rainbow.Model.Message.FileAttachment"/> - File in attachment (if any) to this message
            </summary>
        </member>
        <member name="F:Rainbow.Model.Message.CallLogAttachment">
            <summary>
            <see cref="F:Rainbow.Model.Message.CallLogAttachment"/> - Call Log in attachement (if any) to this message
            </summary>
        </member>
        <member name="F:Rainbow.Model.Message.Receipt">
            <summary>
            <see cref="T:Rainbow.Model.ReceiptType"/> - The receipt status about this message
            </summary>
        </member>
        <member name="F:Rainbow.Model.Message.AlternativeContent">
            <summary>
            A list of <see cref="T:Rainbow.Model.MessageAlternativeContent"/> object (if any)
            </summary>
        </member>
        <member name="F:Rainbow.Model.Message.MessageStorageMode">
            <summary>
            To know the storage mode used for this message
            </summary>
        </member>
        <member name="F:Rainbow.Model.Message.OriginalXmppMessage">
            <summary>
            Store original Xmpp message as String
            </summary>
        </member>
        <member name="M:Rainbow.Model.Message.ToString">
            <summary>
            Serialize this object to String
            </summary>
            <returns><see cref="T:System.String"/> as serialization result</returns>
        </member>
        <member name="M:Rainbow.Model.Message.FromText(System.String,System.String,System.String,System.String,System.String,Rainbow.Model.UrgencyType,System.Collections.Generic.List{System.String},Rainbow.Model.Geolocation,Rainbow.Restrictions.SDKMessageStorageMode)">
            <summary>
            Create Message object with text as content
            </summary>
            <param name="fromJid"><see cref="T:System.String"/>Jid of the sender</param>
            <param name="fromResource"><see cref="T:System.String"/>Resource of the sender</param>
            <param name="ToJid"><see cref="T:System.String"/>Jid of the receiver</param>
            <param name="conversationType"><see cref="T:Rainbow.Model.Conversation.ConversationType"/>Type of conversation</param>
            <param name="content"><see cref="T:System.String"/>Message content</param>
            <param name="urgency"><see cref="T:Rainbow.Model.UrgencyType"/>Message urgency</param>
            <param name="mentions"><see cref="T:System.Collections.Generic.List`1"/>List of mentions</param>
            <param name="geolocation"><see cref="F:Rainbow.Model.Message.Geolocation"/>Message geolocation</param>
            <param name="messageStorageMode"><see cref="T:Rainbow.Restrictions.SDKMessageStorageMode"/>Message storage mode</param>
            <returns><see cref="T:Rainbow.Model.Message"/> - A Message object - NULL if invalid parameter(s)</returns>
        </member>
        <member name="M:Rainbow.Model.Message.FromTextAndFileDescriptor(System.String,System.String,System.String,System.String,System.String,Rainbow.Model.UrgencyType,System.Collections.Generic.List{System.String},Rainbow.Model.Geolocation,Rainbow.Restrictions.SDKMessageStorageMode,Rainbow.Model.FileDescriptor)">
            <summary>
            Create Message object with text and file as content
            </summary>
            <param name="fromJid"><see cref="T:System.String"/>Jid of the sender</param>
            <param name="fromResource"><see cref="T:System.String"/>Resource of the sender</param>
            <param name="ToJid"><see cref="T:System.String"/>Jid of the receiver</param>
            <param name="conversationType"><see cref="T:Rainbow.Model.Conversation.ConversationType"/>Type of conversation</param>
            <param name="content"><see cref="T:System.String"/>Message content</param>
            <param name="urgency"><see cref="T:Rainbow.Model.UrgencyType"/>Message urgency</param>
            <param name="mentions"><see cref="T:System.Collections.Generic.List`1"/>List of mentions</param>
            <param name="geolocation"><see cref="F:Rainbow.Model.Message.Geolocation"/>Message geolocation</param>
            <param name="messageStorageMode"><see cref="T:Rainbow.Restrictions.SDKMessageStorageMode"/>Message storage mode</param>
            <param name="fileDescriptor"><see cref="T:Rainbow.Model.FileDescriptor"/>File Descriptor describing file attached</param>
            <returns><see cref="T:Rainbow.Model.Message"/> - A Message object - NULL if invalid parameter(s)</returns>
        </member>
        <member name="T:Rainbow.Model.ReplyMessage">
            <summary>
            To describe the replied message
            </summary>
        </member>
        <member name="F:Rainbow.Model.ReplyMessage.Id">
            <summary>
            <see cref="T:System.String"/> - The Id of the replied messag
            </summary>
        </member>
        <member name="F:Rainbow.Model.ReplyMessage.Stamp">
            <summary>
            <see cref="T:System.String"/> - The Stamp of the replied message
            </summary>
        </member>
        <member name="M:Rainbow.Model.ReplyMessage.ToString">
            <summary>
            Serialize this object to String
            </summary>
            <returns><see cref="T:System.String"/> as serialization result</returns>
        </member>
        <member name="T:Rainbow.Model.MessageAlternativeContent">
            <summary>
            Alternative content of the message
            </summary>
        </member>
        <member name="F:Rainbow.Model.MessageAlternativeContent.Type">
            <summary>
            <see cref="T:System.String"/> - The mime type of the alternative content (text/markdown, application/json, ...)
            </summary>
        </member>
        <member name="F:Rainbow.Model.MessageAlternativeContent.Content">
            <summary>
            <see cref="T:System.String"/> - The alternative content
            </summary>
        </member>
        <member name="T:Rainbow.Model.CallLogAttachment">
            <summary>
            To describe a CallLog attached in a IM message
            </summary>
        </member>
        <member name="F:Rainbow.Model.CallLogAttachment.Caller">
            <summary>
            <see cref="T:System.String"/> - The caller Jid
            </summary>
        </member>
        <member name="F:Rainbow.Model.CallLogAttachment.Callee">
            <summary>
            <see cref="T:System.String"/> - The callee Jid
            </summary>
        </member>
        <member name="F:Rainbow.Model.CallLogAttachment.State">
            <summary>
            <see cref="T:Rainbow.Model.CallLog.LogState"/> - The call state
            </summary>
        </member>
        <member name="F:Rainbow.Model.CallLogAttachment.Type">
            <summary>
            <see cref="T:Rainbow.Model.Call.Type"/> - The type of the call
            </summary>
        </member>
        <member name="F:Rainbow.Model.CallLogAttachment.Duration">
            <summary>
            <see cref="T:System.Int32"/> - The duration of the call in milliseconds
            </summary>
        </member>
        <member name="M:Rainbow.Model.CallLogAttachment.ToString">
            <summary>
            Serialize this object to String
            </summary>
            <returns><see cref="T:System.String"/> as serialization result</returns>
        </member>
        <member name="T:Rainbow.Model.FileAttachment">
            <summary>
            To describe a File attached in a IM message
            </summary>
        </member>
        <member name="F:Rainbow.Model.FileAttachment.Id">
            <summary>
            <see cref="T:System.String"/> - The file Id
            </summary>
        </member>
        <member name="F:Rainbow.Model.FileAttachment.MimeType">
            <summary>
            <see cref="T:System.String"/> - The mime type of the file
            </summary>
        </member>
        <member name="F:Rainbow.Model.FileAttachment.Name">
            <summary>
            <see cref="T:System.String"/> - The file name
            </summary>
        </member>
        <member name="F:Rainbow.Model.FileAttachment.Size">
            <summary>
            <see cref="T:System.Int64"/> - The file size
            </summary> in octet
        </member>
        <member name="M:Rainbow.Model.FileAttachment.ToString">
            <summary>
            Serialize this object to String
            </summary>
            <returns><see cref="T:System.String"/> as serialization result</returns>
        </member>
        <member name="T:Rainbow.Model.NomadicStatus">
            <summary>
            Define the current nomadic state of the user phone
            </summary>
        </member>
        <member name="P:Rainbow.Model.NomadicStatus.Available">
            <summary>
            <see cref="T:System.Boolean"/> - True if the nomadic feature is available
            </summary>
        </member>
        <member name="P:Rainbow.Model.NomadicStatus.Activated">
            <summary>
            <see cref="T:System.Boolean"/> - True if the nomadic feature is activated so ComputerMode is set to True or a PhoneNumber is set
            </summary>
        </member>
        <member name="P:Rainbow.Model.NomadicStatus.ComputerMode">
            <summary>
            <see cref="T:System.Boolean"/> - True if the nomadic feature is set on the computer
            </summary>
        </member>
        <member name="P:Rainbow.Model.NomadicStatus.PhoneNumber">
            <summary>
            <see cref="T:System.String"/> - The nomadic destination number
            </summary>
        </member>
        <member name="P:Rainbow.Model.NomadicStatus.MakeCallInitiatorIsMain">
            <summary>
            <see cref="T:System.Boolean"/> - If True the makeCall will be initiated by the Main device, else "by" the Secondary device
            </summary>
        </member>
        <member name="M:Rainbow.Model.NomadicStatus.ToString">
            <summary>
            Serialize this object to String
            </summary>
            <returns><see cref="T:System.String"/> as serialization result</returns>
        </member>
        <member name="M:Rainbow.Model.NomadicStatus.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Rainbow.Model.NomadicStatus.Clear">
            <summary>
            Set object to default values
            </summary>
        </member>
        <member name="T:Rainbow.Model.Organisation">
            <summary>
            This class represents an organisation. 
            
            An organisation can have contains one or several companies
            
            </summary>
        </member>
        <member name="P:Rainbow.Model.Organisation.Id">
            <summary>
            <see cref="T:System.String"/> - Organisation unique identifier
            </summary>
        </member>
        <member name="P:Rainbow.Model.Organisation.Name">
            <summary>
            <see cref="T:System.String"/> - Organisation name
            </summary>
        </member>
        <member name="P:Rainbow.Model.Organisation.CreationDate">
            <summary>
            <see cref="T:System.DateTime"/> - Creation Date
            </summary>
        </member>
        <member name="P:Rainbow.Model.Organisation.Visibility">
            <summary>
            <see cref="T:System.String"/> - Visibility
            </summary>
        </member>
        <member name="P:Rainbow.Model.Organisation.IsDevelopers">
            <summary>
            <see cref="T:System.Boolean"/> - Is developers
            </summary>
        </member>
        <member name="M:Rainbow.Model.Organisation.ToString">
            <summary>
            Serialize this object to String
            </summary>
            <returns><see cref="T:System.String"/> as serialization result</returns>
        </member>
        <member name="T:Rainbow.Model.OrganisationsResult">
            <summary>
            To store Companies result
            </summary>
        </member>
        <member name="P:Rainbow.Model.OrganisationsResult.Data">
            <summary>
            Store list of companies
            </summary>
        </member>
        <member name="P:Rainbow.Model.OrganisationsResult.Total">
            <summary>
            To know the total number of contacts available
            </summary>
        </member>
        <member name="P:Rainbow.Model.OrganisationsResult.Limit">
            <summary>
            The limit used to get this result
            </summary>
        </member>
        <member name="P:Rainbow.Model.OrganisationsResult.Offset">
            <summary>
            The offset used to get this result
            </summary>
        </member>
        <member name="T:Rainbow.Model.PbxAgentInfo">
            <summary>
            Define the current PBX Agent
            </summary>
        </member>
        <member name="P:Rainbow.Model.PbxAgentInfo.PhoneApiStatus">
            <summary>
            Phone Api Status
            </summary>
        </member>
        <member name="P:Rainbow.Model.PbxAgentInfo.XmppAgentStatus">
            <summary>
            Xmpp Agent Status
            </summary>
        </member>
        <member name="P:Rainbow.Model.PbxAgentInfo.Version">
            <summary>
            Version
            </summary>
        </member>
        <member name="P:Rainbow.Model.PbxAgentInfo.Features">
            <summary>
            Features
            </summary>
        </member>
        <member name="P:Rainbow.Model.PbxAgentInfo.IsOXO">
            <summary>
            Is PBX Agent using an OXO
            </summary>
        </member>
        <member name="P:Rainbow.Model.PbxAgentInfo.IsOXE">
            <summary>
            Is PBX Agent using an OXE
            </summary>
        </member>
        <member name="M:Rainbow.Model.PbxAgentInfo.ToString">
            <summary>
            Serialize this object to String
            </summary>
            <returns><see cref="T:System.String"/> as serialization result</returns>
        </member>
        <member name="M:Rainbow.Model.PbxAgentInfo.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Rainbow.Model.PbxAgentInfo.Clear">
            <summary>
            Set object to default values
            </summary>
        </member>
        <member name="T:Rainbow.Model.Peer">
            <summary>
            Define minimal description of a Peer: Id, Jid, Type and DisplayName
            </summary>
        </member>
        <member name="P:Rainbow.Model.Peer.Id">
            <summary>
            <see cref="T:System.String"/> - Peer Id
            </summary>
        </member>
        <member name="P:Rainbow.Model.Peer.Jid">
            <summary>
            <see cref="T:System.String"/> - Peer Jid
            </summary>
        </member>
        <member name="P:Rainbow.Model.Peer.Type">
            <summary>
            <see cref="T:System.String"/> - Peer Type (see Rainbow.Model.Conversation.ConversationType)
            </summary>
        </member>
        <member name="P:Rainbow.Model.Peer.DisplayName">
            <summary>
            <see cref="T:System.String"/> - Peer DisplayName
            </summary>
        </member>
        <member name="M:Rainbow.Model.Peer.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Rainbow.Model.Peer.#ctor(Rainbow.Model.Contact)">
            <summary>
            Default constructor using a Contact object
            </summary>
            <param name="contact"><see cref="T:Rainbow.Model.Contact"/>Contact object</param>
        </member>
        <member name="M:Rainbow.Model.Peer.#ctor(Rainbow.Model.Bubble)">
            <summary>
            Default constructor using a Bubble object
            </summary>
            <param name="bubble"><see cref="T:Rainbow.Model.Bubble"/>Bubble object</param>
        </member>
        <member name="T:Rainbow.Model.Presence">
            <summary>
            Define the base of each presence - Presence Level and Presence Details
            </summary>
        </member>
        <member name="P:Rainbow.Model.Presence.Apply">
            <summary>
             True, if this presence must be used to build the aggregated presence.
            </summary>
        </member>
        <member name="P:Rainbow.Model.Presence.BasicNodeJid">
            <summary>
            The basic jid Node of the contact - see <see cref="M:Rainbow.Util.GetBasicNodeJid(System.String)"/>
            </summary>
        </member>
        <member name="P:Rainbow.Model.Presence.Resource">
            <summary>
            The resource linked to this presence
            </summary>
        </member>
        <member name="P:Rainbow.Model.Presence.PresenceLevel">
            <summary>
            <see cref="T:Rainbow.Model.PresenceLevel"/> - the presence level
            </summary>
        </member>
        <member name="P:Rainbow.Model.Presence.PresenceDetails">
            <summary>
            <see cref="T:Rainbow.Model.PresenceDetails"/> - the presence details
            </summary>
        </member>
        <member name="P:Rainbow.Model.Presence.Date">
            <summary>
            The Date when the presence has been set
            </summary>
        </member>
        <member name="P:Rainbow.Model.Presence.Until">
            <summary>
            <see cref="T:System.DateTime"/>In UTC format - The validity date until this presence is valid (if not equals to DateTime.MinValue). For calendar presenec, if date is passed, it means that the user is "available" from a calendra presence point of view
            
            If equals to DateTime.MinValue it means this field has not been set / used
            </summary>
        </member>
        <member name="P:Rainbow.Model.Presence.PresencePhoneState">
            <summary>
            The presence state of the phone (if any) - see <see cref="T:Rainbow.Model.PresencePhoneState"/> for possible values
            </summary>
        </member>
        <member name="M:Rainbow.Model.Presence.#ctor(System.String,System.String,System.Boolean,System.String,System.String)">
            <summary>
            Constructor with presence level and details
            </summary>
            <param name="jid"><see cref="T:System.String"/>Jid or basic jid none - see <see cref="M:Rainbow.Util.GetBasicNodeJid(System.String)"/></param>
            <param name="resource"><see cref="T:System.String"/>The resource linked to this presence level</param>
            <param name="apply"><see cref="T:System.Boolean"/>To know if this presence must be used to build aggregated presence</param>
            <param name="presenceLevel"><see cref="T:System.String"/>The presence level - see <see cref="T:Rainbow.Model.PresenceLevel"/> for all possible values</param>
            <param name="presenceDetails"><see cref="T:System.String"/>The presence details - see <see cref="T:Rainbow.Model.PresenceDetails"/> for all possible values - can also be null/empty</param>
        </member>
        <member name="M:Rainbow.Model.Presence.#ctor(System.String,System.String,System.Boolean,System.DateTime,System.String,System.String)">
            <summary>
            Constructor with presence level and details
            </summary>
            <param name="jid"><see cref="T:System.String"/>Jid or basic jid none - see <see cref="M:Rainbow.Util.GetBasicNodeJid(System.String)"/></param>
            <param name="resource"><see cref="T:System.String"/>The resource linked to this presence level</param>
            <param name="apply"><see cref="T:System.Boolean"/>To know if this presence must be used to build aggregated presence</param>
            <param name="date"><see cref="T:System.DateTime"/>Datetime of the presence info</param>
            <param name="presenceLevel"><see cref="T:System.String"/>The presence level - see <see cref="T:Rainbow.Model.PresenceLevel"/> for all possible values</param>
            <param name="presenceDetails"><see cref="T:System.String"/>The presence details - see <see cref="T:Rainbow.Model.PresenceDetails"/> for all possible values - can also be null/empty</param>
        </member>
        <member name="M:Rainbow.Model.Presence.#ctor(Rainbow.Model.Presence)">
            <summary>
            Constructor with presence level and details
            </summary>
            <param name="presence"><see cref="T:Rainbow.Model.Presence"/>The Presence object</param>
        </member>
        <member name="M:Rainbow.Model.Presence.ToString">
            <summary>
            To serialize this object in string - use <see cref="M:Rainbow.Util.SerializePresence(Rainbow.Model.Presence)"/>
            </summary>
            <returns><see cref="T:System.String"/> - A String</returns>
        </member>
        <member name="M:Rainbow.Model.Presence.PresenceCalendar(System.String,System.Boolean,System.String,System.String,System.DateTime)">
            <summary>
            Facilitator to create Presence for Calendar purpose
            </summary>
            <param name="jid"><see cref="T:System.String"/>Jid or basic jid none - see <see cref="M:Rainbow.Util.GetBasicNodeJid(System.String)"/></param>
            <param name="apply"><see cref="T:System.Boolean"/>To know if this presence must be used to build aggregated presence</param>
            <param name="presenceLevel"><see cref="T:System.String"/>The presence level - see <see cref="T:Rainbow.Model.PresenceLevel"/> for all possible values</param>
            <param name="presenceDetails"><see cref="T:System.String"/>The presence details - see <see cref="T:Rainbow.Model.PresenceDetails"/> for all possible values - can also be null/empty</param>
            <param name="until"><see cref="T:System.DateTime"/>The availability of this presence status - Used only if calendar context</param>
            <returns><see cref="T:Rainbow.Model.Presence"/> - Presence object</returns>
        </member>
        <member name="M:Rainbow.Model.Presence.PresencePhone(System.String,System.String)">
            <summary>
            Facilitator to create Presence for Phone purpose
            </summary>
            <param name="jid"><see cref="T:System.String"/>Jid or basic jid none - see <see cref="M:Rainbow.Util.GetBasicNodeJid(System.String)"/></param>
            <param name="presencePhoneState"><see cref="T:System.String"/>The presence state of the phone - see <see cref="T:Rainbow.Model.PresencePhoneState"/> for possible values</param>
            <returns><see cref="T:Rainbow.Model.Presence"/> - Presence object</returns>
        </member>
        <member name="T:Rainbow.Model.PresencePhoneState">
            <summary>
            The presence state of the phone
            </summary>
        </member>
        <member name="F:Rainbow.Model.PresencePhoneState.EVT_CONNECTION_CLEARED">
            <summary>
            <see cref="T:System.String"/> - The PBX service is available - the phone is not currently used
            </summary>
        </member>
        <member name="F:Rainbow.Model.PresencePhoneState.NOT_AVAILABLE">
            <summary>
            <see cref="T:System.String"/> - The PBX service is not available / operational so we don't know the presence phone
            </summary>
        </member>
        <member name="F:Rainbow.Model.PresencePhoneState.EVT_SERVICE_INITIATED">
            <summary>
            <see cref="T:System.String"/> - The PBX service is available - there is a incoming or outgoing call in ringing state
            </summary>
        </member>
        <member name="F:Rainbow.Model.PresencePhoneState.EVT_ESTABLISHED">
            <summary>
            <see cref="T:System.String"/> - The PBX service is available - there is a current call
            </summary>
        </member>
        <member name="T:Rainbow.Model.PresenceLevel">
            <summary>
            To store all presence level possible
            </summary>
        </member>
        <member name="F:Rainbow.Model.PresenceLevel.Offline">
            <summary>
            <see cref="T:System.String"/> - The contact is no more connected
            </summary>
        </member>
        <member name="F:Rainbow.Model.PresenceLevel.Online">
            <summary>
            <see cref="T:System.String"/> - The contact is connected
            </summary>
        </member>
        <member name="F:Rainbow.Model.PresenceLevel.Away">
            <summary>
            <see cref="T:System.String"/> - The contact is connected but away from a long time
            </summary>
        </member>
        <member name="F:Rainbow.Model.PresenceLevel.Dnd">
            <summary>
            <see cref="T:System.String"/> - The contact is in "Do not disturb" state
            </summary>
        </member>
        <member name="F:Rainbow.Model.PresenceLevel.Busy">
            <summary>
            <see cref="T:System.String"/> - The contact is in "Busy" state
            </summary>
        </member>
        <member name="F:Rainbow.Model.PresenceLevel.Xa">
            <summary>
            <see cref="T:System.String"/> - For current contact only - to appear offline but to stay still connected
            </summary>
        </member>
        <member name="T:Rainbow.Model.PresenceDetails">
            <summary>
            To store all presence details possible
            </summary>
        </member>
        <member name="F:Rainbow.Model.PresenceDetails.Inactive">
            <summary>
            <see cref="T:System.String"/> - The contact is inactive - it's presence level is set to Away
            </summary>
        </member>
        <member name="F:Rainbow.Model.PresenceDetails.Audio">
            <summary>
            <see cref="T:System.String"/> - The contact is in audio only conversation - it's presence level is set to Busy
            </summary>
        </member>
        <member name="F:Rainbow.Model.PresenceDetails.Video">
            <summary>
            <see cref="T:System.String"/> - The contact is in audio and video conversation - it's presence level is set to Busy
            </summary>
        </member>
        <member name="F:Rainbow.Model.PresenceDetails.Sharing">
            <summary>
            <see cref="T:System.String"/> - The contact is seeing a sharing  - it's presence level is set to Busy
            </summary>
        </member>
        <member name="F:Rainbow.Model.PresenceDetails.Presentation">
            <summary>
            <see cref="T:System.String"/> - The contact is doing a presentation - it's presence level is set to DND
            </summary>
        </member>
        <member name="F:Rainbow.Model.PresenceDetails.Phone">
            <summary>
            <see cref="T:System.String"/> - The contact is on phone - used only in Presence Phone context
            </summary>
        </member>
        <member name="F:Rainbow.Model.PresenceDetails.Appointment">
            <summary>
            <see cref="T:System.String"/> - The contact is in an appointment - used only in Presence Calendar context
            </summary>
        </member>
        <member name="F:Rainbow.Model.PresenceDetails.OutOfOffice">
            <summary>
            <see cref="T:System.String"/> - The contact is "out of office" - used only in Presence Calendar context
            </summary>
        </member>
        <member name="F:Rainbow.Model.PresenceDetails.Busy">
            <summary>
            <see cref="T:System.String"/> - The contact is busy - used only in Presence Calendar contetx
            </summary>
        </member>
        <member name="F:Rainbow.Model.PresenceDetails.Teams">
            <summary>
            <see cref="T:System.String"/> - The contact presence is relate to Teams presence - used only in Presence Teams context
            </summary>
        </member>
        <member name="T:Rainbow.Model.QuotaConsumption">
            <summary>
            To store the quota consumption of the current user
            </summary>
        </member>
        <member name="P:Rainbow.Model.QuotaConsumption.Maximum">
            <summary>
            <see cref="T:System.Int64"/> - Maximum quota in octet
            </summary>
        </member>
        <member name="P:Rainbow.Model.QuotaConsumption.Current">
            <summary>
            <see cref="T:System.Int64"/> - current value in octet
            </summary>
        </member>
        <member name="M:Rainbow.Model.QuotaConsumption.#ctor(System.Int64,System.Int64)">
            <summary>
            Default constructor
            </summary>
            <param name="max"><see cref="T:System.Int64"/>Maximum quota in octet</param>
            <param name="current"><see cref="T:System.Int64"/>Current value in octet</param>
        </member>
        <member name="T:Rainbow.Model.S2SConnection">
            <summary>
            Define a S2S connection
            </summary>
        </member>
        <member name="P:Rainbow.Model.S2SConnection.ConnectionId">
            <summary>
            Id of S2S Connection
            </summary>
        </member>
        <member name="P:Rainbow.Model.S2SConnection.CallbackUrl">
            <summary>
            Callback URL used by this S2s Connection
            </summary>
        </member>
        <member name="P:Rainbow.Model.S2SConnection.Resource">
            <summary>
            Resource used by this S2S Connection. Used to differentiate Client / SDK connected to Rainbow server
            </summary>
        </member>
        <member name="M:Rainbow.Model.S2SConnection.ToString">
            <summary>
            Serialize this object
            </summary>
            <returns><see cref="T:System.String"/>Serialized result</returns>
        </member>
        <member name="T:Rainbow.Model.StreamDevice">
            <summary>
            Define a Stream Device (used in WebRTC)
            
            Possible values for Kind are: audioinput, videoinput, audiooutput
            </summary>
        </member>
        <member name="T:Rainbow.Model.StreamDevice.KindType">
            <summary>
            Kind of stream device
            </summary>
        </member>
        <member name="F:Rainbow.Model.StreamDevice.KindType.Unknown">
            <summary>
            Unknown device
            </summary>
        </member>
        <member name="F:Rainbow.Model.StreamDevice.KindType.AudioInput">
            <summary>
            Audio Input device
            </summary>
        </member>
        <member name="F:Rainbow.Model.StreamDevice.KindType.VideoInput">
            <summary>
            Video Input device
            </summary>
        </member>
        <member name="F:Rainbow.Model.StreamDevice.KindType.AudioOutput">
            <summary>
            Audio Output device
            </summary>
        </member>
        <member name="M:Rainbow.Model.StreamDevice.KindTypeFromString(System.String)">
            <summary>
            Get KindType from String
            </summary>
            <param name="kind"><see cref="T:System.String"/>kind as a string</param>
            <returns><see cref="T:Rainbow.Model.StreamDevice.KindType"/> - KindType based on the specified string</returns>
        </member>
        <member name="M:Rainbow.Model.StreamDevice.StringFromKindType(Rainbow.Model.StreamDevice.KindType)">
            <summary>
            Get String from KindType 
            </summary>
            <param name="kind"><see cref="T:Rainbow.Model.StreamDevice.KindType"/>KindType </param>
            <returns><see cref="T:System.String"/> - String based on the specified KindType</returns>
        </member>
        <member name="P:Rainbow.Model.StreamDevice.DeviceId">
            <summary>
            Device Id
            </summary>
        </member>
        <member name="P:Rainbow.Model.StreamDevice.Kind">
            <summary>
            Kinfd of device
            </summary>
        </member>
        <member name="P:Rainbow.Model.StreamDevice.Label">
            <summary>
            Label of device
            </summary>
        </member>
        <member name="P:Rainbow.Model.StreamDevice.GroupId">
            <summary>
            Group Id of the device - useful to get Audio Input and Audio Output for the same device for example
            </summary>
        </member>
        <member name="M:Rainbow.Model.StreamDevice.#ctor(System.String,Rainbow.Model.StreamDevice.KindType,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="deviceId"><see cref="T:Rainbow.Model.StreamDevice"/>Device Id</param>
            <param name="kind"><see cref="T:Rainbow.Model.StreamDevice.KindType"/>Kind</param>
            <param name="label"><see cref="T:System.String"/>Label</param>
            <param name="groupId"><see cref="T:System.String"/>Group Id</param>
        </member>
        <member name="M:Rainbow.Model.StreamDevice.ToString">
            <summary>
            Serialize this object to string
            </summary>
            <returns><see cref="T:System.String"/> - Serialisation string</returns>
        </member>
        <member name="T:Rainbow.Model.Subscription">
            <summary>
            According the contact and its company subscriptions, the current contact has one or several profile
            </summary>
        </member>
        <member name="P:Rainbow.Model.Subscription.SubscriptionId">
            <summary>
            Id of company subscription to which user profile is assigned (one of the subscriptions available to user's company)
            </summary>
        </member>
        <member name="P:Rainbow.Model.Subscription.OfferId">
            <summary>
            Id of the Rainbow offer to which company subscription is attached
            </summary>
        </member>
        <member name="P:Rainbow.Model.Subscription.OfferName">
            <summary>
            Name of the Rainbow offer to which company subscription is attached
            </summary>
        </member>
        <member name="P:Rainbow.Model.Subscription.ProfileId">
            <summary>
            Id of the Rainbow profile to which company subscription is attached
            </summary>
        </member>
        <member name="P:Rainbow.Model.Subscription.ProfileName">
            <summary>
            Name of the Rainbow profile to which company subscription is attached
            </summary>
        </member>
        <member name="P:Rainbow.Model.Subscription.Status">
            <summary>
            Status of the company subscription to which user profile is assigned (active, alerting, hold, terminated)
            </summary>
        </member>
        <member name="P:Rainbow.Model.Subscription.IsDefault">
            <summary>
            Indicates if this profile is linked to user's company's subscription to default offer (i.e. Essential)
            </summary>
        </member>
        <member name="P:Rainbow.Model.Subscription.AssignationDate">
            <summary>
            Date when the subscription was attached to user profile
            </summary>
        </member>
        <member name="T:Rainbow.Model.SynchroProviderStatus">
            <summary>
            Define the synchronisation status with a provider
            </summary>
        </member>
        <member name="P:Rainbow.Model.SynchroProviderStatus.Type">
            <summary>
            <see cref="T:System.String"/> - The type of synchro: "calendar" or "presence"
            </summary>
        </member>
        <member name="P:Rainbow.Model.SynchroProviderStatus.Provider">
            <summary>
            <see cref="T:System.String"/> - The provider of the syncrho: "office365", "google" (for calendar) or "teams" (for presence)
            </summary>
        </member>
        <member name="P:Rainbow.Model.SynchroProviderStatus.Enabled">
            <summary>
            <see cref="T:System.Boolean"/> - To know if the synchro is enabled or not
            </summary>
        </member>
        <member name="M:Rainbow.Model.SynchroProviderStatus.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the SynchroProviderStatus class.
            </summary>
            <param name="type"><see cref="T:System.String"/>The type of synchro: "calendar" or "presence"</param>
            <param name="provider"><see cref="T:System.String"/>The provider of the synchro: "office365" or "google"</param>
            <param name="enabled"><see cref="T:System.Boolean"/>To know if the synchro is enabled or not</param>
        </member>
        <member name="T:Rainbow.Model.TeamsPresenceStateResult">
            <summary>
            Store result of Calendar State
            </summary>
        </member>
        <member name="F:Rainbow.Model.TeamsPresenceStateResult.TeamsPresenceStates">
            <summary>
            Dictionary of TeamsPresenceState objects
            </summary>
        </member>
        <member name="T:Rainbow.Model.TeamsPresenceState">
            <summary>
            Define the Teams Presence state of a contact
            </summary>
        </member>
        <member name="P:Rainbow.Model.TeamsPresenceState.Status">
            <summary>
            The Teams Presence status - See <see cref="T:Rainbow.Model.TeamsPresenceStatus"/> for possible values
            
            It's also possible to have a subscription error in
            </summary>
        </member>
        <member name="P:Rainbow.Model.TeamsPresenceState.Busy">
            <summary>
            To know is contact is busy or not
            </summary>
        </member>
        <member name="P:Rainbow.Model.TeamsPresenceState.IsEnabled">
            <summary>
            True if teams presence sharing is enabled or not
            </summary>
        </member>
        <member name="T:Rainbow.Model.TeamsPresenceStatus">
            <summary>
            Status of the Teams Presence status
            
            
            </summary>
        </member>
        <member name="F:Rainbow.Model.TeamsPresenceStatus.NONE">
            <summary>
            <see cref="T:System.String"/> - NONE - presence sharing is not defined
            </summary>
        </member>
        <member name="F:Rainbow.Model.TeamsPresenceStatus.DISABLED">
            <summary>
            <see cref="T:System.String"/> - DISABLED - presence sharing is disabled
            </summary>  
        </member>
        <member name="F:Rainbow.Model.TeamsPresenceStatus.CHAT">
            <summary>
            <see cref="T:System.String"/> - CHAT - presence status is "chat" (i.e. online)
            </summary>  
        </member>
        <member name="F:Rainbow.Model.TeamsPresenceStatus.DND">
            <summary>
            <see cref="T:System.String"/> - DND - presence status is "do not disturb"
            </summary>  
        </member>
        <member name="F:Rainbow.Model.TeamsPresenceStatus.BUSY">
            <summary>
            <see cref="T:System.String"/> - BUSY - presence status is "busy"
            </summary>  
        </member>
        <member name="F:Rainbow.Model.TeamsPresenceStatus.SUBSCRIPTION_ERROR">
            <summary>
            <see cref="T:System.String"/> - SUBSCRIPTION_ERROR - presence sharing with a expired subscription
            </summary> 
        </member>
        <member name="T:Rainbow.Model.ThemesData">
            <summary>
            Strucute use to retrieve list oh Themes
            </summary>
        </member>
        <member name="P:Rainbow.Model.ThemesData.Data">
            <summary>
            <see cref="T:System.Collections.Generic.List`1"/> - List of theme retrieved
            </summary>
        </member>
        <member name="P:Rainbow.Model.ThemesData.Total">
            <summary>
            <see cref="T:System.Int32"/> - Total of themes available
            </summary>
        </member>
        <member name="P:Rainbow.Model.ThemesData.Limit">
            <summary>
            <see cref="T:System.Int32"/> - Nb of Themes asked
            </summary>
        </member>
        <member name="P:Rainbow.Model.ThemesData.Offset">
            <summary>
            <see cref="T:System.Int32"/> - Offset used to retrieves Themes
            </summary>
        </member>
        <member name="T:Rainbow.Model.Theme">
            <summary>
            This class describe a Theme (to describe the color, layout to use)
            </summary>
        </member>
        <member name="T:Rainbow.Model.Theme.UIDefinition">
            <summary>
            Define the UI elements in a theme
            </summary>
        </member>
        <member name="P:Rainbow.Model.Theme.UIDefinition.MainBackgroundColor">
            <summary>
            <see cref="T:System.String"/> - Background color on the side of the main pane
            </summary>
        </member>
        <member name="P:Rainbow.Model.Theme.UIDefinition.SecondBackgroundColor">
            <summary>
            <see cref="T:System.String"/> - Background color inside the main pane (Bubbles, meetings, Contacts...).
            </summary>
        </member>
        <member name="P:Rainbow.Model.Theme.UIDefinition.AsideBackgroundColor">
            <summary>
            <see cref="T:System.String"/> - Background color of left pane (e.g. conversations).
            </summary>
        </member>
        <member name="P:Rainbow.Model.Theme.UIDefinition.HeaderBackgroundColor">
            <summary>
            <see cref="T:System.String"/> - Background color of top menu (The one grouping action buttons : Life, Bubbles...).
            </summary>
        </member>
        <member name="P:Rainbow.Model.Theme.UIDefinition.HeaderContrastedBackgroundColor">
            <summary>
            <see cref="T:System.String"/> - Background color of hover in top menu.
            </summary>
        </member>
        <member name="P:Rainbow.Model.Theme.UIDefinition.TabsMenuBackgroundColor">
            <summary>
            <see cref="T:System.String"/> - Background color of search bars and tabs.
            </summary>
        </member>
        <member name="P:Rainbow.Model.Theme.UIDefinition.FooterBackgroundColor">
            <summary>
            <see cref="T:System.String"/> - Background color of footer bar.
            </summary>
        </member>
        <member name="P:Rainbow.Model.Theme.UIDefinition.ContrastedBackgroundColor">
            <summary>
            <see cref="T:System.String"/> - Default color of hover in left pane.
            </summary>
        </member>
        <member name="P:Rainbow.Model.Theme.UIDefinition.ActiveBackgroundColor">
            <summary>
            <see cref="T:System.String"/> - Default color of selected item in left pane.
            </summary>
        </member>
        <member name="P:Rainbow.Model.Theme.UIDefinition.HomeTopBackgroundColor">
            <summary>
            <see cref="T:System.String"/> - Background color of left pane (e.g. conversations).
            </summary>
        </member>
        <member name="P:Rainbow.Model.Theme.UIDefinition.HomeBackgroundColor">
            <summary>
            <see cref="T:System.String"/> - Default color of the bottom background in the home page.
            </summary>
        </member>
        <member name="P:Rainbow.Model.Theme.UIDefinition.ButtonBackgroundColor">
            <summary>
            <see cref="T:System.String"/> - Background color of square button.
            </summary>
        </member>
        <member name="P:Rainbow.Model.Theme.UIDefinition.MainTitlesColor">
            <summary>
            <see cref="T:System.String"/> - Default color of titles (Bubbles, Meetings...) and selected item in top menu.
            </summary>
        </member>
        <member name="P:Rainbow.Model.Theme.UIDefinition.ContrastedTitlesColor">
            <summary>
            <see cref="T:System.String"/> - Default color of text in top menu.
            </summary>
        </member>
        <member name="P:Rainbow.Model.Theme.UIDefinition.ContrastedTextColor">
            <summary>
            <see cref="T:System.String"/> - Background color of left pane (e.g. conversations).
            </summary>
        </member>
        <member name="P:Rainbow.Model.Theme.UIDefinition.ContrastedHoverTextColor">
            <summary>
            <see cref="T:System.String"/> - Default hover color of text in top menu.
            </summary>
        </member>
        <member name="P:Rainbow.Model.Theme.UIDefinition.TextColor">
            <summary>
            <see cref="T:System.String"/> - Default color of text in left menu.
            </summary>
        </member>
        <member name="P:Rainbow.Model.Theme.UIDefinition.TextHoverColor">
            <summary>
            <see cref="T:System.String"/> - Default hover color of text in left menu.
            </summary>
        </member>
        <member name="P:Rainbow.Model.Theme.UIDefinition.TextActiveColor">
            <summary>
            <see cref="T:System.String"/> - Default color of selected text in left menu.
            </summary>
        </member>
        <member name="P:Rainbow.Model.Theme.UIDefinition.ButtonTextColor">
            <summary>
            <see cref="T:System.String"/> - Default color of text in square button.
            </summary>
        </member>
        <member name="P:Rainbow.Model.Theme.UIDefinition.BadgeCounterColor">
            <summary>
            <see cref="T:System.String"/> - Background color of counters (e.g. missed calls).
            </summary>
        </member>
        <member name="P:Rainbow.Model.Theme.UIDefinition.ContrastedIconColor">
            <summary>
            <see cref="T:System.String"/> - Default color of icon for groups contact.
            </summary>
        </member>
        <member name="P:Rainbow.Model.Theme.UIDefinition.ShadowsColor">
            <summary>
            <see cref="T:System.String"/> - Default color of shadows in main pane.
            </summary>
        </member>
        <member name="P:Rainbow.Model.Theme.UIDefinition.AsideBorderColor">
            <summary>
            <see cref="T:System.String"/> - Default color of border between conversation pane and main pane.
            </summary>
        </member>
        <member name="P:Rainbow.Model.Theme.UIDefinition.ContrastedBordersColor">
            <summary>
            <see cref="T:System.String"/> - Default color of borders in top menu.
            </summary>
        </member>
        <member name="P:Rainbow.Model.Theme.Id">
            <summary>
            <see cref="T:System.String"/> - Identifier
            </summary>
        </member>
        <member name="P:Rainbow.Model.Theme.Name">
            <summary>
            <see cref="T:System.String"/> - Name
            </summary>
        </member>
        <member name="P:Rainbow.Model.Theme.IsRainbowDefaultTheme">
            <summary>
            <see cref="T:System.Boolean"/> - Indicates if this is the default Rainbow theme.
            </summary>
        </member>
        <member name="P:Rainbow.Model.Theme.OwnedByCompany">
            <summary>
            <see cref="T:System.String"/> - Identifier of the company owning the theme (or NULL for public theme)
            </summary>
        </member>
        <member name="P:Rainbow.Model.Theme.Visibility">
            <summary>
            <see cref="T:System.String"/> - Indicates the theme's visibility: **public** or **private**
            
            **public**: the only themes which are public are themes designed by Rainbow Team. Public themes can be set as default theme for any company or users unless their administrators don't allow it.
            
            **private**: they can be used only by companies which are allowed (cf. **visibleBy**)
            </summary>
        </member>
        <member name="P:Rainbow.Model.Theme.VisibleBy">
            <summary>
            <see cref="T:System.Collections.Generic.List`1"/> - If **Visibility** is private, list of company Ids who can access the theme (other than the **OwnedByCompany** one).
            </summary>
        </member>
        <member name="P:Rainbow.Model.Theme.UIElements">
            <summary>
            <see cref="T:Rainbow.Model.Theme.UIDefinition"/> - List of UI Elements with their setting. This object may not be set for public themes.
            </summary>
        </member>
        <member name="P:Rainbow.Model.Theme.CreatedBy">
            <summary>
            <see cref="T:System.String"/> - ID of the user who created the theme
            </summary>
        </member>
        <member name="P:Rainbow.Model.Theme.CreationDate">
            <summary>
            <see cref="T:System.String"/> - Date when the theme has been created.
            </summary>
        </member>
        <member name="P:Rainbow.Model.Theme.AvatarShape">
            <summary>
            <see cref="T:System.String"/> - Theme's avatar shape customization. Allowed values: **square** (default), **circle**, **squircle**
            </summary>
        </member>
        <member name="P:Rainbow.Model.Theme.LastAvatarUpdateDate">
            <summary>
            <see cref="T:System.String"/> - Date of the latest theme avatar change (null if no avatar is set for this theme).
            </summary>
        </member>
        <member name="P:Rainbow.Model.Theme.Website">
            <summary>
            <see cref="T:System.String"/> - Theme's website URL.
            </summary>
        </member>
        <member name="T:Rainbow.Model.TurnServersConfiguration">
            <summary>
            Turns servers configuration object
            </summary>
        </member>
        <member name="P:Rainbow.Model.TurnServersConfiguration.TTL">
            <summary>
            Time to live, in seconds, for the given list of ICE servers
            </summary>
        </member>
        <member name="P:Rainbow.Model.TurnServersConfiguration.configurationDate">
            <summary>
            Date time when the configuration has been asked
            </summary>
        </member>
        <member name="P:Rainbow.Model.TurnServersConfiguration.Data">
            <summary>
            List of TurnServer objects
            </summary>
        </member>
        <member name="P:Rainbow.Model.TurnServersConfiguration.DataCenterList">
            <summary>
            List of Data Centers
            </summary>
        </member>
        <member name="T:Rainbow.Model.TurnServer">
            <summary>
            Trun server object
            </summary>
        </member>
        <member name="P:Rainbow.Model.TurnServer.Id">
            <summary>
            Turn Server Id
            </summary>
        </member>
        <member name="P:Rainbow.Model.TurnServer.Dc">
            <summary>
            Data center
            </summary>
        </member>
        <member name="P:Rainbow.Model.TurnServer.Username">
            <summary>
            Username to use for access to the server
            </summary>
        </member>
        <member name="P:Rainbow.Model.TurnServer.Credential">
            <summary>
            Password to use for access to the server
            </summary>
        </member>
        <member name="P:Rainbow.Model.TurnServer.Urls">
            <summary>
            List of Urls
            </summary>
        </member>
        <member name="T:Rainbow.Model.TV">
            <summary>
            To describe a TV device
            </summary>
        </member>
        <member name="P:Rainbow.Model.TV.Id">
            <summary>
            <see cref="T:System.String"/> - TV Id
            </summary>
        </member>
        <member name="P:Rainbow.Model.TV.UserId">
            <summary>
            <see cref="T:System.String"/> - The User Id associated to this TV
            </summary>
        </member>
        <member name="P:Rainbow.Model.TV.Name">
            <summary>
            <see cref="T:System.String"/> - Name
            </summary>
        </member>
        <member name="P:Rainbow.Model.TV.Location">
            <summary>
            <see cref="T:System.String"/> - Location of the TV
            </summary>
        </member>
        <member name="P:Rainbow.Model.TV.LocationDetail">
            <summary>
            <see cref="T:System.String"/> - More details about the location of the TV
            </summary>
        </member>
        <member name="P:Rainbow.Model.TV.Room">
            <summary>
            <see cref="T:System.String"/> - Name of the room where the TV is located.
            </summary>
        </member>
        <member name="P:Rainbow.Model.TV.CompanyId">
            <summary>
            <see cref="T:System.String"/> - Company Id linked to the TV.
            </summary>
        </member>
        <member name="P:Rainbow.Model.TV.ActivationCode">
            <summary>
            <see cref="T:System.String"/> - Activation code (6 digits). 
            
            Info not available for basic user
            </summary>
        </member>
        <member name="P:Rainbow.Model.TV.CodeUpdateDate">
            <summary>
            <see cref="T:System.String"/> - Date of last activation code update.
            
            Info not available for basic user
            </summary>
        </member>
        <member name="P:Rainbow.Model.TV.Status">
            <summary>
            <see cref="T:System.String"/> - TV status: "unassociated" (no TV user), "associated" with a TV user(the TV has been activated).
            </summary>
        </member>
        <member name="P:Rainbow.Model.TV.SubscriptionId">
            <summary>
            <see cref="T:System.String"/> - Subscription to use when activating TV.
            </summary>
        </member>
        <member name="P:Rainbow.Model.TV.ActivationCodeGenerationStatus">
            <summary>
            <see cref="T:System.String"/> - Status the activation code generation: "done" (if the activation code generation is successful), "in_progress" (if the activation code generation failed and the security mechanism is ongoing to try to generate it again every minute)
            </summary>
        </member>
        <member name="M:Rainbow.Model.TV.ToString">
            <summary>
            Serialize this object to String
            </summary>
            <returns><see cref="T:System.String"/> as serialization result</returns>
        </member>
        <member name="T:Rainbow.Model.TVsResult">
            <summary>
            To store TV result
            </summary>
        </member>
        <member name="P:Rainbow.Model.TVsResult.Data">
            <summary>
            Store list of Bots
            </summary>
        </member>
        <member name="P:Rainbow.Model.TVsResult.Total">
            <summary>
            To know the total number of Bots available
            </summary>
        </member>
        <member name="P:Rainbow.Model.TVsResult.Limit">
            <summary>
            The limit used to get this result
            </summary>
        </member>
        <member name="P:Rainbow.Model.TVsResult.Offset">
            <summary>
            The offset used to get this result
            </summary>
        </member>
        <member name="T:Rainbow.Model.VoiceMessage">
            <summary>
            This class represents a voice message let in its voice mail
            
            The current user must have the permission to use the telephony service and a voice mail to have voice messages
            </summary>
        </member>
        <member name="P:Rainbow.Model.VoiceMessage.Id">
            <summary>
            Id of the message
            </summary>
        </member>
        <member name="P:Rainbow.Model.VoiceMessage.PhoneNumber">
            <summary>
            Phone number of the caller who let this voice message
            </summary>
        </member>
        <member name="P:Rainbow.Model.VoiceMessage.Jid">
            <summary>
            Jid of the caller who let this voice message (if it a known Rainbow user)
            </summary>
        </member>
        <member name="P:Rainbow.Model.VoiceMessage.DisplayName">
            <summary>
            Display Name of the caller (if available)
            </summary>
        </member>
        <member name="P:Rainbow.Model.VoiceMessage.FirstName">
            <summary>
            First Name of the caller (if available)
            </summary>
        </member>
        <member name="P:Rainbow.Model.VoiceMessage.LastName">
            <summary>
            First Name of the caller (if available)
            </summary>
        </member>
        <member name="P:Rainbow.Model.VoiceMessage.Unread">
            <summary>
            To know if the message has been read or not
            </summary>
        </member>
        <member name="P:Rainbow.Model.VoiceMessage.Callable">
            <summary>
            Does the caller can be called back or not
            </summary>
        </member>
        <member name="P:Rainbow.Model.VoiceMessage.Duration">
            <summary>
            Duration on the voice message in seconds
            </summary>
        </member>
        <member name="P:Rainbow.Model.VoiceMessage.Date">
            <summary>
            Date of the voice message
            </summary>
        </member>
        <member name="M:Rainbow.Model.VoiceMessage.ToString">
            <summary>
            Serialize this object in a string
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rainbow.Model.VoiceMessageNumber">
            <summary>
            To get info about voice messages: nb unread and total
            </summary>
        </member>
        <member name="P:Rainbow.Model.VoiceMessageNumber.Unread">
            <summary>
            Unread voice messages
            </summary>
        </member>
        <member name="P:Rainbow.Model.VoiceMessageNumber.Total">
            <summary>
            Total voice messages
            </summary>
        </member>
        <member name="M:Rainbow.Calls.RemovePbxCallWithSameCallRef(System.String)">
            <summary>
            Remove all Pbx Call having the same call ref
            </summary>
            <param name="callRef"></param>
        </member>
        <member name="M:Rainbow.Calls.GetPbxCallByCallRef(System.String)">
            <summary>
            Return the call having the sasme call ref that the one specified
            </summary>
            <param name="callRef"></param>
            <returns><see cref="T:Rainbow.Model.Call"/> - The call object found or NULL</returns>
        </member>
        <member name="P:Rainbow.Private.ChannelItemsPool.ChannelId">
            <summary>
            The channel ID which contains this messages pool
            </summary>
        </member>
        <member name="M:Rainbow.Private.ChannelItemsPool.#ctor(System.String,System.String)">
            <summary>
            To create a new itles pool related to the specified channel id
            </summary>
            <param name="channelId">ID of the conversation which contains this messages pool</param>
            <param name="loggerPrefix">Preifx to use for log entriesl</param>
        </member>
        <member name="M:Rainbow.Private.ChannelItemsPool.GetListFromCache">
            <summary>
            Return the full list of messages already stored
            </summary>
            <returns><see cref="T:List{Message}"/> - List of messages found in the cache</returns>
        </member>
        <member name="P:Rainbow.Private.MessagesPool.ConversationId">
            <summary>
            The conversation ID which contains this messages pool
            </summary>
        </member>
        <member name="P:Rainbow.Private.MessagesPool.ConversationJid">
            <summary>
            The conversation JID which contains this messages pool
            </summary>
        </member>
        <member name="P:Rainbow.Private.MessagesPool.MessageIdToFound">
            <summary>
            The message Id to found if this message pool is used for this
            </summary>
        </member>
        <member name="P:Rainbow.Private.MessagesPool.OlderMessagesArchivedAvailable">
            <summary>
            Does older messages archived could be available on server side ?
            
            True by default - False when all messages archived wil be retrieved from server
            </summary>
        </member>
        <member name="M:Rainbow.Private.MessagesPool.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            To create a new messages pool related to the specified conversation id
            </summary>
            <param name="conversationId">ID of the conversation which contains this messages pool</param>
            <param name="conversationJid">JID of the conversation which contains this messages pool</param>
            <param name="currentContactJid">JID of the current contact</param>
            <param name="loggerPrefix">Prefix to use to log entries</param>
        </member>
        <member name="M:Rainbow.Private.MessagesPool.GetListFromCache">
            <summary>
            Return the full list of messages already stored
            </summary>
            <returns><see cref="T:List{Message}"/> - List of messages found in the cache</returns>
        </member>
        <member name="M:Rainbow.Private.MessagesPool.GetMessageById(System.String)">
            <summary>
            Get the message accoording the specified message ID
            </summary>
            <param name="messageId">ID of the messafe to found</param>
            <returns><see cref="T:Rainbow.Model.Message"/> - Message object or NULL if not found</returns>
        </member>
        <member name="M:Rainbow.Private.MessagesPool.GetConversationId(System.String)">
            <summary>
            Get the conversationID wheer the specified message Id is used
            </summary>
            <param name="messageId"><see cref="T:System.String"/>ID of the Message</param>
            <returns></returns>
        </member>
        <member name="P:Rainbow.Private.Model.Feature.FeatureId">
            <summary>
            Feature unique identifier
            </summary>
        </member>
        <member name="P:Rainbow.Private.Model.Feature.FeatureUniqueRef">
            <summary>
            Feature unique reference (to be used for controls on limitations linked to this feature in server/client code)
            </summary>
        </member>
        <member name="P:Rainbow.Private.Model.Feature.FeatureName">
            <summary>
            Feature Name
            </summary>
        </member>
        <member name="P:Rainbow.Private.Model.Feature.FeatureType">
            <summary>
            Feature limitation type (boolean, number, string, undefined)
            </summary>
        </member>
        <member name="P:Rainbow.Private.Model.Feature.IsEnabled">
            <summary>
            In case feature has type boolean (on/off), is the feature enabled
            </summary>
        </member>
        <member name="P:Rainbow.Private.Model.Feature.LimitMin">
            <summary>
            In case feature has type number, limit min of the feature (if applicable)
            </summary>
        </member>
        <member name="P:Rainbow.Private.Model.Feature.LimitMax">
            <summary>
            In case feature has type number, limit max of the feature (if applicable)
            </summary>
        </member>
        <member name="P:Rainbow.Private.Model.Feature.AddedDate">
            <summary>
            Date when the feature was updated for the profile
            </summary>
        </member>
        <member name="P:Rainbow.Private.Model.Feature.LastUpdateDate">
            <summary>
            Date when the feature was updated for the profile
            </summary>
        </member>
        <member name="M:Rainbow.Private.Model.Feature.ToString">
            <summary>
            Serialize this object to String
            </summary>
            <returns><see cref="T:System.String"/> as serialization result</returns>
        </member>
        <member name="M:Rainbow.Private.S2SClient.SetS2SCallbackUrl(System.String)">
            <summary>
            To specify to callback URL
            </summary>
            <param name="callbackUrl">The callback URL to set - for example: https://thirdPartyApp.com/api </param>
        </member>
        <member name="T:Rainbow.Restrictions">
            <summary>
            To get / set restrictions usage of the SDK
            
            According the way this SDK is used, for performance reasons, it's recommended to set some restrictions
            
            For example in BOT context, it's better to set **MessageNotStored** to **true**, **ConversationsRetrievedFormat** to **"small"** and **SendReadReceipt** to **true**
            </summary>
        </member>
        <member name="T:Rainbow.Restrictions.SDKEventMode">
            <summary>
            List all events mode of the SDK.
            </summary>
        </member>
        <member name="F:Rainbow.Restrictions.SDKEventMode.XMPP">
            <summary>
            XMPP mode - default mode. XMPP server is used to receive events and manage IM features
            </summary>
        </member>
        <member name="F:Rainbow.Restrictions.SDKEventMode.S2S">
            <summary>
            S2S mode. A callback URL must be set to receive events. IM features are done without XMPP.
            Few SDK events / methods are not available in this mode. See online documentation on the developer web site for the full details.
            </summary>
        </member>
        <member name="F:Rainbow.Restrictions.SDKEventMode.NONE">
            <summary>
            No event mode used. The SDK is used only to perform REST call
            </summary>
        </member>
        <member name="T:Rainbow.Restrictions.SDKMessageStorageMode">
            <summary>
            List all storage modes of message .
            </summary>
        </member>
        <member name="F:Rainbow.Restrictions.SDKMessageStorageMode.Unknown">
            <summary>
            We don"t know the strogare mode used
            </summary>
        </member>
        <member name="F:Rainbow.Restrictions.SDKMessageStorageMode.Store">
            <summary>
            Default mode - When a message is sent, it will be stored by the server. So both, sender and receiver will retrieve it as archive even after reconnection.
            </summary>
        </member>
        <member name="F:Rainbow.Restrictions.SDKMessageStorageMode.NoPermanentStore">
            <summary>
            The server will store the message, for the receiver ONLY, UNTIL he receives it. This message will not be available as archive.
            </summary>
        </member>
        <member name="F:Rainbow.Restrictions.SDKMessageStorageMode.NoStore">
            <summary>
            The server will not store the message. If the receiver is not connected when the message is sent, he will never receive the message.
            </summary>
        </member>
        <member name="P:Rainbow.Restrictions.StreamManagement">
            <summary>
            True to use Stream Management: allow to reconnect more efficently to the server (BETA)
            
            It's used only if **EventMode = SDKEventMode.XMPP**
            
            Allow to resume up to 2/3 minutes after disconnection only if **MobileApplication = False** due to server limitations
            
            Allow to resume up to 24 hours if **MobileApplication = true** (can be renew 21 days)
            
            It's set to false by default
            </summary>
        </member>
        <member name="P:Rainbow.Restrictions.AutoReconnection">
            <summary>
            True to use <see cref="P:Rainbow.Restrictions.AutoReconnection"/> service to try to reconnect auomatically to the server in case of network trouble
            
            It's set to false by default
            </summary>
        </member>
        <member name="P:Rainbow.Restrictions.MobileApplication">
            <summary>
            True if ths SDK is used in a Mobile application context. It's important to set this correctly to have presence level correct is this context.
            
            It's set to false by default
            </summary>
        </member>
        <member name="P:Rainbow.Restrictions.EventMode">
            <summary>
            To get / set the event mode used by the SDK. Must be set before to Login and must not be changed after  ...
            </summary>
        </member>
        <member name="P:Rainbow.Restrictions.AlertMessage">
            <summary>
            True to support Alert Message
            
            It's set to **False** by default
            </summary>
        </member>
        <member name="P:Rainbow.Restrictions.SendReadReceipt">
            <summary>
            True to send automatically a read receipt when a message (or an alert message) is received - can be useful in BOT context
            
            It's set to **False** by default
            </summary>
        </member>
        <member name="P:Rainbow.Restrictions.SendMessageToConnectedUser">
            <summary>
            True to allow to send message to oneself
            
            It's set to **False** by default
            </summary>
        </member>
        <member name="P:Rainbow.Restrictions.MessageStorageMode">
            <summary>
            To set the storage mode applied to all messages sent. By default **Store** mode is used.
            
            If the SDK is used in BOT context it's highly recommended, for performance reasons, to use other modes: **NoPermanentStore** and **NoStore** (see **SDKMessageStorageMode** enum)
            </summary>
        </member>
        <member name="P:Rainbow.Restrictions.MessageMaxLength">
            <summary>
            Maximum size of messages send by rainbow. Note that this value should not be modified without ALE Agreement
            
            It's set to **16384** by default
            </summary>
        </member>
        <member name="P:Rainbow.Restrictions.ConversationsRetrievedFormat">
            <summary>
            **"small"** to avoid to get **LastMessageText**, **LastMessageDate**, **UnreceivedMessageNumber**, **UnreadMessageNumber**, **LastAvatarUpdateDate** in <see cref="T:Rainbow.Model.Conversation"/> when asking list of Conversations to the server.
            
            **"full"** to have them
            
            It's set to **full** by default - for BOT context it's better to use 'small' for performance reason
            </summary>
        </member>
        <member name="P:Rainbow.Restrictions.UseSameResourceId">
            <summary>
            True to use the same "resource id" in XMPP messages each time the SDK is used. The INI File is used to store it.
            
            It's set to **True** by default
            </summary>
        </member>
        <member name="P:Rainbow.Restrictions.UseWebRTC">
            <summary>
            Must be set to true if WebRTC is used.
            
            It's set to **False** by default
            </summary>
        </member>
        <member name="P:Rainbow.Restrictions.UseConferences">
            <summary>
            Must be set to true if you wan to use conferences
            
            It's set to **True** by default
            </summary>
        </member>
        <member name="P:Rainbow.Restrictions.UseAPIConferenceV2">
            <summary>
            This property is no more used. Whatever its value, API Conference V2 is now the only version supported on the server side
            
            It's set to **True** by default
            </summary>
        </member>
        <member name="P:Rainbow.Restrictions.UseMessageEditionAndDeletionV2">
            <summary>
            This property is no more used. Whatever its value, MessageEditionAndDeletion V2 is now the only version supported on the server side
            
            It's set to **True** by default
            </summary>
        </member>
        <member name="P:Rainbow.Restrictions.LogSdkResultOnError">
            <summary>
            To log all SdkResult if an error is raised
            
            It's set to **True** by default
            </summary>
        </member>
        <member name="P:Rainbow.Restrictions.ChunkSizeUpload">
            <summary>
            Size (in bytes) of the chunck used when a file is uploaded - Default value 1048576 (1024 * 1024 bytes => 1 Mb)
            </summary>
        </member>
        <member name="P:Rainbow.Restrictions.ChunkSizeDownload">
            <summary>
            Size (in bytes) of the chunck used when a file is downloaded - Default value 5242880 (1024 * 1024  * 5 bytes => 5 Mb)
            </summary>
        </member>
        <member name="P:Rainbow.Restrictions.MaxChunkSizeUpload">
            <summary>
            Maximum size (in bytes) of the chunck authorized by the server when a file is uploaded (read only)
            
            Its valus is set once the initilization process is done
            </summary>
        </member>
        <member name="P:Rainbow.Restrictions.MaxChunkSizeDownload">
            <summary>
            Maximum size (in bytes) of the chunck authorized by the server when a file is downloaded (read only)
            
            Its valus is set once the initilization process is done
            </summary>
        </member>
        <member name="T:Rainbow.S2SEventPipe">
            <summary>
            Object used to parse event received in S2S context only from a callback URL
            </summary>
        </member>
        <member name="M:Rainbow.S2SEventPipe.ParseCallbackContent(System.String,System.String,System.String)">
            <summary>
            Method used to parse the content receive in the callback
            According the content, the HTTP Vebr and the Path, SDK events are raised in consequence
            </summary>
            <param name="httpVerb"><see cref="T:System.String"/> HTTP Verb used in the callback</param>
            <param name="requestedPath"><see cref="T:System.String"/> Path used in the callback</param>
            <param name="content"><see cref="T:System.String"/> Content (body) received in the callback</param>
            <returns><see cref="T:System.Boolean"/>True is the parsing has been done successfully</returns>
        </member>
        <member name="M:Rainbow.S2SEventPipe.GetCurrentConnection">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rainbow.S2SEventPipe.DeleteCurrentConnection(System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            Delete current S2S connection
            </summary>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.S2SEventPipe.DeleteConnection(System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            Delete a S2S connection still available on server side
            </summary>
            <param name="connectionId"><see cref="T:System.String"/>ID of the S2S connection to delete</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.S2SEventPipe.GetConnectionsList(System.Action{Rainbow.SdkResult{System.Collections.Generic.List{Rainbow.Model.S2SConnection}}})">
            <summary>
            Get list of S2S Connection created and still available on server side
            </summary>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{List{S2SConnection}}"/>Callback fired when the operation is done - <see cref="T:System.Collections.Generic.List`1"/> is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="T:Rainbow.SdkResult`1">
            <summary>
            Object used in callback to know if the use of the SDK was successful or not
            
            **Data** member contains the object expected when the operation is a success
            
            **Result** member (see <see cref="T:Rainbow.SdkError"/>) permits to know if the opration is a success or not .
            </summary>
            <typeparam name="T">Object return when the use of the SDK is successful - default value if failed</typeparam>
        </member>
        <member name="P:Rainbow.SdkResult`1.Data">
            <summary>
            Object returned when the use of the SDK is successful - default value if failed
            </summary>
        </member>
        <member name="F:Rainbow.SdkResult`1.Result">
            <summary>
            To know if the operation is a success or not. See <see cref="T:Rainbow.SdkError"/> object for more details.
            </summary>
        </member>
        <member name="M:Rainbow.SdkResult`1.#ctor(`0)">
            <summary>
            Constructor using Template Object
            </summary>
        </member>
        <member name="M:Rainbow.SdkResult`1.#ctor(System.Byte[])">
            <summary>
            Constructor using byte array
            </summary>
        </member>
        <member name="M:Rainbow.SdkResult`1.#ctor(System.Object)">
            <summary>
            Constructor using any object
            
            Manage these objects:
             - <see cref="T:Rainbow.SdkError"/>
             - <see cref="T:RestSharp.IRestResponse"/>
             - <see cref="T:RestSharp.IRestResponse`1"/>
             - <see cref="T:System.Exception"/>
             - <see cref="T:Rainbow.SdkIncorrectUseError"/>
             - <see cref="T:System.String"/>
             
            In other cases, an emtpy <see cref="T:Rainbow.SdkError"/> is created
            </summary>
        </member>
        <member name="M:Rainbow.SdkResult`1.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor using String object and allow to avoid to treat it as en error
            </summary>
        </member>
        <member name="T:Rainbow.SdkError">
            <summary>
            Permits to know if the use of the SDK is a success or not using **Success** attribute
            
            There is several kinds of error: 
            - Exception: Due to network trouble or Code exception ...
            - Incorrect use of the SDK: Bad values used, conflict, bad permissions ...
            </summary>
        </member>
        <member name="T:Rainbow.SdkError.SdkErrorType">
            <summary>
            Define the kind of error
            </summary>
        </member>
        <member name="F:Rainbow.SdkError.SdkErrorType.IncorrectUse">
            <summary>
            Bad values used, conflict, bad permissions ...
            </summary>
        </member>
        <member name="F:Rainbow.SdkError.SdkErrorType.Exception">
            <summary>
            An exception has occurred: Network trouble or code Exception
            </summary>
        </member>
        <member name="F:Rainbow.SdkError.SdkErrorType.NoError">
            <summary>
            No error occurs
            </summary>
        </member>
        <member name="F:Rainbow.SdkError.ResponseStatus">
            <summary>
            ResponseStatus.Completed if operation is a success
            </summary>
        </member>
        <member name="F:Rainbow.SdkError.HttpStatusCode">
            <summary>
            HttpStatusCode. Ok if operation is a success
            </summary>
        </member>
        <member name="F:Rainbow.SdkError.Success">
            <summary>
            True if operation is a success or False
            </summary>
        </member>
        <member name="F:Rainbow.SdkError.Type">
            <summary>
            To know the kind of errors - see <see cref="T:Rainbow.SdkError.SdkErrorType"/> for list of possible errors
            </summary>
        </member>
        <member name="F:Rainbow.SdkError.Resource">
            <summary>
            Resource used (URI)
            </summary>
        </member>
        <member name="F:Rainbow.SdkError.Method">
            <summary>
            Method used (GET, POST, PUT, ...)
            </summary>
        </member>
        <member name="F:Rainbow.SdkError.RequestBody">
            <summary>
            Body used in the request
            </summary>
        </member>
        <member name="F:Rainbow.SdkError.ExceptionError">
            <summary>
            <see cref="T:System.Exception"/> object - null if this kind of error not occurs
            </summary>
        </member>
        <member name="F:Rainbow.SdkError.IncorrectUseError">
            <summary>
            <see cref="T:Rainbow.SdkIncorrectUseError"/> object - null if this kind of error not occurs
            </summary>
        </member>
        <member name="M:Rainbow.SdkError.ToString">
            <summary>
            Return a textual representation of this object
            </summary>
        </member>
        <member name="T:Rainbow.SdkIncorrectUseError">
            <summary>
            Permit to detail the error when there is an incorrect use of the SDK
            
            see <a href="/doc/sdk/csharp/core/guides/145_server_errors_list.md"/> for list of all potential errors returned by the server
            
            </summary>
        </member>
        <member name="P:Rainbow.SdkIncorrectUseError.ErrorCode">
            <summary>
            Error code (integer)
            </summary>
        </member>
        <member name="P:Rainbow.SdkIncorrectUseError.ErrorMsg">
            <summary>
            Error message
            </summary>
        </member>
        <member name="P:Rainbow.SdkIncorrectUseError.ErrorDetails">
            <summary>
            Error details - can be null
            </summary>
        </member>
        <member name="P:Rainbow.SdkIncorrectUseError.ErrorDetailsData">
            <summary>
            Error details data - can be null
            </summary>
        </member>
        <member name="P:Rainbow.SdkIncorrectUseError.ErrorDetailsCode">
            <summary>
            Error details code (integer)
            </summary>
        </member>
        <member name="M:Rainbow.SdkIncorrectUseError.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Rainbow.SdkIncorrectUseError.#ctor(System.String)">
            <summary>
            Constructor using error Message
            </summary>
        </member>
        <member name="M:Rainbow.SdkIncorrectUseError.#ctor(Rainbow.SdkIncorrectUseError)">
            <summary>
            Constructor from SdkIncorrectUseError object
            </summary>
        </member>
        <member name="M:Rainbow.SdkIncorrectUseError.ToString">
            <summary>
            Return a textual representation of this object
            </summary>
        </member>
        <member name="T:Rainbow.StreamManagement">
            <summary>
            **Alpha version** Don't use yet in production environment
            
            Handle Stream Management feature to increase reconnection process with the XMPP server
            
            This service is used only if Restrictions.StreamManagement = true and Restrictions.EventMode = SDKEventMode.XMPP
            </summary>
        </member>
        <member name="E:Rainbow.StreamManagement.StreamManagementFailed">
            <summary>
            Event raised when Stream Management process failed. A reconnexion is necessary and all info in cache will be cleared.
            </summary>
        </member>
        <member name="E:Rainbow.StreamManagement.StreamManagementResumed">
            <summary>
            Event raised when Stream Management resume process succeed.
            </summary>
        </member>
        <member name="P:Rainbow.StreamManagement.ResumeId">
            <summary>
            ID to the resume
            </summary>
        </member>
        <member name="P:Rainbow.StreamManagement.LastStanzasReceivedHandled">
            <summary>
            Last Stanzas Received and Handled
            </summary>
        </member>
        <member name="P:Rainbow.StreamManagement.LastStanzasSentHandled">
            <summary>
            Last Stanzas Sent and Handled
            </summary>
        </member>
        <member name="T:Rainbow.Telephony">
             <summary>
             This object is available only using <see cref="M:Rainbow.Application.GetTelephony"/> from <see cref="T:Rainbow.Application"/> object.
             
             This service manage PBX phone associated to the current user.
            
             If you don't have this service activated for your Rainbow user, all these methods will return an error when called.
            
             The main methods and events proposed in that service allow :
             * To know if this service is activated or not for the connected user,
             * To know the nomadic status and manage it
             * To know the call forward status and manage it
             * To handle telephony services: Make / Take / Release call, Hold / Retrieve a call,
             * To listen to call state update
             
             An internal cache is used to store current PBX calls. It possible to acces to them using <see cref="M:Rainbow.Telephony.GetActiveCall"/> and <see cref="M:Rainbow.Telephony.GetCalls"/>.
             This cache is deleted automatically if current user is disconnected
             
             End-user could use two devices in same time: the MAIN and the  SECONDARY device. 
             
             When the SECONDARY is used (cf. <see cref="M:Rainbow.Telephony.SecondaryDeviceUsed"/>) you can only successfully handle telephony services on PBX calls using it.
            
             According the agent version deployed, some services can return an error (unavailable service) when called
             </summary>
        </member>
        <member name="E:Rainbow.Telephony.TelephonyStatusUpdated">
            <summary>
            Event fired when the status of the telephony service is updated
            
            The <see cref="T:Rainbow.Events.TelephonyStatusEventArgs" /> object permits to know the telephony status
            </summary>
        </member>
        <member name="E:Rainbow.Telephony.NomadicStatusUpdated">
            <summary>
            Event fired when the nomadic status is updated
            
            The <see cref="T:Rainbow.Events.NomadicStatusEventArgs" /> object permits to know the nomadic status
            </summary>
        </member>
        <member name="E:Rainbow.Telephony.CallForwardStatusUpdated">
            <summary>
            Event fired when the call forward status is updated
            
            The <see cref="T:Rainbow.Events.CallForwardStatusEventArgs" /> object permits to know the call forward status
            </summary>
        </member>
        <member name="E:Rainbow.Telephony.PBXAgentInfoUpdated">
            <summary>
            Event fired when the PBX Agent information is received / updated
            
            The <see cref="T:Rainbow.Events.PBXAgentInfoEventArgs" /> object permits to know the PBX Agent information
            </summary>
        </member>
        <member name="E:Rainbow.Telephony.VoiceMessagesNumberUpdated">
            <summary>
            Event fired when the number of voice messages is updated
            
            The <see cref="T:Rainbow.Events.VoiceMessagesNumberEventArgs" /> object permits to know the number of voice messages
            </summary>
        </member>
        <member name="E:Rainbow.Telephony.CallUpdated">
            <summary>
            Event fired when a call has been updated - here it will be always a call using a PBX
            
            When the SDK is launched, if a PBX call is already in progress, this event is fired to know this call status
            
            The <see cref="T:Rainbow.Events.CallEventArgs" /> object permits to know the call status
            </summary>
        </member>
        <member name="E:Rainbow.Telephony.CallFailed">
            <summary>
            Event fired when a call failed - here it will be always a call using a PBX
            
            The <see cref="T:Rainbow.Events.CallIdEventArgs" /> object permits to know the call id
            </summary>
        </member>
        <member name="M:Rainbow.Telephony.GetTelephonyStatus">
            <summary>
            To know the status of the telephony service.
            
            It's better to handle <see cref="E:Rainbow.Telephony.TelephonyStatusUpdated"/> event to know this status
            </summary>
            <returns><see cref="T:System.Boolean"/> - True if service available</returns>
        </member>
        <member name="M:Rainbow.Telephony.GetPBXAgentInformation">
            <summary>
            To know the PBX Agent information.
            
            It's better to handle <see cref="E:Rainbow.Telephony.PBXAgentInfoUpdated"/> event  to know the info
            </summary>
            <returns><see cref="T:Rainbow.Model.PbxAgentInfo"/> - The PbxAgentInfo object</returns>
        </member>
        <member name="M:Rainbow.Telephony.GetMediaPillarInfo">
            <summary>
            To know the Media Pillar information.
            </summary>
            <returns><see cref="T:Rainbow.Model.MediaPillarInfo"/> - The MediaPillarInfo object</returns>
        </member>
        <member name="M:Rainbow.Telephony.IsVirtualTerminal">
            <summary>
            To know if current user is using a virtual terminal.
            
            It's not possible to deactivate nomadic on virtual terminal
            </summary>
            <returns><see cref="T:System.Boolean"/> - True if computer mode is available</returns>
        </member>
        <member name="M:Rainbow.Telephony.VoiceMailAvailable">
            <summary>
            To know if the current user has a voice mail available
            </summary>
            <returns><see cref="T:System.Boolean"/> True if user has a voice mail</returns>
        </member>
        <member name="M:Rainbow.Telephony.GetVoiceMailPhoneNumber">
            <summary>
            Return the voice mail phone number or NULL if current user has no voice mail
            </summary>
            <returns><see cref="T:System.String"/> - Voice mail phone number</returns>
        </member>
        <member name="M:Rainbow.Telephony.GetNumberOfVoiceMessages">
            <summary>
            To know the number of voice messages in the voice mail of the current user
            
            It's better to handle <see cref="E:Rainbow.Telephony.VoiceMessagesNumberUpdated"/> event to know this status
            </summary>
            <returns><see cref="T:System.Int32"/> - The number of voice messages</returns>
        </member>
        <member name="M:Rainbow.Telephony.GetVoiceMessagesList(System.Action{Rainbow.SdkResult{System.Collections.Generic.List{Rainbow.Model.VoiceMessage}}})">
            <summary>
            Get the list of voice messages
            
            For the moment, this API is working only on OXO PBX system
            </summary>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{List{VoiceMessage}}}"/>Callback fired when the operation is done -  List of VoiceMessage objects is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Telephony.GetVoiceMessagesNumber(System.Action{Rainbow.SdkResult{Rainbow.Model.VoiceMessageNumber}})">
            <summary>
            Get voice messages counters, total and unlistened.
            For a user, which has a voice mail box, it is possible to get the number of not yet listened message(aka unread messages).
            When possible the total number of messages is also given.
            Some VoiceMail units only gives if the users has or not one or more messages in his box, the number of them is unknown.
            </summary>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{VoiceMessageNumber}}"/>Callback fired when the operation is done -  List of VoiceMessage objects is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Telephony.DeleteVoiceMessage(System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            Delete a voice message
            
            For the moment, this API is working only on OXO PBX system
            </summary>
            <param name="id"><see cref="T:System.String"/>Id of the voice message to delete</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done -  True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>   
        </member>
        <member name="M:Rainbow.Telephony.AskVoiceMessageFileInformation(System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            Ask the server to have information about the voice message file
            
            The callback ensure that the action has been well taken into account or not
            
            For the moment, this API is working only on OXO PBX system
            
            The <see cref="E:Rainbow.FileStorage.VoiceMessageUpdated"/> event in <see cref="T:Rainbow.FileStorage"/> service will be fired to get information about the voice message file itself
            </summary>
            <param name="id"><see cref="T:System.String"/> Id of the voice message</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done -  True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Telephony.NomadicOnComputerAvailable">
            <summary>
            To know if it's possible to set nomadic on computer mode
            </summary>
            <returns><see cref="T:System.Boolean"/> - True if computer mode is available</returns>
        </member>
        <member name="M:Rainbow.Telephony.GetNomadicStatus">
            <summary>
            To get the nomadic status of the current user
            </summary>
            <returns><see cref="T:Rainbow.Model.NomadicStatus"/> - The nomadic status</returns>
        </member>
        <member name="M:Rainbow.Telephony.ActivateNomadicStatusToComputer(System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            Activate nomadic status to computer mode
            </summary>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done -  True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Telephony.ActivateNomadicStatusToPhoneNumber(System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            Activate  nomadic status to specified phone number
            </summary>
            <param name="phoneNumber"><see cref="T:System.String"/>The phone number</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done -  True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Telephony.DeactivateNomadicStatus(System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            Deactivate  nomadic status
            
            It's not possible to deactivate nomadic status if a virtual terminal is used
            </summary>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done -  True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Telephony.SecondaryDeviceUsed">
            <summary>
            To know if it's the secondary device to use for incoming or outgoing call.
            </summary>
            <returns><see cref="T:System.Boolean"/> - True if the secondary device is used</returns>
        </member>
        <member name="M:Rainbow.Telephony.GetCallForwardStatus">
            <summary>
            To get the call forward status of the current user
            </summary>
            <returns><see cref="T:Rainbow.Model.CallForwardStatus"/> - The call forward status</returns>
        </member>
        <member name="M:Rainbow.Telephony.ActivateCallForwardOnVoiceMail(System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            Activate forward call to the voice mail
            </summary>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done -  True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Telephony.ActivateCallForwardOnPhoneNumber(System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            Activate call forward to the specified phone number.
            
            If you want to forward call to voice mail use <see cref="M:Rainbow.Telephony.ActivateCallForwardOnVoiceMail(System.Action{Rainbow.SdkResult{System.Boolean}})"/> instead.
            </summary>
            <param name="phoneNumber"><see cref="T:System.String"/>Phone number</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done -  True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Telephony.DeactivateCallForward(System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            Deactivate call forward.
            </summary>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done -  True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Telephony.ConferenceCallAvailable">
            <summary>
            To know if the current user can make PBX conference call
            </summary>
            <returns><see cref="T:System.Boolean"/> - True if PBX conference call is available </returns>
        </member>
        <member name="M:Rainbow.Telephony.TransferCallAvailable">
            <summary>
            To know if the current user can transfer
            </summary>
            <returns><see cref="T:System.Boolean"/> - True if transfer call is available </returns>
        </member>
        <member name="M:Rainbow.Telephony.DeflectCallAvailable">
            <summary>
            To know if the current user can deflect call
            </summary>
            <returns><see cref="T:System.Boolean"/> - True if deflect call is available </returns>
        </member>
        <member name="M:Rainbow.Telephony.GetActiveCall">
            <summary>
            Get active PBX call from the cache - There is always up to one active call in sametime
            </summary>
            <returns><see cref="T:Rainbow.Model.Call"/> - The active PBX Call or NULL if not found</returns>
        </member>
        <member name="M:Rainbow.Telephony.GetCalls">
            <summary>
            Get PBX calls in progress from the cache
            </summary>
            <returns>List of <see cref="T:Rainbow.Model.Call"/> in progress</returns>
        </member>
        <member name="M:Rainbow.Telephony.MakeCall(System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.Call}})">
            <summary>
            Call a number. Only canonical number or internal number are allowed
            
            All devices which can manage this call will propose to accept it
            
            </summary>
            <param name="phoneNumber"><see cref="T:System.String"/>The number to call</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{String}}"/>Callback fired when the operation is done -  A call object is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs (Call.Id and Call.GloballCallId are only available)</param>
        </member>
        <member name="M:Rainbow.Telephony.MakeCall(System.String,System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.Call}})">
            <summary>
            Call a number. Only canonical number or internal number are allowed
            
            if **resourceID** is set to null, current resourceId is used - see <see cref="M:Rainbow.Application.GetResourceId"/>
            
            if **resourceID** is set to a empty string, any resource will be used - see <see cref="M:Rainbow.Application.GetResourceId"/>
            
            Only devices corresponding to the specified which can manage this will propose to accept it
            
            </summary>
            <param name="phoneNumber"><see cref="T:System.String"/>The number to call</param>
            <param name="resourceId"><see cref="T:System.String"/>The resource Id used to perform the call</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{String}}"/>Callback fired when the operation is done -  A call object is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs (Call.Id and Call.GloballCallId are only available)</param>
        </member>
        <member name="M:Rainbow.Telephony.MakeCallWithSubject(System.String,System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.Call}})">
            <summary>
            Call a number with a subject. Only canonical number or internal number are allowed
            
            All devices which can manage this call will propose to accept it
            
            </summary>
            <param name="phoneNumber"><see cref="T:System.String"/>The number to call</param>
            <param name="subject"><see cref="T:System.String"/>The subject of the call</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{String}}"/>Callback fired when the operation is done -  A call object is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs (Call.Id and Call.GloballCallId are only available)</param>
        </member>
        <member name="M:Rainbow.Telephony.MakeCallWithSubject(System.String,System.String,System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.Call}})">
            <summary>
            Call a number with a subject. Only canonical number or internal number are allowed
            
            if **resourceID** is set to null, current resourceId is used - see <see cref="M:Rainbow.Application.GetResourceId"/>
            
            if **resourceID** is set to a empty string, any resource will be used
            
            Only devices corresponding to the specified which can manage this will propose to accept it
            
            </summary>
            <param name="phoneNumber"><see cref="T:System.String"/>The number to call</param>
            <param name="subject"><see cref="T:System.String"/>The subject of the call</param>
            <param name="resourceId"><see cref="T:System.String"/>The resource Id used to perform the call</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{String}}"/>Callback fired when the operation is done -  A call object is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs (Call.Id and Call.GloballCallId are only available)</param>
        </member>
        <member name="M:Rainbow.Telephony.MakeCallToMevo(System.Action{Rainbow.SdkResult{Rainbow.Model.Call}})">
            <summary>
            Call the voice mail
            
            All devices which can manage this call will propose to accept it
            
            </summary>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{String}}"/>Callback fired when the operation is done -  A call object is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs (Call.Id and Call.GloballCallId are only available)</param>
        </member>
        <member name="M:Rainbow.Telephony.MakeCallToMevo(System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.Call}})">
            <summary>
            Call the voice mail
            
            if **resourceID** is set to null, current resourceId is used - see <see cref="M:Rainbow.Application.GetResourceId"/>
            
            if **resourceID** is set to a empty string, any resource will be used
            
            Only devices corresponding to the specified which can manage this will propose to accept it
            
            </summary>
            <param name="resourceId"><see cref="T:System.String"/>The resource Id used to perform the call</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{String}}"/>Callback fired when the operation is done -  A call object is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs (Call.Id and Call.GloballCallId are only available)</param>
        </member>
        <member name="M:Rainbow.Telephony.ConsultationCall(System.String,System.String,System.Action{Rainbow.SdkResult{Rainbow.Model.Call}})">
            <summary>
            Make a consulation call. It's used to performed a second call when another call is already ACTIVE (and not on hold). Once the consultation call is well performed, the active call is automatically put on hold by the system.
            
            Only canonical number or internal number are allowed to make the consulation call.
            </summary>
            <param name="activeCallId"><see cref="T:System.String"/>An active callId in progress</param>
            <param name="phoneNumber"><see cref="T:System.String"/>The number to call</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{String}}"/>Callback fired when the operation is done -  A call object is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs (Call.Id and Call.GloballCallId are only available)</param>
        </member>
        <member name="M:Rainbow.Telephony.AnswerCall(System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            Answer the PBX call using its call id
            </summary>
            <param name="callId"><see cref="T:System.String"/>The call id</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Telephony.ReleaseCall(System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            Release the PBX call using its call id
            </summary>
            <param name="callId"><see cref="T:System.String"/>The call id</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Telephony.HoldCall(System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            Hold a PBX call using its call id. A conference PBX call (i.e. with several participants) cannot be put on hold
            </summary>
            <param name="callId"><see cref="T:System.String"/>The call id</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Telephony.RetrieveCall(System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            Retrieve (unhold) the PBX call using its call id. You can retrieve a PBX call only if it's the current himself who put the PBX call on hold
            </summary>
            <param name="callId"><see cref="T:System.String"/>The call id</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Telephony.DeflectCall(System.String,System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            Deflect incoming PBX call to the specified phone number
            </summary>
            <param name="callId"><see cref="T:System.String"/>The call id to deflect</param>
            <param name="phoneNumber"><see cref="T:System.String"/>The phone number to use for the deflect</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Telephony.DeflectCallToMevo(System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            Deflect incoming PBX call to mevo
            </summary>
            <param name="callId"><see cref="T:System.String"/>The call id to deflect</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Telephony.TransferCall(System.String,System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            Transfer an active PBX call to an held PBX call
            </summary>
            <param name="activeCallId"><see cref="T:System.String"/>The active call id to transfer</param>
            <param name="heldCallId"><see cref="T:System.String"/>The held call id receiving the transferred call</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Telephony.ConferenceCall(System.String,System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            Create conference call with an active PBX call and an held PBX call
            </summary>
            <param name="activeCallId"><see cref="T:System.String"/>The active call id </param>
            <param name="heldCallId"><see cref="T:System.String"/>The held call id </param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Telephony.SendDtmf(System.String,System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            To send DTMF in an active PBX call. You specify several caracters in same call
            </summary>
            <param name="callId"><see cref="T:System.String"/>ID of the PBX call</param>
            <param name="dtmf"><see cref="T:System.String"/>DTMF to send</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done - True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Telephony.ACDLogon(System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            This api allows an ACD Agent to logon into the CCD system.
            </summary>
            <param name="endpointTel"><see cref="T:System.String"/>The endpoint device phone number.</param>
            <param name="agentId"><see cref="T:System.String"/>ACD Agent identifier (agent device number) (optional)</param>
            <param name="password"><see cref="T:System.String"/>Password or authorization code. (optional)
            The given password is transmitted as is to the Pbx, so there are two use cases :
            1- the password is not requested by the Pbx : the password parameter has to be either empty or not present in the Logon.
            2- the password is requested by the Pbx : the password parameter has be present in the logon. The password will be stored in in PCG for further requests (wrapup and logoff).
            In both cases, the password presence(sent in the ACD status) will be set at true.</param>
            <param name="groupId"><see cref="T:System.String"/>ACD Agent's group number (optional)</param>
            <param name="nomadic"><see cref="T:System.Boolean"/>Boolean (can be null) which indicates if the user wants to use the nomadic mode or not.
            1- 'agentId' is present.
            'nomadic' = true : the device corresponding to the agentId is tested to be suitable with nomadic mode, if not, the logon is rejected.
            'nomadic' = false : the device corresponding to the agentId is tested to be suitable with legacy telephony, if not, the logon is rejected.
            2- 'agentId' is not present or empty :
            'nomadic' = true : a nomadic suitable device is selected from a pre-built pool(Pro ACD from REX type), and its will become the 'agentId' for the logon.
            'nomadic' = false : the logon will be done on the Pbx without agentId. In this case we are assuming that the Pbx is configured to handle a logon without 'agentId'.</param>
            <param name="nomadicDestination"><see cref="T:System.String"/>(optional) In order to address the nomadic mode with a Rex ProACD device, the PCG will activate a nomadic mode just before the Logon. If the destination is empty (or absent) or if the ProACD device is not a Rex, this nomadic login will not be done.</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done -  True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Telephony.ACDLogoff(System.String,System.String,System.String,System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            This api allows an ACD Agent to logoff from the CCD system.
            </summary>
            <param name="endpointTel"><see cref="T:System.String"/>The endpoint device phone number.</param>
            <param name="agentId"><see cref="T:System.String"/>CCD Agent identifier (agent device number). (can be empty)</param>
            <param name="password"><see cref="T:System.String"/>Password or authorization code.</param>
            <param name="groupId"><see cref="T:System.String"/>CCD Agent's group number</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done -  True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Telephony.ACDStatus(System.Action{Rainbow.SdkResult{Rainbow.Model.ACDStatus}})">
            <summary>
            This api allows an ACD Agent to get its device's current ACD status.
            </summary>
        </member>
        <member name="M:Rainbow.Telephony.ACDWithdrawal(System.String,System.String,System.Boolean,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            This api allows an ACD Agent to change to the state 'Not Ready' on the CCD system. 
            </summary>
            <param name="agentId"><see cref="T:System.String"/>ACD Agent identifier (agent device number).</param>
            <param name="groupId"><see cref="T:System.String"/>ACD Agent's group number</param>
            <param name="stateReady"><see cref="T:System.Boolean"/>Used to activate / deactivate the withdrawal state. </param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done -  True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Telephony.ACDWrapUp(System.String,System.String,System.String,System.Boolean,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            This api allows an ACD Agent to change to the state Working After Call in the CCD system.
            </summary>
            <param name="agentId"><see cref="T:System.String"/>ACD Agent identifier (agent device number).</param>
            <param name="groupId"><see cref="T:System.String"/>ACD Agent's group number</param>
            <param name="password"><see cref="T:System.String"/>Password or authorization code. (Can be empty)</param>
            <param name="stateReady"><see cref="T:System.Boolean"/>Used to activate / deactivate the wrapup state. </param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done -  True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Telephony.CCDLogon(System.String,System.String,System.String,System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            This api allows an CCD (Call Center Distribution) Agent to logon into the CCD system. (Only on OXE system)
            </summary>
            <param name="endpointTel"><see cref="T:System.String"/>The endpoint device phone number.</param>
            <param name="agentId"><see cref="T:System.String"/>CCD Agent identifier (agent device number). (can be empty)</param>
            <param name="password"><see cref="T:System.String"/>Password or authorization code.</param>
            <param name="groupId"><see cref="T:System.String"/>CCD Agent's group number</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done -  True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Telephony.CCDLogoff(System.String,System.String,System.String,System.String,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            This api allows an CCD (Call Center Distribution) Agent to logoff from the CCD system. (Only on OXE system)
            </summary>
            <param name="endpointTel"><see cref="T:System.String"/>The endpoint device phone number.</param>
            <param name="agentId"><see cref="T:System.String"/>CCD Agent identifier (agent device number). (can be empty)</param>
            <param name="password"><see cref="T:System.String"/>Password or authorization code.</param>
            <param name="groupId"><see cref="T:System.String"/>CCD Agent's group number</param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done -  True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Telephony.CCDWithdrawal(System.String,System.String,System.Boolean,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            This api allows an CCD (Call Center Distribution) Agent to change to the state 'Ready' / 'Not Ready' on the CCD system. When the parameter 'stateReady' is set to true, the state is changed to 'Ready'. (Only on OXE system)
            </summary>
            <param name="agentId"><see cref="T:System.String"/>CCD Agent identifier (agent device number).</param>
            <param name="groupId"><see cref="T:System.String"/>CCD Agent's group number</param>
            <param name="stateReady"><see cref="T:System.Boolean"/>Used to activate / deactivate the withdrawal state. </param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done -  True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="M:Rainbow.Telephony.CCDWrapUp(System.String,System.String,System.String,System.Boolean,System.Action{Rainbow.SdkResult{System.Boolean}})">
            <summary>
            This api allows an CCD (Call Center Distribution) Agent to change to the state Working After Call in the CCD system. When the parameter 'stateReady' is set to true, the state is changed to 'Ready'. (Only on OXE system)
            </summary>
            <param name="agentId"><see cref="T:System.String"/>CCD Agent identifier (agent device number).</param>
            <param name="groupId"><see cref="T:System.String"/>CCD Agent's group number</param>
            <param name="password"><see cref="T:System.String"/>Password or authorization code. (Can be empty)</param>
            <param name="stateReady"><see cref="T:System.Boolean"/>Used to activate / deactivate the wrapup state. </param>
            <param name="callback"><see cref="T:Action{Rainbow.SdkResult{Boolean}}"/>Callback fired when the operation is done -  True is expected in **Data** member of <see cref="T:Rainbow.SdkResult`1"/> if no error occurs</param>
        </member>
        <member name="T:Rainbow.Util">
            <summary>
            Object to store useful static methods
            </summary>
        </member>
        <member name="M:Rainbow.Util.GetSDKFolderPath">
            <summary>
            Return the folder path where the SDK is stored / used.
            </summary>
            <returns><see cref="T:System.String"/> Full folder path where the SDK is stored / used.</returns>
        </member>
        <member name="M:Rainbow.Util.Raise``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
            Facilitator to raise easily an event
            
            Example:
            <code>
             public event EventHandler&lt;JidEventArgs&gt; ContactAvatarChanged;
             ...
             ContactAvatarChanged.Raise(this, new JidEventArgs("jid@myXmppDomain"));
             ...
            </code>
            </summary>
            <typeparam name="T"><see cref="T:System.Object"/>An object of type <see cref="T:System.EventArgs"/></typeparam>
            <param name="event"><see cref="T:System.EventArgs"/>An object of type <see cref="T:System.EventArgs"/></param>
            <param name="sender"><see cref="T:System.Object"/>The sender of this event</param>
            <param name="args"><see cref="T:System.Object"/>Arguments used by this event</param>
        </member>
        <member name="M:Rainbow.Util.DateTimeToUnixTimeStamp(System.DateTime)">
            <summary>
            Convert a <see cref="T:System.DateTime"/> object to Unix timestamp
            </summary>
            <param name="date"><see cref="T:System.DateTime"/>The DateTime object to convert</param>
            <returns><see cref="T:System.Double"/> - The Unix timestamp</returns>
        </member>
        <member name="M:Rainbow.Util.GetGUID">
            <summary>
            Get a Global Unique IDentifier (GUID). Example: 9c146982a3ad48089457a2c12db68dab
            </summary>
            <returns><see cref="T:System.String"/> - A GUID</returns>
        </member>
        <member name="M:Rainbow.Util.AddMedia(System.Int32,System.Int32)">
            <summary>
            To add a media in the list of medias provided
            </summary>
            <param name="medias"><see cref="T:System.Int32"/>Medias list</param>
            <param name="mediaAdded"><see cref="T:System.Int32"/>Media to add</param>
            <returns><see cref="T:System.Int32"/>new Medias list</returns>
        </member>
        <member name="M:Rainbow.Util.RemoveMedia(System.Int32,System.Int32)">
            <summary>
            To remove a media from the list of medias provided
            </summary>
            <param name="medias"><see cref="T:System.Int32"/>Medias list</param>
            <param name="mediaRemoved"><see cref="T:System.Int32"/>Media to remove</param>
            <returns><see cref="T:System.Int32"/>new Medias list</returns>
        </member>
        <member name="M:Rainbow.Util.MediasWithAudio(System.Int32)">
            <summary>
            To check if Audio is used in medias specified
            </summary>
            <param name="medias"><see cref="T:Rainbow.Model.Call.Media"/>One or several medias</param>
            <returns><see cref="T:System.Boolean"/> - True if Audio is used</returns>
        </member>
        <member name="M:Rainbow.Util.MediasWithVideo(System.Int32)">
            <summary>
            To check if Video is used in medias specified
            </summary>
            <param name="medias"><see cref="T:Rainbow.Model.Call.Media"/>One or several medias</param>
            <returns><see cref="T:System.Boolean"/> - True if Video is used</returns>
        </member>
        <member name="M:Rainbow.Util.MediasWithSharing(System.Int32)">
            <summary>
            To check if Sharing is used in medias specified
            </summary>
            <param name="medias"><see cref="T:Rainbow.Model.Call.Media"/>One or several medias</param>
            <returns><see cref="T:System.Boolean"/> - True if Sharing is used</returns>
        </member>
        <member name="M:Rainbow.Util.MediasWithAudioOnly(System.Int32)">
            <summary>
            To check if ONLY Audio is used in medias specified
            </summary>
            <param name="medias"><see cref="T:Rainbow.Model.Call.Media"/>One or several medias</param>
            <returns><see cref="T:System.Boolean"/> - True if ONLY Audio is used</returns>
        </member>
        <member name="M:Rainbow.Util.MediasWithAudioAndVideoOnly(System.Int32)">
            <summary>
            To check if ONLY Audio AND Video are used in medias specified
            </summary>
            <param name="medias"><see cref="T:Rainbow.Model.Call.Media"/>One or several medias</param>
            <returns><see cref="T:System.Boolean"/> - True if ONLY Audio AND Video are used</returns>
        </member>
        <member name="M:Rainbow.Util.MediasWithVideoOnly(System.Int32)">
            <summary>
            To check if ONLY Video is used in medias specified
            </summary>
            <param name="medias"><see cref="T:Rainbow.Model.Call.Media"/>One or several medias</param>
            <returns><see cref="T:System.Boolean"/> - True if ONLY Video is used</returns>
        </member>
        <member name="M:Rainbow.Util.MediasWithAudioAndSharingOnly(System.Int32)">
            <summary>
            To check if ONLY Audio AND Sharing are used in medias specified
            </summary>
            <param name="medias"><see cref="T:Rainbow.Model.Call.Media"/>One or several medias</param>
            <returns><see cref="T:System.Boolean"/> - True if ONLY Sharing is used</returns>
        </member>
        <member name="M:Rainbow.Util.MediasWithSharingOnly(System.Int32)">
            <summary>
            To check if ONLY Sharing is used in medias specified
            </summary>
            <param name="medias"><see cref="T:Rainbow.Model.Call.Media"/>One or several medias</param>
            <returns><see cref="T:System.Boolean"/> - True if ONLY Sharing is used</returns>
        </member>
        <member name="M:Rainbow.Util.GetJsonStringFromObject(System.Object,System.Boolean)">
            <summary>
            Converts an object to its JSON string representation. 
            </summary>
            <param name="obj"><see cref="T:System.Object"/>The objet to convert</param>
            <param name="indented"><see cref="T:System.Boolean"/>To indent the string (false by default)</param>
            <returns><see cref="T:System.String"/> JSON String representation</returns>
        </member>
        <member name="M:Rainbow.Util.GetJsonStringFromDictionary(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Converts a Dictionary(String, object)to its JSON string representation. 
            
            NOTE: if a key  is referencinge a null object, this key is removed in the JSON string representation
            </summary>
            <param name="dico"><see cref="T:Dictionary{String, object}"/>The Dictionary to convert</param>
            <returns><see cref="T:System.String"/> JSON String representation</returns>
        </member>
        <member name="M:Rainbow.Util.ToJsonString(System.String)">
            <summary>
            Converts the String to its JSON string representation. 
            </summary>
            <param name="str"><see cref="T:System.String"/>The string to convert</param>
            <returns><see cref="T:System.String"/> JSON String representation</returns>
        </member>
        <member name="M:Rainbow.Util.WriteToJsonFile``1(System.String,``0,System.Boolean)">
            <summary>
            Writes the given object instance to a Json file.
            
            Object type must have a parameterless constructor.
            
            Only Public properties and variables will be written to the file. These can be any type though, even other classes.
            
            If there are public properties/variables that you do not want written to the file, decorate them with the [JsonIgnore] attribute.
            </summary>
            <typeparam name="T">The type of object being written to the file.</typeparam>
            <param name="filePath"><see cref="T:System.String"/>The file path to write the object instance to.</param>
            <param name="objectToWrite"><see cref="T:T"/>The object instance to write to the file.</param>
            <param name="append"><see cref="T:System.Boolean"/>If false the file will be overwritten if it already exists. If true the contents will be appended to the file.</param>
        </member>
        <member name="M:Rainbow.Util.ReadFromJsonFile``1(System.String)">
            <summary>
            Reads an object instance from an Json file.
            <para>Object type must have a parameterless constructor.</para>
            </summary>
            <typeparam name="T"><see cref="T:T"/> - The type of object to read from the file.</typeparam>
            <param name="filePath"><see cref="T:System.String"/>The file path to read the object instance from.</param>
            <returns><see cref="T:T"/> - Returns a new instance of the object read from the Json file.</returns>
        </member>
        <member name="M:Rainbow.Util.GetJidNode(System.String)">
            <summary>
            Get the Jid node from the specified Jid
            
            Examples: 
            
            - "cb9d411b7d42f2817@rainbow.com" will return "cb9d411b7d42f2817"
            
            - "tel_cb9d411b7d42f2817@rainbow.com" will return "tel_cb9d411b7d42f2817"
            
            - "cb9d411b7d42f2817" will return "cb9d411b7d42f2817"
            </summary>
            <param name="jid"><see cref="T:System.String"/>Jid value</param>
            <returns><see cref="T:System.String"/> - The Jid node value - empty string if not found</returns>
        </member>
        <member name="M:Rainbow.Util.GetDomainFromJid(System.String)">
            <summary>
            Get the Domain of the specified Jid
            
            For example if Jid is: 'fdsqsd1456546qsdf@mydomain.fr' the domain value is 'mydomain.fr'
            </summary>
            <param name="jid"><see cref="T:System.String"/>Jid value</param>
            <returns><see cref="T:System.String"/> - the domain value - empty string if not found</returns>
        </member>
        <member name="M:Rainbow.Util.GetBasicNodeJid(System.String)">
            <summary>
            Return the Basic Node of a Jid (i.e. remove "tel_" if any)
            
            Example: 
            
            "tel_cb9d411b7d42f2817@rainbow.com" will return "cb9d411b7d42f2817"
            
            "cb9d411b7d42f2817@rainbow.com" will return "cb9d411b7d42f2817"
            </summary>
            <param name="jid"><see cref="T:System.String"/> Jid (with node and domain)</param>
            <returns>Returns the Node Jid </returns>
        </member>
        <member name="M:Rainbow.Util.IsBasicNodeJid(System.String)">
            <summary>
            Return True if Jid provided is a Basic Node Jid - see <see cref="M:Rainbow.Util.GetBasicNodeJid(System.String)"/>
            </summary>
            <param name="jid"><see cref="T:System.String"/>Jid to check</param>
            <returns><see cref="T:System.Boolean"/> - True if Jid provided is a Basic Node Jid </returns>
        </member>
        <member name="M:Rainbow.Util.GetJidFromFullJid(System.String)">
            <summary>
            Get the Full Jid from the specified Jid with resource value
            
            For example if Jid is: 'fdsqsd1456546qsdf@mydomain.fr/resourceId' the full Jid node value is 'fdsqsd1456546qsdf@mydomain.fr'
            </summary>
            <param name="jidWithResource"><see cref="T:System.String"/>Jid with resource value</param>
            <returns><see cref="T:System.String"/> - The Jid node value - empty string if not found</returns>
        </member>
        <member name="M:Rainbow.Util.GetResourceFromFullJid(System.String)">
            <summary>
            Get the resource the specified Jid with resource value
            
            For example if Jid is: 'fdsqsd1456546qsdf@mydomain.fr/resourceId' the resource is 'resourceId'
            </summary>
            <param name="jidWithResource"><see cref="T:System.String"/>Jid with resource value</param>
            <returns><see cref="T:System.String"/> - The resource value - empty string if not found</returns>
        </member>
        <member name="M:Rainbow.Util.LogString(System.String)">
            <summary>
            To ensure privacy, return first letter and last letter of the string provided.
            
            Other caracters are replaced by the char '-'
            
            For example this string "bill" will be transformed into "b--l"
            </summary>
            <param name="value"><see cref="T:System.String"/>Name to log</param>
            <returns><see cref="T:System.String"/> - String result</returns>
        </member>
        <member name="M:Rainbow.Util.LogDotString(System.String)">
            <summary>
            To ensure privacy, split string using "." as separator and for each part use **LogString**
            
            For example this string "bill.gates" will be transformed into "b--l.g---s"
            </summary>
            <param name="value"><see cref="T:System.String"/>Value to log</param>
            <returns><see cref="T:System.String"/> - String result</returns>
        </member>
        <member name="M:Rainbow.Util.LogEmail(System.String)">
            <summary>
            To ensure privacy, all email parts are serialized using **LogString** and **LogDotString**
            
            For example this email "bill.gates@microsoft.com" will be transformed into "b--l.g---s@m-------t.c-m"
            </summary>
            <param name="email"><see cref="T:System.String"/>Email to log</param>
            <returns><see cref="T:System.String"/> - String result</returns>
        </member>
        <member name="M:Rainbow.Util.LogPhoneNumber(System.String)">
            <summary>
            To ensure privacy, transform phone number with a lenght greater than 6 caracters using '-'
            
            Examples: 
            * "123" => "123"
            * "123456" => "123456"
            * "1234567890" => "123----890"
            * "+3312345678" => "+33-----678"
            </summary>
            <param name="value"><see cref="T:System.String"/>Phone number to log</param>
            <returns><see cref="T:System.String"/> - String result</returns>
        </member>
        <member name="M:Rainbow.Util.SetEncryptionKey(System.String)">
            <summary>
            Set key used for the encryption (must be >= 32 or an exception is raised)
            </summary>
            <param name="key"><see cref="T:System.String"/>The key to use for encryption</param>
            <returns>Returns the encrypted string </returns>
        </member>
        <member name="M:Rainbow.Util.Encrypt(System.String)">
            <summary>
            Encrypts the specified string
            </summary>
            <param name="toEncrypt"><see cref="T:System.String"/>The string to encrypt</param>
            <returns>Returns the encrypted string </returns>
        </member>
        <member name="M:Rainbow.Util.Decrypt(System.String)">
            <summary>
            Decrypts the specified string
            </summary>
            <param name="toDecrypt"><see cref="T:System.String"/>The string to decrypt</param>
            <returns>Returns the decrypted string </returns>
        </member>
        <member name="M:Rainbow.Util.CreateMD5(System.String)">
            <summary>
            Get MD5 value from specified string
            </summary>
            <param name="input"><see cref="T:System.String"/>A string</param>
            <returns>Returns MD5 value from specified string </returns>
        </member>
        <member name="M:Rainbow.Util.SerializeException(System.Exception)">
            <summary>
            Permits to serialize exception (to log it for example)
            </summary>
            <param name="exception"><see cref="T:System.Exception"/>Exception object to serialize</param>
            <returns><see cref="T:System.String"/> - The serialization result</returns>
        </member>
        <member name="M:Rainbow.Util.SerializeSdkError(Rainbow.SdkError)">
            <summary>
            Permits to serialize SdkError object (to log it for example)
            </summary>
            <param name="sdkError"><see cref="T:Rainbow.SdkError"/> SdkError object to serialize</param>
            <returns><see cref="T:System.String"/> - The serialization result</returns>
        </member>
        <member name="M:Rainbow.Util.SerializeSdkResult``1(Rainbow.SdkResult{``0})">
            <summary>
            Permits to serialize SdkResult object (to log it for example). Useful only if SdkResult contains an error;
            </summary>
            <param name="sdkResult"><see cref="T:Rainbow.SdkResult`1"/> SdkResult object to serialize</param>
            <returns><see cref="T:System.String"/> - The serialization result</returns>
        </member>
        <member name="M:Rainbow.Util.SerializeFromResponse(RestSharp.IRestResponse)">
            <summary>
            Permits to serialize IRestResponse object (to log it for example)
            </summary>
            <param name="response"><see cref="T:RestSharp.IRestResponse"/> IRestResponse object to serialize</param>
            <returns><see cref="T:System.String"/> - The serialization result</returns>
        </member>
        <member name="M:Rainbow.Util.SerializeFromResponse``1(RestSharp.IRestResponse{``0})">
            <summary>
            Permits to serialize IRestResponse&lt;T&gt; object (to log it for example)
            </summary>
            <typeparam name="T">The type of object being written to the file.</typeparam>
            <param name="response"><see cref="T:RestSharp.IRestResponse"/> IRestResponse&lt;T&gt; object to serialize</param>
            <returns><see cref="T:System.String"/> - The serialization result</returns>
        </member>
        <member name="M:Rainbow.Util.SerializePresence(Rainbow.Model.Presence)">
            <summary>
            Permits to serialize Presence object
            </summary>
            <param name="presence"><see cref="T:Sharp.Xmpp.Im.Presence"/>Presence object to serialize</param>
            <returns><see cref="T:System.String"/> - "unknown" if the serialization cannot be performed</returns>
        </member>
        <member name="M:Rainbow.Util.UseFirstNameFirst(System.Boolean)">
            <summary>
            To set if we use "first Name first" to create "display name" (False by default)
            </summary>
            <param name="b"><see cref="T:System.Boolean"/> True to use "first Name first" to create display name</param>
        </member>
        <member name="M:Rainbow.Util.IsFirstNameFirst">
            <summary>
            To know if we use "first Name first" to create "display name" (False by default)
            </summary>
            <returns><see cref="T:System.Boolean"/> - True if we use "first Name first" to create display name</returns>
        </member>
        <member name="M:Rainbow.Util.FirstLetterToLowerCase(System.String)">
            <summary>
            Returns the specifiy string with the first letter in lower case
            </summary>
            <param name="s"><see cref="T:System.String"/>The string to modify</param>
            <returns>Returns the specifiy string with the first letter in lower case or null</returns>
        </member>
        <member name="M:Rainbow.Util.FirstLetterToUpperCase(System.String)">
            <summary>
            Returns the specifiy string with the first letter in upper case
            </summary>
            <param name="s"><see cref="T:System.String"/>The string to modify</param>
            <returns>Returns the specifiy string with the first upper in lower case or null</returns>
        </member>
        <member name="M:Rainbow.Util.GetContactDisplayName(Rainbow.Model.Contact)">
            <summary>
            Get the display name of the Contact
            </summary>
            <param name="contact"><see cref="T:Rainbow.Model.Contact"/>Contact object</param>
            <returns><see cref="T:System.String"/>The display name. Return '?' if not found.</returns>
        </member>
        <member name="M:Rainbow.Util.GetContactInitials(Rainbow.Model.Contact)">
            <summary>
            Get the initials of the Contact
            </summary>
            <param name="contact"><see cref="T:Rainbow.Model.Contact"/>Contact object</param>
            <returns><see cref="T:System.String"/>The initials of the contact. Return '?' if not found.</returns>
        </member>
    </members>
</doc>
